// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct MiniGameDreamDailyPointExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MiniGameDreamDailyPointExcel GetRootAsMiniGameDreamDailyPointExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamDailyPointExcel(_bb, new MiniGameDreamDailyPointExcel()); }
  public static MiniGameDreamDailyPointExcel GetRootAsMiniGameDreamDailyPointExcel(ByteBuffer _bb, MiniGameDreamDailyPointExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamDailyPointExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TotalParameterMin { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TotalParameterMax { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DailyPointCoefficient { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DailyPointCorrectionValue { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SCHALE.Common.FlatData.MiniGameDreamDailyPointExcel> CreateMiniGameDreamDailyPointExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      long EventContentId = 0,
      long TotalParameterMin = 0,
      long TotalParameterMax = 0,
      long DailyPointCoefficient = 0,
      long DailyPointCorrectionValue = 0) {
    builder.StartTable(6);
    MiniGameDreamDailyPointExcel.AddDailyPointCorrectionValue(builder, DailyPointCorrectionValue);
    MiniGameDreamDailyPointExcel.AddDailyPointCoefficient(builder, DailyPointCoefficient);
    MiniGameDreamDailyPointExcel.AddTotalParameterMax(builder, TotalParameterMax);
    MiniGameDreamDailyPointExcel.AddTotalParameterMin(builder, TotalParameterMin);
    MiniGameDreamDailyPointExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamDailyPointExcel.AddUniqueId(builder, UniqueId);
    return MiniGameDreamDailyPointExcel.EndMiniGameDreamDailyPointExcel(builder);
  }

  public static void StartMiniGameDreamDailyPointExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(0, uniqueId, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(1, eventContentId, 0); }
  public static void AddTotalParameterMin(FlatBufferBuilder builder, long totalParameterMin) { builder.AddLong(2, totalParameterMin, 0); }
  public static void AddTotalParameterMax(FlatBufferBuilder builder, long totalParameterMax) { builder.AddLong(3, totalParameterMax, 0); }
  public static void AddDailyPointCoefficient(FlatBufferBuilder builder, long dailyPointCoefficient) { builder.AddLong(4, dailyPointCoefficient, 0); }
  public static void AddDailyPointCorrectionValue(FlatBufferBuilder builder, long dailyPointCorrectionValue) { builder.AddLong(5, dailyPointCorrectionValue, 0); }
  public static Offset<SCHALE.Common.FlatData.MiniGameDreamDailyPointExcel> EndMiniGameDreamDailyPointExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.MiniGameDreamDailyPointExcel>(o);
  }
  public MiniGameDreamDailyPointExcelT UnPack() {
    var _o = new MiniGameDreamDailyPointExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MiniGameDreamDailyPointExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MiniGameDreamDailyPoint");
    _o.UniqueId = TableEncryptionService.Convert(this.UniqueId, key);
    _o.EventContentId = TableEncryptionService.Convert(this.EventContentId, key);
    _o.TotalParameterMin = TableEncryptionService.Convert(this.TotalParameterMin, key);
    _o.TotalParameterMax = TableEncryptionService.Convert(this.TotalParameterMax, key);
    _o.DailyPointCoefficient = TableEncryptionService.Convert(this.DailyPointCoefficient, key);
    _o.DailyPointCorrectionValue = TableEncryptionService.Convert(this.DailyPointCorrectionValue, key);
  }
  public static Offset<SCHALE.Common.FlatData.MiniGameDreamDailyPointExcel> Pack(FlatBufferBuilder builder, MiniGameDreamDailyPointExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.MiniGameDreamDailyPointExcel>);
    return CreateMiniGameDreamDailyPointExcel(
      builder,
      _o.UniqueId,
      _o.EventContentId,
      _o.TotalParameterMin,
      _o.TotalParameterMax,
      _o.DailyPointCoefficient,
      _o.DailyPointCorrectionValue);
  }
}

public class MiniGameDreamDailyPointExcelT
{
  public long UniqueId { get; set; }
  public long EventContentId { get; set; }
  public long TotalParameterMin { get; set; }
  public long TotalParameterMax { get; set; }
  public long DailyPointCoefficient { get; set; }
  public long DailyPointCorrectionValue { get; set; }

  public MiniGameDreamDailyPointExcelT() {
    this.UniqueId = 0;
    this.EventContentId = 0;
    this.TotalParameterMin = 0;
    this.TotalParameterMax = 0;
    this.DailyPointCoefficient = 0;
    this.DailyPointCorrectionValue = 0;
  }
}


static public class MiniGameDreamDailyPointExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*TotalParameterMin*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*TotalParameterMax*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*DailyPointCoefficient*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*DailyPointCorrectionValue*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
