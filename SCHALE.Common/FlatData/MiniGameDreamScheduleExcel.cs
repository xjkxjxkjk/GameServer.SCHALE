// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct MiniGameDreamScheduleExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MiniGameDreamScheduleExcel GetRootAsMiniGameDreamScheduleExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamScheduleExcel(_bb, new MiniGameDreamScheduleExcel()); }
  public static MiniGameDreamScheduleExcel GetRootAsMiniGameDreamScheduleExcel(ByteBuffer _bb, MiniGameDreamScheduleExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamScheduleExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerScheduleGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DisplayOrder { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string IconPath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(12); }
  public string LoadingResource01 { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLoadingResource01Bytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetLoadingResource01Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetLoadingResource01Array() { return __p.__vector_as_array<byte>(14); }
  public string LoadingResource02 { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLoadingResource02Bytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLoadingResource02Bytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLoadingResource02Array() { return __p.__vector_as_array<byte>(16); }
  public string AnimationName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetAnimationNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetAnimationNameArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<SCHALE.Common.FlatData.MiniGameDreamScheduleExcel> CreateMiniGameDreamScheduleExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long DreamMakerScheduleGroupId = 0,
      long DisplayOrder = 0,
      uint LocalizeEtcId = 0,
      StringOffset IconPathOffset = default(StringOffset),
      StringOffset LoadingResource01Offset = default(StringOffset),
      StringOffset LoadingResource02Offset = default(StringOffset),
      StringOffset AnimationNameOffset = default(StringOffset)) {
    builder.StartTable(8);
    MiniGameDreamScheduleExcel.AddDisplayOrder(builder, DisplayOrder);
    MiniGameDreamScheduleExcel.AddDreamMakerScheduleGroupId(builder, DreamMakerScheduleGroupId);
    MiniGameDreamScheduleExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamScheduleExcel.AddAnimationName(builder, AnimationNameOffset);
    MiniGameDreamScheduleExcel.AddLoadingResource02(builder, LoadingResource02Offset);
    MiniGameDreamScheduleExcel.AddLoadingResource01(builder, LoadingResource01Offset);
    MiniGameDreamScheduleExcel.AddIconPath(builder, IconPathOffset);
    MiniGameDreamScheduleExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    return MiniGameDreamScheduleExcel.EndMiniGameDreamScheduleExcel(builder);
  }

  public static void StartMiniGameDreamScheduleExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddDreamMakerScheduleGroupId(FlatBufferBuilder builder, long dreamMakerScheduleGroupId) { builder.AddLong(1, dreamMakerScheduleGroupId, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long displayOrder) { builder.AddLong(2, displayOrder, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint localizeEtcId) { builder.AddUint(3, localizeEtcId, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset iconPathOffset) { builder.AddOffset(4, iconPathOffset.Value, 0); }
  public static void AddLoadingResource01(FlatBufferBuilder builder, StringOffset loadingResource01Offset) { builder.AddOffset(5, loadingResource01Offset.Value, 0); }
  public static void AddLoadingResource02(FlatBufferBuilder builder, StringOffset loadingResource02Offset) { builder.AddOffset(6, loadingResource02Offset.Value, 0); }
  public static void AddAnimationName(FlatBufferBuilder builder, StringOffset animationNameOffset) { builder.AddOffset(7, animationNameOffset.Value, 0); }
  public static Offset<SCHALE.Common.FlatData.MiniGameDreamScheduleExcel> EndMiniGameDreamScheduleExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.MiniGameDreamScheduleExcel>(o);
  }
  public MiniGameDreamScheduleExcelT UnPack() {
    var _o = new MiniGameDreamScheduleExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MiniGameDreamScheduleExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MiniGameDreamSchedule");
    _o.EventContentId = TableEncryptionService.Convert(this.EventContentId, key);
    _o.DreamMakerScheduleGroupId = TableEncryptionService.Convert(this.DreamMakerScheduleGroupId, key);
    _o.DisplayOrder = TableEncryptionService.Convert(this.DisplayOrder, key);
    _o.LocalizeEtcId = TableEncryptionService.Convert(this.LocalizeEtcId, key);
    _o.IconPath = TableEncryptionService.Convert(this.IconPath, key);
    _o.LoadingResource01 = TableEncryptionService.Convert(this.LoadingResource01, key);
    _o.LoadingResource02 = TableEncryptionService.Convert(this.LoadingResource02, key);
    _o.AnimationName = TableEncryptionService.Convert(this.AnimationName, key);
  }
  public static Offset<SCHALE.Common.FlatData.MiniGameDreamScheduleExcel> Pack(FlatBufferBuilder builder, MiniGameDreamScheduleExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.MiniGameDreamScheduleExcel>);
    var _IconPath = _o.IconPath == null ? default(StringOffset) : builder.CreateString(_o.IconPath);
    var _LoadingResource01 = _o.LoadingResource01 == null ? default(StringOffset) : builder.CreateString(_o.LoadingResource01);
    var _LoadingResource02 = _o.LoadingResource02 == null ? default(StringOffset) : builder.CreateString(_o.LoadingResource02);
    var _AnimationName = _o.AnimationName == null ? default(StringOffset) : builder.CreateString(_o.AnimationName);
    return CreateMiniGameDreamScheduleExcel(
      builder,
      _o.EventContentId,
      _o.DreamMakerScheduleGroupId,
      _o.DisplayOrder,
      _o.LocalizeEtcId,
      _IconPath,
      _LoadingResource01,
      _LoadingResource02,
      _AnimationName);
  }
}

public class MiniGameDreamScheduleExcelT
{
  public long EventContentId { get; set; }
  public long DreamMakerScheduleGroupId { get; set; }
  public long DisplayOrder { get; set; }
  public uint LocalizeEtcId { get; set; }
  public string IconPath { get; set; }
  public string LoadingResource01 { get; set; }
  public string LoadingResource02 { get; set; }
  public string AnimationName { get; set; }

  public MiniGameDreamScheduleExcelT() {
    this.EventContentId = 0;
    this.DreamMakerScheduleGroupId = 0;
    this.DisplayOrder = 0;
    this.LocalizeEtcId = 0;
    this.IconPath = null;
    this.LoadingResource01 = null;
    this.LoadingResource02 = null;
    this.AnimationName = null;
  }
}


static public class MiniGameDreamScheduleExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*DreamMakerScheduleGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*DisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*LocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*IconPath*/, false)
      && verifier.VerifyString(tablePos, 14 /*LoadingResource01*/, false)
      && verifier.VerifyString(tablePos, 16 /*LoadingResource02*/, false)
      && verifier.VerifyString(tablePos, 18 /*AnimationName*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
