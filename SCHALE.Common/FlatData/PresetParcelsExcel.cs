// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct PresetParcelsExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PresetParcelsExcel GetRootAsPresetParcelsExcel(ByteBuffer _bb) { return GetRootAsPresetParcelsExcel(_bb, new PresetParcelsExcel()); }
  public static PresetParcelsExcel GetRootAsPresetParcelsExcel(ByteBuffer _bb, PresetParcelsExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PresetParcelsExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SCHALE.Common.FlatData.ParcelType ParcelType { get { int o = __p.__offset(4); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.ParcelType.None; } }
  public long ParcelId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PresetGroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ParcelAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SCHALE.Common.FlatData.PresetParcelsExcel> CreatePresetParcelsExcel(FlatBufferBuilder builder,
      SCHALE.Common.FlatData.ParcelType ParcelType = SCHALE.Common.FlatData.ParcelType.None,
      long ParcelId = 0,
      long PresetGroupId = 0,
      long ParcelAmount = 0) {
    builder.StartTable(4);
    PresetParcelsExcel.AddParcelAmount(builder, ParcelAmount);
    PresetParcelsExcel.AddPresetGroupId(builder, PresetGroupId);
    PresetParcelsExcel.AddParcelId(builder, ParcelId);
    PresetParcelsExcel.AddParcelType(builder, ParcelType);
    return PresetParcelsExcel.EndPresetParcelsExcel(builder);
  }

  public static void StartPresetParcelsExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddParcelType(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType parcelType) { builder.AddInt(0, (int)parcelType, 0); }
  public static void AddParcelId(FlatBufferBuilder builder, long parcelId) { builder.AddLong(1, parcelId, 0); }
  public static void AddPresetGroupId(FlatBufferBuilder builder, long presetGroupId) { builder.AddLong(2, presetGroupId, 0); }
  public static void AddParcelAmount(FlatBufferBuilder builder, long parcelAmount) { builder.AddLong(3, parcelAmount, 0); }
  public static Offset<SCHALE.Common.FlatData.PresetParcelsExcel> EndPresetParcelsExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.PresetParcelsExcel>(o);
  }
  public PresetParcelsExcelT UnPack() {
    var _o = new PresetParcelsExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PresetParcelsExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("PresetParcels");
    _o.ParcelType = TableEncryptionService.Convert(this.ParcelType, key);
    _o.ParcelId = TableEncryptionService.Convert(this.ParcelId, key);
    _o.PresetGroupId = TableEncryptionService.Convert(this.PresetGroupId, key);
    _o.ParcelAmount = TableEncryptionService.Convert(this.ParcelAmount, key);
  }
  public static Offset<SCHALE.Common.FlatData.PresetParcelsExcel> Pack(FlatBufferBuilder builder, PresetParcelsExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.PresetParcelsExcel>);
    return CreatePresetParcelsExcel(
      builder,
      _o.ParcelType,
      _o.ParcelId,
      _o.PresetGroupId,
      _o.ParcelAmount);
  }
}

public class PresetParcelsExcelT
{
  public SCHALE.Common.FlatData.ParcelType ParcelType { get; set; }
  public long ParcelId { get; set; }
  public long PresetGroupId { get; set; }
  public long ParcelAmount { get; set; }

  public PresetParcelsExcelT() {
    this.ParcelType = SCHALE.Common.FlatData.ParcelType.None;
    this.ParcelId = 0;
    this.PresetGroupId = 0;
    this.ParcelAmount = 0;
  }
}


static public class PresetParcelsExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ParcelType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*PresetGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*ParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
