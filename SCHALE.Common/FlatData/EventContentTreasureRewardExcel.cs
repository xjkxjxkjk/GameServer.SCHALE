// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct EventContentTreasureRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EventContentTreasureRewardExcel GetRootAsEventContentTreasureRewardExcel(ByteBuffer _bb) { return GetRootAsEventContentTreasureRewardExcel(_bb, new EventContentTreasureRewardExcel()); }
  public static EventContentTreasureRewardExcel GetRootAsEventContentTreasureRewardExcel(ByteBuffer _bb, EventContentTreasureRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentTreasureRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string LocalizeCodeID { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeCodeIDBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetLocalizeCodeIDBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetLocalizeCodeIDArray() { return __p.__vector_as_array<byte>(6); }
  public int CellUnderImageWidth { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CellUnderImageHeight { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool HiddenImage { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public SCHALE.Common.FlatData.ParcelType RewardParcelType(int j) { int o = __p.__offset(14); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (SCHALE.Common.FlatData.ParcelType)0; }
  public int RewardParcelTypeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<SCHALE.Common.FlatData.ParcelType> GetRewardParcelTypeBytes() { return __p.__vector_as_span<SCHALE.Common.FlatData.ParcelType>(14, 4); }
#else
  public ArraySegment<byte>? GetRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public SCHALE.Common.FlatData.ParcelType[] GetRewardParcelTypeArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); SCHALE.Common.FlatData.ParcelType[] a = new SCHALE.Common.FlatData.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long RewardParcelId(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParcelIdLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParcelIdBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetRewardParcelIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetRewardParcelIdArray() { return __p.__vector_as_array<long>(16); }
  public long RewardParcelAmount(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParcelAmountLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParcelAmountBytes() { return __p.__vector_as_span<long>(18, 8); }
#else
  public ArraySegment<byte>? GetRewardParcelAmountBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public long[] GetRewardParcelAmountArray() { return __p.__vector_as_array<long>(18); }
  public string CellUnderImagePath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCellUnderImagePathBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetCellUnderImagePathBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetCellUnderImagePathArray() { return __p.__vector_as_array<byte>(20); }
  public string TreasureSmallImagePath { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTreasureSmallImagePathBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTreasureSmallImagePathBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTreasureSmallImagePathArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<SCHALE.Common.FlatData.EventContentTreasureRewardExcel> CreateEventContentTreasureRewardExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset LocalizeCodeIDOffset = default(StringOffset),
      int CellUnderImageWidth = 0,
      int CellUnderImageHeight = 0,
      bool HiddenImage = false,
      VectorOffset RewardParcelTypeOffset = default(VectorOffset),
      VectorOffset RewardParcelIdOffset = default(VectorOffset),
      VectorOffset RewardParcelAmountOffset = default(VectorOffset),
      StringOffset CellUnderImagePathOffset = default(StringOffset),
      StringOffset TreasureSmallImagePathOffset = default(StringOffset)) {
    builder.StartTable(10);
    EventContentTreasureRewardExcel.AddId(builder, Id);
    EventContentTreasureRewardExcel.AddTreasureSmallImagePath(builder, TreasureSmallImagePathOffset);
    EventContentTreasureRewardExcel.AddCellUnderImagePath(builder, CellUnderImagePathOffset);
    EventContentTreasureRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmountOffset);
    EventContentTreasureRewardExcel.AddRewardParcelId(builder, RewardParcelIdOffset);
    EventContentTreasureRewardExcel.AddRewardParcelType(builder, RewardParcelTypeOffset);
    EventContentTreasureRewardExcel.AddCellUnderImageHeight(builder, CellUnderImageHeight);
    EventContentTreasureRewardExcel.AddCellUnderImageWidth(builder, CellUnderImageWidth);
    EventContentTreasureRewardExcel.AddLocalizeCodeID(builder, LocalizeCodeIDOffset);
    EventContentTreasureRewardExcel.AddHiddenImage(builder, HiddenImage);
    return EventContentTreasureRewardExcel.EndEventContentTreasureRewardExcel(builder);
  }

  public static void StartEventContentTreasureRewardExcel(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddLocalizeCodeID(FlatBufferBuilder builder, StringOffset localizeCodeIDOffset) { builder.AddOffset(1, localizeCodeIDOffset.Value, 0); }
  public static void AddCellUnderImageWidth(FlatBufferBuilder builder, int cellUnderImageWidth) { builder.AddInt(2, cellUnderImageWidth, 0); }
  public static void AddCellUnderImageHeight(FlatBufferBuilder builder, int cellUnderImageHeight) { builder.AddInt(3, cellUnderImageHeight, 0); }
  public static void AddHiddenImage(FlatBufferBuilder builder, bool hiddenImage) { builder.AddBool(4, hiddenImage, false); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, VectorOffset rewardParcelTypeOffset) { builder.AddOffset(5, rewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelTypeVector(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<SCHALE.Common.FlatData.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<SCHALE.Common.FlatData.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, VectorOffset rewardParcelIdOffset) { builder.AddOffset(6, rewardParcelIdOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, VectorOffset rewardParcelAmountOffset) { builder.AddOffset(7, rewardParcelAmountOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddCellUnderImagePath(FlatBufferBuilder builder, StringOffset cellUnderImagePathOffset) { builder.AddOffset(8, cellUnderImagePathOffset.Value, 0); }
  public static void AddTreasureSmallImagePath(FlatBufferBuilder builder, StringOffset treasureSmallImagePathOffset) { builder.AddOffset(9, treasureSmallImagePathOffset.Value, 0); }
  public static Offset<SCHALE.Common.FlatData.EventContentTreasureRewardExcel> EndEventContentTreasureRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.EventContentTreasureRewardExcel>(o);
  }
  public EventContentTreasureRewardExcelT UnPack() {
    var _o = new EventContentTreasureRewardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentTreasureRewardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentTreasureReward");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.LocalizeCodeID = TableEncryptionService.Convert(this.LocalizeCodeID, key);
    _o.CellUnderImageWidth = TableEncryptionService.Convert(this.CellUnderImageWidth, key);
    _o.CellUnderImageHeight = TableEncryptionService.Convert(this.CellUnderImageHeight, key);
    _o.HiddenImage = TableEncryptionService.Convert(this.HiddenImage, key);
    _o.RewardParcelType = new List<SCHALE.Common.FlatData.ParcelType>();
    for (var _j = 0; _j < this.RewardParcelTypeLength; ++_j) {_o.RewardParcelType.Add(TableEncryptionService.Convert(this.RewardParcelType(_j), key));}
    _o.RewardParcelId = new List<long>();
    for (var _j = 0; _j < this.RewardParcelIdLength; ++_j) {_o.RewardParcelId.Add(TableEncryptionService.Convert(this.RewardParcelId(_j), key));}
    _o.RewardParcelAmount = new List<long>();
    for (var _j = 0; _j < this.RewardParcelAmountLength; ++_j) {_o.RewardParcelAmount.Add(TableEncryptionService.Convert(this.RewardParcelAmount(_j), key));}
    _o.CellUnderImagePath = TableEncryptionService.Convert(this.CellUnderImagePath, key);
    _o.TreasureSmallImagePath = TableEncryptionService.Convert(this.TreasureSmallImagePath, key);
  }
  public static Offset<SCHALE.Common.FlatData.EventContentTreasureRewardExcel> Pack(FlatBufferBuilder builder, EventContentTreasureRewardExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.EventContentTreasureRewardExcel>);
    var _LocalizeCodeID = _o.LocalizeCodeID == null ? default(StringOffset) : builder.CreateString(_o.LocalizeCodeID);
    var _RewardParcelType = default(VectorOffset);
    if (_o.RewardParcelType != null) {
      var __RewardParcelType = _o.RewardParcelType.ToArray();
      _RewardParcelType = CreateRewardParcelTypeVector(builder, __RewardParcelType);
    }
    var _RewardParcelId = default(VectorOffset);
    if (_o.RewardParcelId != null) {
      var __RewardParcelId = _o.RewardParcelId.ToArray();
      _RewardParcelId = CreateRewardParcelIdVector(builder, __RewardParcelId);
    }
    var _RewardParcelAmount = default(VectorOffset);
    if (_o.RewardParcelAmount != null) {
      var __RewardParcelAmount = _o.RewardParcelAmount.ToArray();
      _RewardParcelAmount = CreateRewardParcelAmountVector(builder, __RewardParcelAmount);
    }
    var _CellUnderImagePath = _o.CellUnderImagePath == null ? default(StringOffset) : builder.CreateString(_o.CellUnderImagePath);
    var _TreasureSmallImagePath = _o.TreasureSmallImagePath == null ? default(StringOffset) : builder.CreateString(_o.TreasureSmallImagePath);
    return CreateEventContentTreasureRewardExcel(
      builder,
      _o.Id,
      _LocalizeCodeID,
      _o.CellUnderImageWidth,
      _o.CellUnderImageHeight,
      _o.HiddenImage,
      _RewardParcelType,
      _RewardParcelId,
      _RewardParcelAmount,
      _CellUnderImagePath,
      _TreasureSmallImagePath);
  }
}

public class EventContentTreasureRewardExcelT
{
  public long Id { get; set; }
  public string LocalizeCodeID { get; set; }
  public int CellUnderImageWidth { get; set; }
  public int CellUnderImageHeight { get; set; }
  public bool HiddenImage { get; set; }
  public List<SCHALE.Common.FlatData.ParcelType> RewardParcelType { get; set; }
  public List<long> RewardParcelId { get; set; }
  public List<long> RewardParcelAmount { get; set; }
  public string CellUnderImagePath { get; set; }
  public string TreasureSmallImagePath { get; set; }

  public EventContentTreasureRewardExcelT() {
    this.Id = 0;
    this.LocalizeCodeID = null;
    this.CellUnderImageWidth = 0;
    this.CellUnderImageHeight = 0;
    this.HiddenImage = false;
    this.RewardParcelType = null;
    this.RewardParcelId = null;
    this.RewardParcelAmount = null;
    this.CellUnderImagePath = null;
    this.TreasureSmallImagePath = null;
  }
}


static public class EventContentTreasureRewardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*LocalizeCodeID*/, false)
      && verifier.VerifyField(tablePos, 8 /*CellUnderImageWidth*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*CellUnderImageHeight*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*HiddenImage*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*RewardParcelType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*RewardParcelId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*RewardParcelAmount*/, 8 /*long*/, false)
      && verifier.VerifyString(tablePos, 20 /*CellUnderImagePath*/, false)
      && verifier.VerifyString(tablePos, 22 /*TreasureSmallImagePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
