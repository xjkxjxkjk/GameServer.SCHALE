// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct RaidStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static RaidStageExcel GetRootAsRaidStageExcel(ByteBuffer _bb) { return GetRootAsRaidStageExcel(_bb, new RaidStageExcel()); }
  public static RaidStageExcel GetRootAsRaidStageExcel(ByteBuffer _bb, RaidStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RaidStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool UseBossIndex { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UseBossAIPhaseSync { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string RaidBossGroup { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRaidBossGroupBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetRaidBossGroupBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetRaidBossGroupArray() { return __p.__vector_as_array<byte>(10); }
  public string PortraitPath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPortraitPathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPortraitPathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPortraitPathArray() { return __p.__vector_as_array<byte>(12); }
  public string BGPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBGPathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetBGPathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetBGPathArray() { return __p.__vector_as_array<byte>(14); }
  public long RaidCharacterId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BossCharacterId(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BossCharacterIdLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBossCharacterIdBytes() { return __p.__vector_as_span<long>(18, 8); }
#else
  public ArraySegment<byte>? GetBossCharacterIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public long[] GetBossCharacterIdArray() { return __p.__vector_as_array<long>(18); }
  public SCHALE.Common.FlatData.Difficulty Difficulty { get { int o = __p.__offset(20); return o != 0 ? (SCHALE.Common.FlatData.Difficulty)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.Difficulty.Normal; } }
  public bool DifficultyOpenCondition { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long MaxPlayerCount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int RaidRoomLifeTime { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long BattleDuration { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroundId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string GroundDevName { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroundDevNameBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetGroundDevNameBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetGroundDevNameArray() { return __p.__vector_as_array<byte>(32); }
  public string EnterTimeLine { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnterTimeLineBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetEnterTimeLineBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetEnterTimeLineArray() { return __p.__vector_as_array<byte>(34); }
  public SCHALE.Common.FlatData.TacticEnvironment TacticEnvironment { get { int o = __p.__offset(36); return o != 0 ? (SCHALE.Common.FlatData.TacticEnvironment)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.TacticEnvironment.None; } }
  public long DefaultClearScore { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MaximumScore { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PerSecondMinusScore { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HPPercentScore { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MinimumAcquisitionScore { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MaximumAcquisitionScore { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RaidRewardGroupId { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string BattleReadyTimelinePath(int j) { int o = __p.__offset(52); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BattleReadyTimelinePathLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int BattleReadyTimelinePhaseStart(int j) { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BattleReadyTimelinePhaseStartLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBattleReadyTimelinePhaseStartBytes() { return __p.__vector_as_span<int>(54, 4); }
#else
  public ArraySegment<byte>? GetBattleReadyTimelinePhaseStartBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public int[] GetBattleReadyTimelinePhaseStartArray() { return __p.__vector_as_array<int>(54); }
  public int BattleReadyTimelinePhaseEnd(int j) { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BattleReadyTimelinePhaseEndLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBattleReadyTimelinePhaseEndBytes() { return __p.__vector_as_span<int>(56, 4); }
#else
  public ArraySegment<byte>? GetBattleReadyTimelinePhaseEndBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public int[] GetBattleReadyTimelinePhaseEndArray() { return __p.__vector_as_array<int>(56); }
  public string VictoryTimelinePath { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVictoryTimelinePathBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetVictoryTimelinePathBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetVictoryTimelinePathArray() { return __p.__vector_as_array<byte>(58); }
  public string PhaseChangeTimelinePath { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPhaseChangeTimelinePathBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetPhaseChangeTimelinePathBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetPhaseChangeTimelinePathArray() { return __p.__vector_as_array<byte>(60); }
  public long TimeLinePhase { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint EnterScenarioKey { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint ClearScenarioKey { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool ShowSkillCard { get { int o = __p.__offset(68); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint BossBGInfoKey { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public SCHALE.Common.FlatData.EchelonExtensionType EchelonExtensionType { get { int o = __p.__offset(72); return o != 0 ? (SCHALE.Common.FlatData.EchelonExtensionType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.EchelonExtensionType.Base; } }

  public static Offset<SCHALE.Common.FlatData.RaidStageExcel> CreateRaidStageExcel(FlatBufferBuilder builder,
      long Id = 0,
      bool UseBossIndex = false,
      bool UseBossAIPhaseSync = false,
      StringOffset RaidBossGroupOffset = default(StringOffset),
      StringOffset PortraitPathOffset = default(StringOffset),
      StringOffset BGPathOffset = default(StringOffset),
      long RaidCharacterId = 0,
      VectorOffset BossCharacterIdOffset = default(VectorOffset),
      SCHALE.Common.FlatData.Difficulty Difficulty = SCHALE.Common.FlatData.Difficulty.Normal,
      bool DifficultyOpenCondition = false,
      long MaxPlayerCount = 0,
      int RaidRoomLifeTime = 0,
      long BattleDuration = 0,
      long GroundId = 0,
      StringOffset GroundDevNameOffset = default(StringOffset),
      StringOffset EnterTimeLineOffset = default(StringOffset),
      SCHALE.Common.FlatData.TacticEnvironment TacticEnvironment = SCHALE.Common.FlatData.TacticEnvironment.None,
      long DefaultClearScore = 0,
      long MaximumScore = 0,
      long PerSecondMinusScore = 0,
      long HPPercentScore = 0,
      long MinimumAcquisitionScore = 0,
      long MaximumAcquisitionScore = 0,
      long RaidRewardGroupId = 0,
      VectorOffset BattleReadyTimelinePathOffset = default(VectorOffset),
      VectorOffset BattleReadyTimelinePhaseStartOffset = default(VectorOffset),
      VectorOffset BattleReadyTimelinePhaseEndOffset = default(VectorOffset),
      StringOffset VictoryTimelinePathOffset = default(StringOffset),
      StringOffset PhaseChangeTimelinePathOffset = default(StringOffset),
      long TimeLinePhase = 0,
      uint EnterScenarioKey = 0,
      uint ClearScenarioKey = 0,
      bool ShowSkillCard = false,
      uint BossBGInfoKey = 0,
      SCHALE.Common.FlatData.EchelonExtensionType EchelonExtensionType = SCHALE.Common.FlatData.EchelonExtensionType.Base) {
    builder.StartTable(35);
    RaidStageExcel.AddTimeLinePhase(builder, TimeLinePhase);
    RaidStageExcel.AddRaidRewardGroupId(builder, RaidRewardGroupId);
    RaidStageExcel.AddMaximumAcquisitionScore(builder, MaximumAcquisitionScore);
    RaidStageExcel.AddMinimumAcquisitionScore(builder, MinimumAcquisitionScore);
    RaidStageExcel.AddHPPercentScore(builder, HPPercentScore);
    RaidStageExcel.AddPerSecondMinusScore(builder, PerSecondMinusScore);
    RaidStageExcel.AddMaximumScore(builder, MaximumScore);
    RaidStageExcel.AddDefaultClearScore(builder, DefaultClearScore);
    RaidStageExcel.AddGroundId(builder, GroundId);
    RaidStageExcel.AddBattleDuration(builder, BattleDuration);
    RaidStageExcel.AddMaxPlayerCount(builder, MaxPlayerCount);
    RaidStageExcel.AddRaidCharacterId(builder, RaidCharacterId);
    RaidStageExcel.AddId(builder, Id);
    RaidStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType);
    RaidStageExcel.AddBossBGInfoKey(builder, BossBGInfoKey);
    RaidStageExcel.AddClearScenarioKey(builder, ClearScenarioKey);
    RaidStageExcel.AddEnterScenarioKey(builder, EnterScenarioKey);
    RaidStageExcel.AddPhaseChangeTimelinePath(builder, PhaseChangeTimelinePathOffset);
    RaidStageExcel.AddVictoryTimelinePath(builder, VictoryTimelinePathOffset);
    RaidStageExcel.AddBattleReadyTimelinePhaseEnd(builder, BattleReadyTimelinePhaseEndOffset);
    RaidStageExcel.AddBattleReadyTimelinePhaseStart(builder, BattleReadyTimelinePhaseStartOffset);
    RaidStageExcel.AddBattleReadyTimelinePath(builder, BattleReadyTimelinePathOffset);
    RaidStageExcel.AddTacticEnvironment(builder, TacticEnvironment);
    RaidStageExcel.AddEnterTimeLine(builder, EnterTimeLineOffset);
    RaidStageExcel.AddGroundDevName(builder, GroundDevNameOffset);
    RaidStageExcel.AddRaidRoomLifeTime(builder, RaidRoomLifeTime);
    RaidStageExcel.AddDifficulty(builder, Difficulty);
    RaidStageExcel.AddBossCharacterId(builder, BossCharacterIdOffset);
    RaidStageExcel.AddBGPath(builder, BGPathOffset);
    RaidStageExcel.AddPortraitPath(builder, PortraitPathOffset);
    RaidStageExcel.AddRaidBossGroup(builder, RaidBossGroupOffset);
    RaidStageExcel.AddShowSkillCard(builder, ShowSkillCard);
    RaidStageExcel.AddDifficultyOpenCondition(builder, DifficultyOpenCondition);
    RaidStageExcel.AddUseBossAIPhaseSync(builder, UseBossAIPhaseSync);
    RaidStageExcel.AddUseBossIndex(builder, UseBossIndex);
    return RaidStageExcel.EndRaidStageExcel(builder);
  }

  public static void StartRaidStageExcel(FlatBufferBuilder builder) { builder.StartTable(35); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddUseBossIndex(FlatBufferBuilder builder, bool useBossIndex) { builder.AddBool(1, useBossIndex, false); }
  public static void AddUseBossAIPhaseSync(FlatBufferBuilder builder, bool useBossAIPhaseSync) { builder.AddBool(2, useBossAIPhaseSync, false); }
  public static void AddRaidBossGroup(FlatBufferBuilder builder, StringOffset raidBossGroupOffset) { builder.AddOffset(3, raidBossGroupOffset.Value, 0); }
  public static void AddPortraitPath(FlatBufferBuilder builder, StringOffset portraitPathOffset) { builder.AddOffset(4, portraitPathOffset.Value, 0); }
  public static void AddBGPath(FlatBufferBuilder builder, StringOffset bGPathOffset) { builder.AddOffset(5, bGPathOffset.Value, 0); }
  public static void AddRaidCharacterId(FlatBufferBuilder builder, long raidCharacterId) { builder.AddLong(6, raidCharacterId, 0); }
  public static void AddBossCharacterId(FlatBufferBuilder builder, VectorOffset bossCharacterIdOffset) { builder.AddOffset(7, bossCharacterIdOffset.Value, 0); }
  public static VectorOffset CreateBossCharacterIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBossCharacterIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossCharacterIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossCharacterIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBossCharacterIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddDifficulty(FlatBufferBuilder builder, SCHALE.Common.FlatData.Difficulty difficulty) { builder.AddInt(8, (int)difficulty, 0); }
  public static void AddDifficultyOpenCondition(FlatBufferBuilder builder, bool difficultyOpenCondition) { builder.AddBool(9, difficultyOpenCondition, false); }
  public static void AddMaxPlayerCount(FlatBufferBuilder builder, long maxPlayerCount) { builder.AddLong(10, maxPlayerCount, 0); }
  public static void AddRaidRoomLifeTime(FlatBufferBuilder builder, int raidRoomLifeTime) { builder.AddInt(11, raidRoomLifeTime, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long battleDuration) { builder.AddLong(12, battleDuration, 0); }
  public static void AddGroundId(FlatBufferBuilder builder, long groundId) { builder.AddLong(13, groundId, 0); }
  public static void AddGroundDevName(FlatBufferBuilder builder, StringOffset groundDevNameOffset) { builder.AddOffset(14, groundDevNameOffset.Value, 0); }
  public static void AddEnterTimeLine(FlatBufferBuilder builder, StringOffset enterTimeLineOffset) { builder.AddOffset(15, enterTimeLineOffset.Value, 0); }
  public static void AddTacticEnvironment(FlatBufferBuilder builder, SCHALE.Common.FlatData.TacticEnvironment tacticEnvironment) { builder.AddInt(16, (int)tacticEnvironment, 0); }
  public static void AddDefaultClearScore(FlatBufferBuilder builder, long defaultClearScore) { builder.AddLong(17, defaultClearScore, 0); }
  public static void AddMaximumScore(FlatBufferBuilder builder, long maximumScore) { builder.AddLong(18, maximumScore, 0); }
  public static void AddPerSecondMinusScore(FlatBufferBuilder builder, long perSecondMinusScore) { builder.AddLong(19, perSecondMinusScore, 0); }
  public static void AddHPPercentScore(FlatBufferBuilder builder, long hPPercentScore) { builder.AddLong(20, hPPercentScore, 0); }
  public static void AddMinimumAcquisitionScore(FlatBufferBuilder builder, long minimumAcquisitionScore) { builder.AddLong(21, minimumAcquisitionScore, 0); }
  public static void AddMaximumAcquisitionScore(FlatBufferBuilder builder, long maximumAcquisitionScore) { builder.AddLong(22, maximumAcquisitionScore, 0); }
  public static void AddRaidRewardGroupId(FlatBufferBuilder builder, long raidRewardGroupId) { builder.AddLong(23, raidRewardGroupId, 0); }
  public static void AddBattleReadyTimelinePath(FlatBufferBuilder builder, VectorOffset battleReadyTimelinePathOffset) { builder.AddOffset(24, battleReadyTimelinePathOffset.Value, 0); }
  public static VectorOffset CreateBattleReadyTimelinePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBattleReadyTimelinePathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBattleReadyTimelinePhaseStart(FlatBufferBuilder builder, VectorOffset battleReadyTimelinePhaseStartOffset) { builder.AddOffset(25, battleReadyTimelinePhaseStartOffset.Value, 0); }
  public static VectorOffset CreateBattleReadyTimelinePhaseStartVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseStartVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseStartVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseStartVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBattleReadyTimelinePhaseStartVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBattleReadyTimelinePhaseEnd(FlatBufferBuilder builder, VectorOffset battleReadyTimelinePhaseEndOffset) { builder.AddOffset(26, battleReadyTimelinePhaseEndOffset.Value, 0); }
  public static VectorOffset CreateBattleReadyTimelinePhaseEndVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseEndVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseEndVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseEndVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBattleReadyTimelinePhaseEndVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVictoryTimelinePath(FlatBufferBuilder builder, StringOffset victoryTimelinePathOffset) { builder.AddOffset(27, victoryTimelinePathOffset.Value, 0); }
  public static void AddPhaseChangeTimelinePath(FlatBufferBuilder builder, StringOffset phaseChangeTimelinePathOffset) { builder.AddOffset(28, phaseChangeTimelinePathOffset.Value, 0); }
  public static void AddTimeLinePhase(FlatBufferBuilder builder, long timeLinePhase) { builder.AddLong(29, timeLinePhase, 0); }
  public static void AddEnterScenarioKey(FlatBufferBuilder builder, uint enterScenarioKey) { builder.AddUint(30, enterScenarioKey, 0); }
  public static void AddClearScenarioKey(FlatBufferBuilder builder, uint clearScenarioKey) { builder.AddUint(31, clearScenarioKey, 0); }
  public static void AddShowSkillCard(FlatBufferBuilder builder, bool showSkillCard) { builder.AddBool(32, showSkillCard, false); }
  public static void AddBossBGInfoKey(FlatBufferBuilder builder, uint bossBGInfoKey) { builder.AddUint(33, bossBGInfoKey, 0); }
  public static void AddEchelonExtensionType(FlatBufferBuilder builder, SCHALE.Common.FlatData.EchelonExtensionType echelonExtensionType) { builder.AddInt(34, (int)echelonExtensionType, 0); }
  public static Offset<SCHALE.Common.FlatData.RaidStageExcel> EndRaidStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.RaidStageExcel>(o);
  }
  public RaidStageExcelT UnPack() {
    var _o = new RaidStageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RaidStageExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("RaidStage");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.UseBossIndex = TableEncryptionService.Convert(this.UseBossIndex, key);
    _o.UseBossAIPhaseSync = TableEncryptionService.Convert(this.UseBossAIPhaseSync, key);
    _o.RaidBossGroup = TableEncryptionService.Convert(this.RaidBossGroup, key);
    _o.PortraitPath = TableEncryptionService.Convert(this.PortraitPath, key);
    _o.BGPath = TableEncryptionService.Convert(this.BGPath, key);
    _o.RaidCharacterId = TableEncryptionService.Convert(this.RaidCharacterId, key);
    _o.BossCharacterId = new List<long>();
    for (var _j = 0; _j < this.BossCharacterIdLength; ++_j) {_o.BossCharacterId.Add(TableEncryptionService.Convert(this.BossCharacterId(_j), key));}
    _o.Difficulty = TableEncryptionService.Convert(this.Difficulty, key);
    _o.DifficultyOpenCondition = TableEncryptionService.Convert(this.DifficultyOpenCondition, key);
    _o.MaxPlayerCount = TableEncryptionService.Convert(this.MaxPlayerCount, key);
    _o.RaidRoomLifeTime = TableEncryptionService.Convert(this.RaidRoomLifeTime, key);
    _o.BattleDuration = TableEncryptionService.Convert(this.BattleDuration, key);
    _o.GroundId = TableEncryptionService.Convert(this.GroundId, key);
    _o.GroundDevName = TableEncryptionService.Convert(this.GroundDevName, key);
    _o.EnterTimeLine = TableEncryptionService.Convert(this.EnterTimeLine, key);
    _o.TacticEnvironment = TableEncryptionService.Convert(this.TacticEnvironment, key);
    _o.DefaultClearScore = TableEncryptionService.Convert(this.DefaultClearScore, key);
    _o.MaximumScore = TableEncryptionService.Convert(this.MaximumScore, key);
    _o.PerSecondMinusScore = TableEncryptionService.Convert(this.PerSecondMinusScore, key);
    _o.HPPercentScore = TableEncryptionService.Convert(this.HPPercentScore, key);
    _o.MinimumAcquisitionScore = TableEncryptionService.Convert(this.MinimumAcquisitionScore, key);
    _o.MaximumAcquisitionScore = TableEncryptionService.Convert(this.MaximumAcquisitionScore, key);
    _o.RaidRewardGroupId = TableEncryptionService.Convert(this.RaidRewardGroupId, key);
    _o.BattleReadyTimelinePath = new List<string>();
    for (var _j = 0; _j < this.BattleReadyTimelinePathLength; ++_j) {_o.BattleReadyTimelinePath.Add(TableEncryptionService.Convert(this.BattleReadyTimelinePath(_j), key));}
    _o.BattleReadyTimelinePhaseStart = new List<int>();
    for (var _j = 0; _j < this.BattleReadyTimelinePhaseStartLength; ++_j) {_o.BattleReadyTimelinePhaseStart.Add(TableEncryptionService.Convert(this.BattleReadyTimelinePhaseStart(_j), key));}
    _o.BattleReadyTimelinePhaseEnd = new List<int>();
    for (var _j = 0; _j < this.BattleReadyTimelinePhaseEndLength; ++_j) {_o.BattleReadyTimelinePhaseEnd.Add(TableEncryptionService.Convert(this.BattleReadyTimelinePhaseEnd(_j), key));}
    _o.VictoryTimelinePath = TableEncryptionService.Convert(this.VictoryTimelinePath, key);
    _o.PhaseChangeTimelinePath = TableEncryptionService.Convert(this.PhaseChangeTimelinePath, key);
    _o.TimeLinePhase = TableEncryptionService.Convert(this.TimeLinePhase, key);
    _o.EnterScenarioKey = TableEncryptionService.Convert(this.EnterScenarioKey, key);
    _o.ClearScenarioKey = TableEncryptionService.Convert(this.ClearScenarioKey, key);
    _o.ShowSkillCard = TableEncryptionService.Convert(this.ShowSkillCard, key);
    _o.BossBGInfoKey = TableEncryptionService.Convert(this.BossBGInfoKey, key);
    _o.EchelonExtensionType = TableEncryptionService.Convert(this.EchelonExtensionType, key);
  }
  public static Offset<SCHALE.Common.FlatData.RaidStageExcel> Pack(FlatBufferBuilder builder, RaidStageExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.RaidStageExcel>);
    var _RaidBossGroup = _o.RaidBossGroup == null ? default(StringOffset) : builder.CreateString(_o.RaidBossGroup);
    var _PortraitPath = _o.PortraitPath == null ? default(StringOffset) : builder.CreateString(_o.PortraitPath);
    var _BGPath = _o.BGPath == null ? default(StringOffset) : builder.CreateString(_o.BGPath);
    var _BossCharacterId = default(VectorOffset);
    if (_o.BossCharacterId != null) {
      var __BossCharacterId = _o.BossCharacterId.ToArray();
      _BossCharacterId = CreateBossCharacterIdVector(builder, __BossCharacterId);
    }
    var _GroundDevName = _o.GroundDevName == null ? default(StringOffset) : builder.CreateString(_o.GroundDevName);
    var _EnterTimeLine = _o.EnterTimeLine == null ? default(StringOffset) : builder.CreateString(_o.EnterTimeLine);
    var _BattleReadyTimelinePath = default(VectorOffset);
    if (_o.BattleReadyTimelinePath != null) {
      var __BattleReadyTimelinePath = new StringOffset[_o.BattleReadyTimelinePath.Count];
      for (var _j = 0; _j < __BattleReadyTimelinePath.Length; ++_j) { __BattleReadyTimelinePath[_j] = builder.CreateString(_o.BattleReadyTimelinePath[_j]); }
      _BattleReadyTimelinePath = CreateBattleReadyTimelinePathVector(builder, __BattleReadyTimelinePath);
    }
    var _BattleReadyTimelinePhaseStart = default(VectorOffset);
    if (_o.BattleReadyTimelinePhaseStart != null) {
      var __BattleReadyTimelinePhaseStart = _o.BattleReadyTimelinePhaseStart.ToArray();
      _BattleReadyTimelinePhaseStart = CreateBattleReadyTimelinePhaseStartVector(builder, __BattleReadyTimelinePhaseStart);
    }
    var _BattleReadyTimelinePhaseEnd = default(VectorOffset);
    if (_o.BattleReadyTimelinePhaseEnd != null) {
      var __BattleReadyTimelinePhaseEnd = _o.BattleReadyTimelinePhaseEnd.ToArray();
      _BattleReadyTimelinePhaseEnd = CreateBattleReadyTimelinePhaseEndVector(builder, __BattleReadyTimelinePhaseEnd);
    }
    var _VictoryTimelinePath = _o.VictoryTimelinePath == null ? default(StringOffset) : builder.CreateString(_o.VictoryTimelinePath);
    var _PhaseChangeTimelinePath = _o.PhaseChangeTimelinePath == null ? default(StringOffset) : builder.CreateString(_o.PhaseChangeTimelinePath);
    return CreateRaidStageExcel(
      builder,
      _o.Id,
      _o.UseBossIndex,
      _o.UseBossAIPhaseSync,
      _RaidBossGroup,
      _PortraitPath,
      _BGPath,
      _o.RaidCharacterId,
      _BossCharacterId,
      _o.Difficulty,
      _o.DifficultyOpenCondition,
      _o.MaxPlayerCount,
      _o.RaidRoomLifeTime,
      _o.BattleDuration,
      _o.GroundId,
      _GroundDevName,
      _EnterTimeLine,
      _o.TacticEnvironment,
      _o.DefaultClearScore,
      _o.MaximumScore,
      _o.PerSecondMinusScore,
      _o.HPPercentScore,
      _o.MinimumAcquisitionScore,
      _o.MaximumAcquisitionScore,
      _o.RaidRewardGroupId,
      _BattleReadyTimelinePath,
      _BattleReadyTimelinePhaseStart,
      _BattleReadyTimelinePhaseEnd,
      _VictoryTimelinePath,
      _PhaseChangeTimelinePath,
      _o.TimeLinePhase,
      _o.EnterScenarioKey,
      _o.ClearScenarioKey,
      _o.ShowSkillCard,
      _o.BossBGInfoKey,
      _o.EchelonExtensionType);
  }
}

public class RaidStageExcelT
{
  public long Id { get; set; }
  public bool UseBossIndex { get; set; }
  public bool UseBossAIPhaseSync { get; set; }
  public string RaidBossGroup { get; set; }
  public string PortraitPath { get; set; }
  public string BGPath { get; set; }
  public long RaidCharacterId { get; set; }
  public List<long> BossCharacterId { get; set; }
  public SCHALE.Common.FlatData.Difficulty Difficulty { get; set; }
  public bool DifficultyOpenCondition { get; set; }
  public long MaxPlayerCount { get; set; }
  public int RaidRoomLifeTime { get; set; }
  public long BattleDuration { get; set; }
  public long GroundId { get; set; }
  public string GroundDevName { get; set; }
  public string EnterTimeLine { get; set; }
  public SCHALE.Common.FlatData.TacticEnvironment TacticEnvironment { get; set; }
  public long DefaultClearScore { get; set; }
  public long MaximumScore { get; set; }
  public long PerSecondMinusScore { get; set; }
  public long HPPercentScore { get; set; }
  public long MinimumAcquisitionScore { get; set; }
  public long MaximumAcquisitionScore { get; set; }
  public long RaidRewardGroupId { get; set; }
  public List<string> BattleReadyTimelinePath { get; set; }
  public List<int> BattleReadyTimelinePhaseStart { get; set; }
  public List<int> BattleReadyTimelinePhaseEnd { get; set; }
  public string VictoryTimelinePath { get; set; }
  public string PhaseChangeTimelinePath { get; set; }
  public long TimeLinePhase { get; set; }
  public uint EnterScenarioKey { get; set; }
  public uint ClearScenarioKey { get; set; }
  public bool ShowSkillCard { get; set; }
  public uint BossBGInfoKey { get; set; }
  public SCHALE.Common.FlatData.EchelonExtensionType EchelonExtensionType { get; set; }

  public RaidStageExcelT() {
    this.Id = 0;
    this.UseBossIndex = false;
    this.UseBossAIPhaseSync = false;
    this.RaidBossGroup = null;
    this.PortraitPath = null;
    this.BGPath = null;
    this.RaidCharacterId = 0;
    this.BossCharacterId = null;
    this.Difficulty = SCHALE.Common.FlatData.Difficulty.Normal;
    this.DifficultyOpenCondition = false;
    this.MaxPlayerCount = 0;
    this.RaidRoomLifeTime = 0;
    this.BattleDuration = 0;
    this.GroundId = 0;
    this.GroundDevName = null;
    this.EnterTimeLine = null;
    this.TacticEnvironment = SCHALE.Common.FlatData.TacticEnvironment.None;
    this.DefaultClearScore = 0;
    this.MaximumScore = 0;
    this.PerSecondMinusScore = 0;
    this.HPPercentScore = 0;
    this.MinimumAcquisitionScore = 0;
    this.MaximumAcquisitionScore = 0;
    this.RaidRewardGroupId = 0;
    this.BattleReadyTimelinePath = null;
    this.BattleReadyTimelinePhaseStart = null;
    this.BattleReadyTimelinePhaseEnd = null;
    this.VictoryTimelinePath = null;
    this.PhaseChangeTimelinePath = null;
    this.TimeLinePhase = 0;
    this.EnterScenarioKey = 0;
    this.ClearScenarioKey = 0;
    this.ShowSkillCard = false;
    this.BossBGInfoKey = 0;
    this.EchelonExtensionType = SCHALE.Common.FlatData.EchelonExtensionType.Base;
  }
}


static public class RaidStageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UseBossIndex*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*UseBossAIPhaseSync*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 10 /*RaidBossGroup*/, false)
      && verifier.VerifyString(tablePos, 12 /*PortraitPath*/, false)
      && verifier.VerifyString(tablePos, 14 /*BGPath*/, false)
      && verifier.VerifyField(tablePos, 16 /*RaidCharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*BossCharacterId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 20 /*Difficulty*/, 4 /*SCHALE.Common.FlatData.Difficulty*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*DifficultyOpenCondition*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*MaxPlayerCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*RaidRoomLifeTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*BattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*GroundId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 32 /*GroundDevName*/, false)
      && verifier.VerifyString(tablePos, 34 /*EnterTimeLine*/, false)
      && verifier.VerifyField(tablePos, 36 /*TacticEnvironment*/, 4 /*SCHALE.Common.FlatData.TacticEnvironment*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*DefaultClearScore*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*MaximumScore*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*PerSecondMinusScore*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*HPPercentScore*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*MinimumAcquisitionScore*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*MaximumAcquisitionScore*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*RaidRewardGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 52 /*BattleReadyTimelinePath*/, false)
      && verifier.VerifyVectorOfData(tablePos, 54 /*BattleReadyTimelinePhaseStart*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 56 /*BattleReadyTimelinePhaseEnd*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 58 /*VictoryTimelinePath*/, false)
      && verifier.VerifyString(tablePos, 60 /*PhaseChangeTimelinePath*/, false)
      && verifier.VerifyField(tablePos, 62 /*TimeLinePhase*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*EnterScenarioKey*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 66 /*ClearScenarioKey*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*ShowSkillCard*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 70 /*BossBGInfoKey*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*EchelonExtensionType*/, 4 /*SCHALE.Common.FlatData.EchelonExtensionType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
