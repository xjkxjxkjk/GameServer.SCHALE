// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct PresetCharacterGroupSettingExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PresetCharacterGroupSettingExcel GetRootAsPresetCharacterGroupSettingExcel(ByteBuffer _bb) { return GetRootAsPresetCharacterGroupSettingExcel(_bb, new PresetCharacterGroupSettingExcel()); }
  public static PresetCharacterGroupSettingExcel GetRootAsPresetCharacterGroupSettingExcel(ByteBuffer _bb, PresetCharacterGroupSettingExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PresetCharacterGroupSettingExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long CharacterId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool ArenaSimulatorFixed { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string PresetType(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PresetTypeLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SCHALE.Common.FlatData.PresetCharacterGroupSettingExcel> CreatePresetCharacterGroupSettingExcel(FlatBufferBuilder builder,
      long CharacterId = 0,
      bool ArenaSimulatorFixed = false,
      VectorOffset PresetTypeOffset = default(VectorOffset)) {
    builder.StartTable(3);
    PresetCharacterGroupSettingExcel.AddCharacterId(builder, CharacterId);
    PresetCharacterGroupSettingExcel.AddPresetType(builder, PresetTypeOffset);
    PresetCharacterGroupSettingExcel.AddArenaSimulatorFixed(builder, ArenaSimulatorFixed);
    return PresetCharacterGroupSettingExcel.EndPresetCharacterGroupSettingExcel(builder);
  }

  public static void StartPresetCharacterGroupSettingExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCharacterId(FlatBufferBuilder builder, long characterId) { builder.AddLong(0, characterId, 0); }
  public static void AddArenaSimulatorFixed(FlatBufferBuilder builder, bool arenaSimulatorFixed) { builder.AddBool(1, arenaSimulatorFixed, false); }
  public static void AddPresetType(FlatBufferBuilder builder, VectorOffset presetTypeOffset) { builder.AddOffset(2, presetTypeOffset.Value, 0); }
  public static VectorOffset CreatePresetTypeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePresetTypeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePresetTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePresetTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPresetTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SCHALE.Common.FlatData.PresetCharacterGroupSettingExcel> EndPresetCharacterGroupSettingExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.PresetCharacterGroupSettingExcel>(o);
  }
  public PresetCharacterGroupSettingExcelT UnPack() {
    var _o = new PresetCharacterGroupSettingExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PresetCharacterGroupSettingExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("PresetCharacterGroupSetting");
    _o.CharacterId = TableEncryptionService.Convert(this.CharacterId, key);
    _o.ArenaSimulatorFixed = TableEncryptionService.Convert(this.ArenaSimulatorFixed, key);
    _o.PresetType = new List<string>();
    for (var _j = 0; _j < this.PresetTypeLength; ++_j) {_o.PresetType.Add(TableEncryptionService.Convert(this.PresetType(_j), key));}
  }
  public static Offset<SCHALE.Common.FlatData.PresetCharacterGroupSettingExcel> Pack(FlatBufferBuilder builder, PresetCharacterGroupSettingExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.PresetCharacterGroupSettingExcel>);
    var _PresetType = default(VectorOffset);
    if (_o.PresetType != null) {
      var __PresetType = new StringOffset[_o.PresetType.Count];
      for (var _j = 0; _j < __PresetType.Length; ++_j) { __PresetType[_j] = builder.CreateString(_o.PresetType[_j]); }
      _PresetType = CreatePresetTypeVector(builder, __PresetType);
    }
    return CreatePresetCharacterGroupSettingExcel(
      builder,
      _o.CharacterId,
      _o.ArenaSimulatorFixed,
      _PresetType);
  }
}

public class PresetCharacterGroupSettingExcelT
{
  public long CharacterId { get; set; }
  public bool ArenaSimulatorFixed { get; set; }
  public List<string> PresetType { get; set; }

  public PresetCharacterGroupSettingExcelT() {
    this.CharacterId = 0;
    this.ArenaSimulatorFixed = false;
    this.PresetType = null;
  }
}


static public class PresetCharacterGroupSettingExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ArenaSimulatorFixed*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*PresetType*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
