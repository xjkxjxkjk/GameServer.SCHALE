// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct ConstMiniGameShootingExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ConstMiniGameShootingExcel GetRootAsConstMiniGameShootingExcel(ByteBuffer _bb) { return GetRootAsConstMiniGameShootingExcel(_bb, new ConstMiniGameShootingExcel()); }
  public static ConstMiniGameShootingExcel GetRootAsConstMiniGameShootingExcel(ByteBuffer _bb, ConstMiniGameShootingExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstMiniGameShootingExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long NormalStageId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int NormalSectionCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long HardStageId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int HardSectionCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long FreeStageId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int FreeSectionCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long PlayerCharacterId(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int PlayerCharacterIdLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetPlayerCharacterIdBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetPlayerCharacterIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetPlayerCharacterIdArray() { return __p.__vector_as_array<long>(16); }
  public long HiddenPlayerCharacterId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float CameraSmoothTime { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string SpawnEffectPath { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpawnEffectPathBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetSpawnEffectPathBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetSpawnEffectPathArray() { return __p.__vector_as_array<byte>(22); }
  public float WaitTimeAfterSpawn { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<SCHALE.Common.FlatData.ConstMiniGameShootingExcel> CreateConstMiniGameShootingExcel(FlatBufferBuilder builder,
      long NormalStageId = 0,
      int NormalSectionCount = 0,
      long HardStageId = 0,
      int HardSectionCount = 0,
      long FreeStageId = 0,
      int FreeSectionCount = 0,
      VectorOffset PlayerCharacterIdOffset = default(VectorOffset),
      long HiddenPlayerCharacterId = 0,
      float CameraSmoothTime = 0.0f,
      StringOffset SpawnEffectPathOffset = default(StringOffset),
      float WaitTimeAfterSpawn = 0.0f) {
    builder.StartTable(11);
    ConstMiniGameShootingExcel.AddHiddenPlayerCharacterId(builder, HiddenPlayerCharacterId);
    ConstMiniGameShootingExcel.AddFreeStageId(builder, FreeStageId);
    ConstMiniGameShootingExcel.AddHardStageId(builder, HardStageId);
    ConstMiniGameShootingExcel.AddNormalStageId(builder, NormalStageId);
    ConstMiniGameShootingExcel.AddWaitTimeAfterSpawn(builder, WaitTimeAfterSpawn);
    ConstMiniGameShootingExcel.AddSpawnEffectPath(builder, SpawnEffectPathOffset);
    ConstMiniGameShootingExcel.AddCameraSmoothTime(builder, CameraSmoothTime);
    ConstMiniGameShootingExcel.AddPlayerCharacterId(builder, PlayerCharacterIdOffset);
    ConstMiniGameShootingExcel.AddFreeSectionCount(builder, FreeSectionCount);
    ConstMiniGameShootingExcel.AddHardSectionCount(builder, HardSectionCount);
    ConstMiniGameShootingExcel.AddNormalSectionCount(builder, NormalSectionCount);
    return ConstMiniGameShootingExcel.EndConstMiniGameShootingExcel(builder);
  }

  public static void StartConstMiniGameShootingExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddNormalStageId(FlatBufferBuilder builder, long normalStageId) { builder.AddLong(0, normalStageId, 0); }
  public static void AddNormalSectionCount(FlatBufferBuilder builder, int normalSectionCount) { builder.AddInt(1, normalSectionCount, 0); }
  public static void AddHardStageId(FlatBufferBuilder builder, long hardStageId) { builder.AddLong(2, hardStageId, 0); }
  public static void AddHardSectionCount(FlatBufferBuilder builder, int hardSectionCount) { builder.AddInt(3, hardSectionCount, 0); }
  public static void AddFreeStageId(FlatBufferBuilder builder, long freeStageId) { builder.AddLong(4, freeStageId, 0); }
  public static void AddFreeSectionCount(FlatBufferBuilder builder, int freeSectionCount) { builder.AddInt(5, freeSectionCount, 0); }
  public static void AddPlayerCharacterId(FlatBufferBuilder builder, VectorOffset playerCharacterIdOffset) { builder.AddOffset(6, playerCharacterIdOffset.Value, 0); }
  public static VectorOffset CreatePlayerCharacterIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePlayerCharacterIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayerCharacterIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayerCharacterIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPlayerCharacterIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddHiddenPlayerCharacterId(FlatBufferBuilder builder, long hiddenPlayerCharacterId) { builder.AddLong(7, hiddenPlayerCharacterId, 0); }
  public static void AddCameraSmoothTime(FlatBufferBuilder builder, float cameraSmoothTime) { builder.AddFloat(8, cameraSmoothTime, 0.0f); }
  public static void AddSpawnEffectPath(FlatBufferBuilder builder, StringOffset spawnEffectPathOffset) { builder.AddOffset(9, spawnEffectPathOffset.Value, 0); }
  public static void AddWaitTimeAfterSpawn(FlatBufferBuilder builder, float waitTimeAfterSpawn) { builder.AddFloat(10, waitTimeAfterSpawn, 0.0f); }
  public static Offset<SCHALE.Common.FlatData.ConstMiniGameShootingExcel> EndConstMiniGameShootingExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.ConstMiniGameShootingExcel>(o);
  }
  public ConstMiniGameShootingExcelT UnPack() {
    var _o = new ConstMiniGameShootingExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConstMiniGameShootingExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ConstMiniGameShooting");
    _o.NormalStageId = TableEncryptionService.Convert(this.NormalStageId, key);
    _o.NormalSectionCount = TableEncryptionService.Convert(this.NormalSectionCount, key);
    _o.HardStageId = TableEncryptionService.Convert(this.HardStageId, key);
    _o.HardSectionCount = TableEncryptionService.Convert(this.HardSectionCount, key);
    _o.FreeStageId = TableEncryptionService.Convert(this.FreeStageId, key);
    _o.FreeSectionCount = TableEncryptionService.Convert(this.FreeSectionCount, key);
    _o.PlayerCharacterId = new List<long>();
    for (var _j = 0; _j < this.PlayerCharacterIdLength; ++_j) {_o.PlayerCharacterId.Add(TableEncryptionService.Convert(this.PlayerCharacterId(_j), key));}
    _o.HiddenPlayerCharacterId = TableEncryptionService.Convert(this.HiddenPlayerCharacterId, key);
    _o.CameraSmoothTime = TableEncryptionService.Convert(this.CameraSmoothTime, key);
    _o.SpawnEffectPath = TableEncryptionService.Convert(this.SpawnEffectPath, key);
    _o.WaitTimeAfterSpawn = TableEncryptionService.Convert(this.WaitTimeAfterSpawn, key);
  }
  public static Offset<SCHALE.Common.FlatData.ConstMiniGameShootingExcel> Pack(FlatBufferBuilder builder, ConstMiniGameShootingExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.ConstMiniGameShootingExcel>);
    var _PlayerCharacterId = default(VectorOffset);
    if (_o.PlayerCharacterId != null) {
      var __PlayerCharacterId = _o.PlayerCharacterId.ToArray();
      _PlayerCharacterId = CreatePlayerCharacterIdVector(builder, __PlayerCharacterId);
    }
    var _SpawnEffectPath = _o.SpawnEffectPath == null ? default(StringOffset) : builder.CreateString(_o.SpawnEffectPath);
    return CreateConstMiniGameShootingExcel(
      builder,
      _o.NormalStageId,
      _o.NormalSectionCount,
      _o.HardStageId,
      _o.HardSectionCount,
      _o.FreeStageId,
      _o.FreeSectionCount,
      _PlayerCharacterId,
      _o.HiddenPlayerCharacterId,
      _o.CameraSmoothTime,
      _SpawnEffectPath,
      _o.WaitTimeAfterSpawn);
  }
}

public class ConstMiniGameShootingExcelT
{
  public long NormalStageId { get; set; }
  public int NormalSectionCount { get; set; }
  public long HardStageId { get; set; }
  public int HardSectionCount { get; set; }
  public long FreeStageId { get; set; }
  public int FreeSectionCount { get; set; }
  public List<long> PlayerCharacterId { get; set; }
  public long HiddenPlayerCharacterId { get; set; }
  public float CameraSmoothTime { get; set; }
  public string SpawnEffectPath { get; set; }
  public float WaitTimeAfterSpawn { get; set; }

  public ConstMiniGameShootingExcelT() {
    this.NormalStageId = 0;
    this.NormalSectionCount = 0;
    this.HardStageId = 0;
    this.HardSectionCount = 0;
    this.FreeStageId = 0;
    this.FreeSectionCount = 0;
    this.PlayerCharacterId = null;
    this.HiddenPlayerCharacterId = 0;
    this.CameraSmoothTime = 0.0f;
    this.SpawnEffectPath = null;
    this.WaitTimeAfterSpawn = 0.0f;
  }
}


static public class ConstMiniGameShootingExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*NormalStageId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*NormalSectionCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*HardStageId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*HardSectionCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*FreeStageId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*FreeSectionCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*PlayerCharacterId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 18 /*HiddenPlayerCharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*CameraSmoothTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*SpawnEffectPath*/, false)
      && verifier.VerifyField(tablePos, 24 /*WaitTimeAfterSpawn*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
