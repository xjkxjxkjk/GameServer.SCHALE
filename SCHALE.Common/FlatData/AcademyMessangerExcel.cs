// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct AcademyMessangerExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AcademyMessangerExcel GetRootAsAcademyMessangerExcel(ByteBuffer _bb) { return GetRootAsAcademyMessangerExcel(_bb, new AcademyMessangerExcel()); }
  public static AcademyMessangerExcel GetRootAsAcademyMessangerExcel(ByteBuffer _bb, AcademyMessangerExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AcademyMessangerExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MessageGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.AcademyMessageConditions MessageCondition { get { int o = __p.__offset(10); return o != 0 ? (SCHALE.Common.FlatData.AcademyMessageConditions)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.AcademyMessageConditions.None; } }
  public long ConditionValue { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PreConditionGroupId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PreConditionFavorScheduleId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FavorScheduleId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long NextGroupId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FeedbackTimeMillisec { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.AcademyMessageTypes MessageType { get { int o = __p.__offset(24); return o != 0 ? (SCHALE.Common.FlatData.AcademyMessageTypes)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.AcademyMessageTypes.None; } }
  public string ImagePath { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImagePathBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetImagePathBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetImagePathArray() { return __p.__vector_as_array<byte>(26); }
  public string MessageKR { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMessageKRBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetMessageKRBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetMessageKRArray() { return __p.__vector_as_array<byte>(28); }
  public string MessageJP { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMessageJPBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetMessageJPBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetMessageJPArray() { return __p.__vector_as_array<byte>(30); }

  public static Offset<SCHALE.Common.FlatData.AcademyMessangerExcel> CreateAcademyMessangerExcel(FlatBufferBuilder builder,
      long MessageGroupId = 0,
      long Id = 0,
      long CharacterId = 0,
      SCHALE.Common.FlatData.AcademyMessageConditions MessageCondition = SCHALE.Common.FlatData.AcademyMessageConditions.None,
      long ConditionValue = 0,
      long PreConditionGroupId = 0,
      long PreConditionFavorScheduleId = 0,
      long FavorScheduleId = 0,
      long NextGroupId = 0,
      long FeedbackTimeMillisec = 0,
      SCHALE.Common.FlatData.AcademyMessageTypes MessageType = SCHALE.Common.FlatData.AcademyMessageTypes.None,
      StringOffset ImagePathOffset = default(StringOffset),
      StringOffset MessageKROffset = default(StringOffset),
      StringOffset MessageJPOffset = default(StringOffset)) {
    builder.StartTable(14);
    AcademyMessangerExcel.AddFeedbackTimeMillisec(builder, FeedbackTimeMillisec);
    AcademyMessangerExcel.AddNextGroupId(builder, NextGroupId);
    AcademyMessangerExcel.AddFavorScheduleId(builder, FavorScheduleId);
    AcademyMessangerExcel.AddPreConditionFavorScheduleId(builder, PreConditionFavorScheduleId);
    AcademyMessangerExcel.AddPreConditionGroupId(builder, PreConditionGroupId);
    AcademyMessangerExcel.AddConditionValue(builder, ConditionValue);
    AcademyMessangerExcel.AddCharacterId(builder, CharacterId);
    AcademyMessangerExcel.AddId(builder, Id);
    AcademyMessangerExcel.AddMessageGroupId(builder, MessageGroupId);
    AcademyMessangerExcel.AddMessageJP(builder, MessageJPOffset);
    AcademyMessangerExcel.AddMessageKR(builder, MessageKROffset);
    AcademyMessangerExcel.AddImagePath(builder, ImagePathOffset);
    AcademyMessangerExcel.AddMessageType(builder, MessageType);
    AcademyMessangerExcel.AddMessageCondition(builder, MessageCondition);
    return AcademyMessangerExcel.EndAcademyMessangerExcel(builder);
  }

  public static void StartAcademyMessangerExcel(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddMessageGroupId(FlatBufferBuilder builder, long messageGroupId) { builder.AddLong(0, messageGroupId, 0); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(1, id, 0); }
  public static void AddCharacterId(FlatBufferBuilder builder, long characterId) { builder.AddLong(2, characterId, 0); }
  public static void AddMessageCondition(FlatBufferBuilder builder, SCHALE.Common.FlatData.AcademyMessageConditions messageCondition) { builder.AddInt(3, (int)messageCondition, 0); }
  public static void AddConditionValue(FlatBufferBuilder builder, long conditionValue) { builder.AddLong(4, conditionValue, 0); }
  public static void AddPreConditionGroupId(FlatBufferBuilder builder, long preConditionGroupId) { builder.AddLong(5, preConditionGroupId, 0); }
  public static void AddPreConditionFavorScheduleId(FlatBufferBuilder builder, long preConditionFavorScheduleId) { builder.AddLong(6, preConditionFavorScheduleId, 0); }
  public static void AddFavorScheduleId(FlatBufferBuilder builder, long favorScheduleId) { builder.AddLong(7, favorScheduleId, 0); }
  public static void AddNextGroupId(FlatBufferBuilder builder, long nextGroupId) { builder.AddLong(8, nextGroupId, 0); }
  public static void AddFeedbackTimeMillisec(FlatBufferBuilder builder, long feedbackTimeMillisec) { builder.AddLong(9, feedbackTimeMillisec, 0); }
  public static void AddMessageType(FlatBufferBuilder builder, SCHALE.Common.FlatData.AcademyMessageTypes messageType) { builder.AddInt(10, (int)messageType, 0); }
  public static void AddImagePath(FlatBufferBuilder builder, StringOffset imagePathOffset) { builder.AddOffset(11, imagePathOffset.Value, 0); }
  public static void AddMessageKR(FlatBufferBuilder builder, StringOffset messageKROffset) { builder.AddOffset(12, messageKROffset.Value, 0); }
  public static void AddMessageJP(FlatBufferBuilder builder, StringOffset messageJPOffset) { builder.AddOffset(13, messageJPOffset.Value, 0); }
  public static Offset<SCHALE.Common.FlatData.AcademyMessangerExcel> EndAcademyMessangerExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.AcademyMessangerExcel>(o);
  }
  public AcademyMessangerExcelT UnPack() {
    var _o = new AcademyMessangerExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AcademyMessangerExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("AcademyMessanger");
    _o.MessageGroupId = TableEncryptionService.Convert(this.MessageGroupId, key);
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.CharacterId = TableEncryptionService.Convert(this.CharacterId, key);
    _o.MessageCondition = TableEncryptionService.Convert(this.MessageCondition, key);
    _o.ConditionValue = TableEncryptionService.Convert(this.ConditionValue, key);
    _o.PreConditionGroupId = TableEncryptionService.Convert(this.PreConditionGroupId, key);
    _o.PreConditionFavorScheduleId = TableEncryptionService.Convert(this.PreConditionFavorScheduleId, key);
    _o.FavorScheduleId = TableEncryptionService.Convert(this.FavorScheduleId, key);
    _o.NextGroupId = TableEncryptionService.Convert(this.NextGroupId, key);
    _o.FeedbackTimeMillisec = TableEncryptionService.Convert(this.FeedbackTimeMillisec, key);
    _o.MessageType = TableEncryptionService.Convert(this.MessageType, key);
    _o.ImagePath = TableEncryptionService.Convert(this.ImagePath, key);
    _o.MessageKR = TableEncryptionService.Convert(this.MessageKR, key);
    _o.MessageJP = TableEncryptionService.Convert(this.MessageJP, key);
  }
  public static Offset<SCHALE.Common.FlatData.AcademyMessangerExcel> Pack(FlatBufferBuilder builder, AcademyMessangerExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.AcademyMessangerExcel>);
    var _ImagePath = _o.ImagePath == null ? default(StringOffset) : builder.CreateString(_o.ImagePath);
    var _MessageKR = _o.MessageKR == null ? default(StringOffset) : builder.CreateString(_o.MessageKR);
    var _MessageJP = _o.MessageJP == null ? default(StringOffset) : builder.CreateString(_o.MessageJP);
    return CreateAcademyMessangerExcel(
      builder,
      _o.MessageGroupId,
      _o.Id,
      _o.CharacterId,
      _o.MessageCondition,
      _o.ConditionValue,
      _o.PreConditionGroupId,
      _o.PreConditionFavorScheduleId,
      _o.FavorScheduleId,
      _o.NextGroupId,
      _o.FeedbackTimeMillisec,
      _o.MessageType,
      _ImagePath,
      _MessageKR,
      _MessageJP);
  }
}

public class AcademyMessangerExcelT
{
  public long MessageGroupId { get; set; }
  public long Id { get; set; }
  public long CharacterId { get; set; }
  public SCHALE.Common.FlatData.AcademyMessageConditions MessageCondition { get; set; }
  public long ConditionValue { get; set; }
  public long PreConditionGroupId { get; set; }
  public long PreConditionFavorScheduleId { get; set; }
  public long FavorScheduleId { get; set; }
  public long NextGroupId { get; set; }
  public long FeedbackTimeMillisec { get; set; }
  public SCHALE.Common.FlatData.AcademyMessageTypes MessageType { get; set; }
  public string ImagePath { get; set; }
  public string MessageKR { get; set; }
  public string MessageJP { get; set; }

  public AcademyMessangerExcelT() {
    this.MessageGroupId = 0;
    this.Id = 0;
    this.CharacterId = 0;
    this.MessageCondition = SCHALE.Common.FlatData.AcademyMessageConditions.None;
    this.ConditionValue = 0;
    this.PreConditionGroupId = 0;
    this.PreConditionFavorScheduleId = 0;
    this.FavorScheduleId = 0;
    this.NextGroupId = 0;
    this.FeedbackTimeMillisec = 0;
    this.MessageType = SCHALE.Common.FlatData.AcademyMessageTypes.None;
    this.ImagePath = null;
    this.MessageKR = null;
    this.MessageJP = null;
  }
}


static public class AcademyMessangerExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MessageGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*CharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*MessageCondition*/, 4 /*SCHALE.Common.FlatData.AcademyMessageConditions*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ConditionValue*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*PreConditionGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*PreConditionFavorScheduleId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*FavorScheduleId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*NextGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*FeedbackTimeMillisec*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*MessageType*/, 4 /*SCHALE.Common.FlatData.AcademyMessageTypes*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*ImagePath*/, false)
      && verifier.VerifyString(tablePos, 28 /*MessageKR*/, false)
      && verifier.VerifyString(tablePos, 30 /*MessageJP*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
