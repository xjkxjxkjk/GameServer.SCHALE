// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct WorldRaidBossGroupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static WorldRaidBossGroupExcel GetRootAsWorldRaidBossGroupExcel(ByteBuffer _bb) { return GetRootAsWorldRaidBossGroupExcel(_bb, new WorldRaidBossGroupExcel()); }
  public static WorldRaidBossGroupExcel GetRootAsWorldRaidBossGroupExcel(ByteBuffer _bb, WorldRaidBossGroupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WorldRaidBossGroupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldRaidBossGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string WorldBossName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldBossNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetWorldBossNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetWorldBossNameArray() { return __p.__vector_as_array<byte>(8); }
  public string WorldBossPopupPortrait { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldBossPopupPortraitBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetWorldBossPopupPortraitBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetWorldBossPopupPortraitArray() { return __p.__vector_as_array<byte>(10); }
  public string WorldBossPopupBG { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldBossPopupBGBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetWorldBossPopupBGBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetWorldBossPopupBGArray() { return __p.__vector_as_array<byte>(12); }
  public string WorldBossParcelPortrait { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldBossParcelPortraitBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetWorldBossParcelPortraitBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetWorldBossParcelPortraitArray() { return __p.__vector_as_array<byte>(14); }
  public string WorldBossListParcel { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldBossListParcelBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetWorldBossListParcelBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetWorldBossListParcelArray() { return __p.__vector_as_array<byte>(16); }
  public long WorldBossHP { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool UIHideBeforeSpawn { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool HideAnotherBossKilled { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long WorldBossClearRewardGroupId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AnotherBossKilled(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int AnotherBossKilledLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetAnotherBossKilledBytes() { return __p.__vector_as_span<long>(26, 8); }
#else
  public ArraySegment<byte>? GetAnotherBossKilledBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public long[] GetAnotherBossKilledArray() { return __p.__vector_as_array<long>(26); }
  public long EchelonConstraintGroupId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ExclusiveOperatorBossSpawn { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExclusiveOperatorBossSpawnBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetExclusiveOperatorBossSpawnBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetExclusiveOperatorBossSpawnArray() { return __p.__vector_as_array<byte>(30); }
  public string ExclusiveOperatorBossKill { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExclusiveOperatorBossKillBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetExclusiveOperatorBossKillBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetExclusiveOperatorBossKillArray() { return __p.__vector_as_array<byte>(32); }
  public string ExclusiveOperatorScenarioBattle { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExclusiveOperatorScenarioBattleBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetExclusiveOperatorScenarioBattleBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetExclusiveOperatorScenarioBattleArray() { return __p.__vector_as_array<byte>(34); }
  public string ExclusiveOperatorBossDamaged { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExclusiveOperatorBossDamagedBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetExclusiveOperatorBossDamagedBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetExclusiveOperatorBossDamagedArray() { return __p.__vector_as_array<byte>(36); }
  public long BossGroupOpenCondition { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SCHALE.Common.FlatData.WorldRaidBossGroupExcel> CreateWorldRaidBossGroupExcel(FlatBufferBuilder builder,
      long Id = 0,
      long WorldRaidBossGroupId = 0,
      StringOffset WorldBossNameOffset = default(StringOffset),
      StringOffset WorldBossPopupPortraitOffset = default(StringOffset),
      StringOffset WorldBossPopupBGOffset = default(StringOffset),
      StringOffset WorldBossParcelPortraitOffset = default(StringOffset),
      StringOffset WorldBossListParcelOffset = default(StringOffset),
      long WorldBossHP = 0,
      bool UIHideBeforeSpawn = false,
      bool HideAnotherBossKilled = false,
      long WorldBossClearRewardGroupId = 0,
      VectorOffset AnotherBossKilledOffset = default(VectorOffset),
      long EchelonConstraintGroupId = 0,
      StringOffset ExclusiveOperatorBossSpawnOffset = default(StringOffset),
      StringOffset ExclusiveOperatorBossKillOffset = default(StringOffset),
      StringOffset ExclusiveOperatorScenarioBattleOffset = default(StringOffset),
      StringOffset ExclusiveOperatorBossDamagedOffset = default(StringOffset),
      long BossGroupOpenCondition = 0) {
    builder.StartTable(18);
    WorldRaidBossGroupExcel.AddBossGroupOpenCondition(builder, BossGroupOpenCondition);
    WorldRaidBossGroupExcel.AddEchelonConstraintGroupId(builder, EchelonConstraintGroupId);
    WorldRaidBossGroupExcel.AddWorldBossClearRewardGroupId(builder, WorldBossClearRewardGroupId);
    WorldRaidBossGroupExcel.AddWorldBossHP(builder, WorldBossHP);
    WorldRaidBossGroupExcel.AddWorldRaidBossGroupId(builder, WorldRaidBossGroupId);
    WorldRaidBossGroupExcel.AddId(builder, Id);
    WorldRaidBossGroupExcel.AddExclusiveOperatorBossDamaged(builder, ExclusiveOperatorBossDamagedOffset);
    WorldRaidBossGroupExcel.AddExclusiveOperatorScenarioBattle(builder, ExclusiveOperatorScenarioBattleOffset);
    WorldRaidBossGroupExcel.AddExclusiveOperatorBossKill(builder, ExclusiveOperatorBossKillOffset);
    WorldRaidBossGroupExcel.AddExclusiveOperatorBossSpawn(builder, ExclusiveOperatorBossSpawnOffset);
    WorldRaidBossGroupExcel.AddAnotherBossKilled(builder, AnotherBossKilledOffset);
    WorldRaidBossGroupExcel.AddWorldBossListParcel(builder, WorldBossListParcelOffset);
    WorldRaidBossGroupExcel.AddWorldBossParcelPortrait(builder, WorldBossParcelPortraitOffset);
    WorldRaidBossGroupExcel.AddWorldBossPopupBG(builder, WorldBossPopupBGOffset);
    WorldRaidBossGroupExcel.AddWorldBossPopupPortrait(builder, WorldBossPopupPortraitOffset);
    WorldRaidBossGroupExcel.AddWorldBossName(builder, WorldBossNameOffset);
    WorldRaidBossGroupExcel.AddHideAnotherBossKilled(builder, HideAnotherBossKilled);
    WorldRaidBossGroupExcel.AddUIHideBeforeSpawn(builder, UIHideBeforeSpawn);
    return WorldRaidBossGroupExcel.EndWorldRaidBossGroupExcel(builder);
  }

  public static void StartWorldRaidBossGroupExcel(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddWorldRaidBossGroupId(FlatBufferBuilder builder, long worldRaidBossGroupId) { builder.AddLong(1, worldRaidBossGroupId, 0); }
  public static void AddWorldBossName(FlatBufferBuilder builder, StringOffset worldBossNameOffset) { builder.AddOffset(2, worldBossNameOffset.Value, 0); }
  public static void AddWorldBossPopupPortrait(FlatBufferBuilder builder, StringOffset worldBossPopupPortraitOffset) { builder.AddOffset(3, worldBossPopupPortraitOffset.Value, 0); }
  public static void AddWorldBossPopupBG(FlatBufferBuilder builder, StringOffset worldBossPopupBGOffset) { builder.AddOffset(4, worldBossPopupBGOffset.Value, 0); }
  public static void AddWorldBossParcelPortrait(FlatBufferBuilder builder, StringOffset worldBossParcelPortraitOffset) { builder.AddOffset(5, worldBossParcelPortraitOffset.Value, 0); }
  public static void AddWorldBossListParcel(FlatBufferBuilder builder, StringOffset worldBossListParcelOffset) { builder.AddOffset(6, worldBossListParcelOffset.Value, 0); }
  public static void AddWorldBossHP(FlatBufferBuilder builder, long worldBossHP) { builder.AddLong(7, worldBossHP, 0); }
  public static void AddUIHideBeforeSpawn(FlatBufferBuilder builder, bool uIHideBeforeSpawn) { builder.AddBool(8, uIHideBeforeSpawn, false); }
  public static void AddHideAnotherBossKilled(FlatBufferBuilder builder, bool hideAnotherBossKilled) { builder.AddBool(9, hideAnotherBossKilled, false); }
  public static void AddWorldBossClearRewardGroupId(FlatBufferBuilder builder, long worldBossClearRewardGroupId) { builder.AddLong(10, worldBossClearRewardGroupId, 0); }
  public static void AddAnotherBossKilled(FlatBufferBuilder builder, VectorOffset anotherBossKilledOffset) { builder.AddOffset(11, anotherBossKilledOffset.Value, 0); }
  public static VectorOffset CreateAnotherBossKilledVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAnotherBossKilledVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAnotherBossKilledVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAnotherBossKilledVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAnotherBossKilledVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddEchelonConstraintGroupId(FlatBufferBuilder builder, long echelonConstraintGroupId) { builder.AddLong(12, echelonConstraintGroupId, 0); }
  public static void AddExclusiveOperatorBossSpawn(FlatBufferBuilder builder, StringOffset exclusiveOperatorBossSpawnOffset) { builder.AddOffset(13, exclusiveOperatorBossSpawnOffset.Value, 0); }
  public static void AddExclusiveOperatorBossKill(FlatBufferBuilder builder, StringOffset exclusiveOperatorBossKillOffset) { builder.AddOffset(14, exclusiveOperatorBossKillOffset.Value, 0); }
  public static void AddExclusiveOperatorScenarioBattle(FlatBufferBuilder builder, StringOffset exclusiveOperatorScenarioBattleOffset) { builder.AddOffset(15, exclusiveOperatorScenarioBattleOffset.Value, 0); }
  public static void AddExclusiveOperatorBossDamaged(FlatBufferBuilder builder, StringOffset exclusiveOperatorBossDamagedOffset) { builder.AddOffset(16, exclusiveOperatorBossDamagedOffset.Value, 0); }
  public static void AddBossGroupOpenCondition(FlatBufferBuilder builder, long bossGroupOpenCondition) { builder.AddLong(17, bossGroupOpenCondition, 0); }
  public static Offset<SCHALE.Common.FlatData.WorldRaidBossGroupExcel> EndWorldRaidBossGroupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.WorldRaidBossGroupExcel>(o);
  }
  public WorldRaidBossGroupExcelT UnPack() {
    var _o = new WorldRaidBossGroupExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WorldRaidBossGroupExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("WorldRaidBossGroup");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.WorldRaidBossGroupId = TableEncryptionService.Convert(this.WorldRaidBossGroupId, key);
    _o.WorldBossName = TableEncryptionService.Convert(this.WorldBossName, key);
    _o.WorldBossPopupPortrait = TableEncryptionService.Convert(this.WorldBossPopupPortrait, key);
    _o.WorldBossPopupBG = TableEncryptionService.Convert(this.WorldBossPopupBG, key);
    _o.WorldBossParcelPortrait = TableEncryptionService.Convert(this.WorldBossParcelPortrait, key);
    _o.WorldBossListParcel = TableEncryptionService.Convert(this.WorldBossListParcel, key);
    _o.WorldBossHP = TableEncryptionService.Convert(this.WorldBossHP, key);
    _o.UIHideBeforeSpawn = TableEncryptionService.Convert(this.UIHideBeforeSpawn, key);
    _o.HideAnotherBossKilled = TableEncryptionService.Convert(this.HideAnotherBossKilled, key);
    _o.WorldBossClearRewardGroupId = TableEncryptionService.Convert(this.WorldBossClearRewardGroupId, key);
    _o.AnotherBossKilled = new List<long>();
    for (var _j = 0; _j < this.AnotherBossKilledLength; ++_j) {_o.AnotherBossKilled.Add(TableEncryptionService.Convert(this.AnotherBossKilled(_j), key));}
    _o.EchelonConstraintGroupId = TableEncryptionService.Convert(this.EchelonConstraintGroupId, key);
    _o.ExclusiveOperatorBossSpawn = TableEncryptionService.Convert(this.ExclusiveOperatorBossSpawn, key);
    _o.ExclusiveOperatorBossKill = TableEncryptionService.Convert(this.ExclusiveOperatorBossKill, key);
    _o.ExclusiveOperatorScenarioBattle = TableEncryptionService.Convert(this.ExclusiveOperatorScenarioBattle, key);
    _o.ExclusiveOperatorBossDamaged = TableEncryptionService.Convert(this.ExclusiveOperatorBossDamaged, key);
    _o.BossGroupOpenCondition = TableEncryptionService.Convert(this.BossGroupOpenCondition, key);
  }
  public static Offset<SCHALE.Common.FlatData.WorldRaidBossGroupExcel> Pack(FlatBufferBuilder builder, WorldRaidBossGroupExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.WorldRaidBossGroupExcel>);
    var _WorldBossName = _o.WorldBossName == null ? default(StringOffset) : builder.CreateString(_o.WorldBossName);
    var _WorldBossPopupPortrait = _o.WorldBossPopupPortrait == null ? default(StringOffset) : builder.CreateString(_o.WorldBossPopupPortrait);
    var _WorldBossPopupBG = _o.WorldBossPopupBG == null ? default(StringOffset) : builder.CreateString(_o.WorldBossPopupBG);
    var _WorldBossParcelPortrait = _o.WorldBossParcelPortrait == null ? default(StringOffset) : builder.CreateString(_o.WorldBossParcelPortrait);
    var _WorldBossListParcel = _o.WorldBossListParcel == null ? default(StringOffset) : builder.CreateString(_o.WorldBossListParcel);
    var _AnotherBossKilled = default(VectorOffset);
    if (_o.AnotherBossKilled != null) {
      var __AnotherBossKilled = _o.AnotherBossKilled.ToArray();
      _AnotherBossKilled = CreateAnotherBossKilledVector(builder, __AnotherBossKilled);
    }
    var _ExclusiveOperatorBossSpawn = _o.ExclusiveOperatorBossSpawn == null ? default(StringOffset) : builder.CreateString(_o.ExclusiveOperatorBossSpawn);
    var _ExclusiveOperatorBossKill = _o.ExclusiveOperatorBossKill == null ? default(StringOffset) : builder.CreateString(_o.ExclusiveOperatorBossKill);
    var _ExclusiveOperatorScenarioBattle = _o.ExclusiveOperatorScenarioBattle == null ? default(StringOffset) : builder.CreateString(_o.ExclusiveOperatorScenarioBattle);
    var _ExclusiveOperatorBossDamaged = _o.ExclusiveOperatorBossDamaged == null ? default(StringOffset) : builder.CreateString(_o.ExclusiveOperatorBossDamaged);
    return CreateWorldRaidBossGroupExcel(
      builder,
      _o.Id,
      _o.WorldRaidBossGroupId,
      _WorldBossName,
      _WorldBossPopupPortrait,
      _WorldBossPopupBG,
      _WorldBossParcelPortrait,
      _WorldBossListParcel,
      _o.WorldBossHP,
      _o.UIHideBeforeSpawn,
      _o.HideAnotherBossKilled,
      _o.WorldBossClearRewardGroupId,
      _AnotherBossKilled,
      _o.EchelonConstraintGroupId,
      _ExclusiveOperatorBossSpawn,
      _ExclusiveOperatorBossKill,
      _ExclusiveOperatorScenarioBattle,
      _ExclusiveOperatorBossDamaged,
      _o.BossGroupOpenCondition);
  }
}

public class WorldRaidBossGroupExcelT
{
  public long Id { get; set; }
  public long WorldRaidBossGroupId { get; set; }
  public string WorldBossName { get; set; }
  public string WorldBossPopupPortrait { get; set; }
  public string WorldBossPopupBG { get; set; }
  public string WorldBossParcelPortrait { get; set; }
  public string WorldBossListParcel { get; set; }
  public long WorldBossHP { get; set; }
  public bool UIHideBeforeSpawn { get; set; }
  public bool HideAnotherBossKilled { get; set; }
  public long WorldBossClearRewardGroupId { get; set; }
  public List<long> AnotherBossKilled { get; set; }
  public long EchelonConstraintGroupId { get; set; }
  public string ExclusiveOperatorBossSpawn { get; set; }
  public string ExclusiveOperatorBossKill { get; set; }
  public string ExclusiveOperatorScenarioBattle { get; set; }
  public string ExclusiveOperatorBossDamaged { get; set; }
  public long BossGroupOpenCondition { get; set; }

  public WorldRaidBossGroupExcelT() {
    this.Id = 0;
    this.WorldRaidBossGroupId = 0;
    this.WorldBossName = null;
    this.WorldBossPopupPortrait = null;
    this.WorldBossPopupBG = null;
    this.WorldBossParcelPortrait = null;
    this.WorldBossListParcel = null;
    this.WorldBossHP = 0;
    this.UIHideBeforeSpawn = false;
    this.HideAnotherBossKilled = false;
    this.WorldBossClearRewardGroupId = 0;
    this.AnotherBossKilled = null;
    this.EchelonConstraintGroupId = 0;
    this.ExclusiveOperatorBossSpawn = null;
    this.ExclusiveOperatorBossKill = null;
    this.ExclusiveOperatorScenarioBattle = null;
    this.ExclusiveOperatorBossDamaged = null;
    this.BossGroupOpenCondition = 0;
  }
}


static public class WorldRaidBossGroupExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*WorldRaidBossGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*WorldBossName*/, false)
      && verifier.VerifyString(tablePos, 10 /*WorldBossPopupPortrait*/, false)
      && verifier.VerifyString(tablePos, 12 /*WorldBossPopupBG*/, false)
      && verifier.VerifyString(tablePos, 14 /*WorldBossParcelPortrait*/, false)
      && verifier.VerifyString(tablePos, 16 /*WorldBossListParcel*/, false)
      && verifier.VerifyField(tablePos, 18 /*WorldBossHP*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*UIHideBeforeSpawn*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*HideAnotherBossKilled*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*WorldBossClearRewardGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*AnotherBossKilled*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 28 /*EchelonConstraintGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 30 /*ExclusiveOperatorBossSpawn*/, false)
      && verifier.VerifyString(tablePos, 32 /*ExclusiveOperatorBossKill*/, false)
      && verifier.VerifyString(tablePos, 34 /*ExclusiveOperatorScenarioBattle*/, false)
      && verifier.VerifyString(tablePos, 36 /*ExclusiveOperatorBossDamaged*/, false)
      && verifier.VerifyField(tablePos, 38 /*BossGroupOpenCondition*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
