// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct PresetCharacterGroupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PresetCharacterGroupExcel GetRootAsPresetCharacterGroupExcel(ByteBuffer _bb) { return GetRootAsPresetCharacterGroupExcel(_bb, new PresetCharacterGroupExcel()); }
  public static PresetCharacterGroupExcel GetRootAsPresetCharacterGroupExcel(ByteBuffer _bb, PresetCharacterGroupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PresetCharacterGroupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PresetCharacterGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string GetPresetType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGetPresetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetGetPresetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetGetPresetTypeArray() { return __p.__vector_as_array<byte>(6); }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Exp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FavorExp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FavorRank { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StarGrade { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExSkillLevel { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PassiveSkillLevel { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExtraPassiveSkillLevel { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CommonSkillLevel { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LeaderSkillLevel { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EquipSlot01 { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int EquipSlotTier01 { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EquipSlotLevel01 { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EquipSlot02 { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int EquipSlotTier02 { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EquipSlotLevel02 { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EquipSlot03 { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int EquipSlotTier03 { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EquipSlotLevel03 { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EquipCharacterWeapon { get { int o = __p.__offset(46); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int EquipCharacterWeaponTier { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EquipCharacterWeaponLevel { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EquipCharacterGear { get { int o = __p.__offset(52); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int EquipCharacterGearTier { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EquipCharacterGearLevel { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public SCHALE.Common.FlatData.PotentialStatBonusRateType PotentialType01 { get { int o = __p.__offset(58); return o != 0 ? (SCHALE.Common.FlatData.PotentialStatBonusRateType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.PotentialStatBonusRateType.None; } }
  public int PotentialLevel01 { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public SCHALE.Common.FlatData.PotentialStatBonusRateType PotentialType02 { get { int o = __p.__offset(62); return o != 0 ? (SCHALE.Common.FlatData.PotentialStatBonusRateType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.PotentialStatBonusRateType.None; } }
  public int PotentialLevel02 { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public SCHALE.Common.FlatData.PotentialStatBonusRateType PotentialType03 { get { int o = __p.__offset(66); return o != 0 ? (SCHALE.Common.FlatData.PotentialStatBonusRateType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.PotentialStatBonusRateType.None; } }
  public int PotentialLevel03 { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SCHALE.Common.FlatData.PresetCharacterGroupExcel> CreatePresetCharacterGroupExcel(FlatBufferBuilder builder,
      long PresetCharacterGroupId = 0,
      StringOffset GetPresetTypeOffset = default(StringOffset),
      int Level = 0,
      int Exp = 0,
      int FavorExp = 0,
      int FavorRank = 0,
      int StarGrade = 0,
      int ExSkillLevel = 0,
      int PassiveSkillLevel = 0,
      int ExtraPassiveSkillLevel = 0,
      int CommonSkillLevel = 0,
      int LeaderSkillLevel = 0,
      bool EquipSlot01 = false,
      int EquipSlotTier01 = 0,
      int EquipSlotLevel01 = 0,
      bool EquipSlot02 = false,
      int EquipSlotTier02 = 0,
      int EquipSlotLevel02 = 0,
      bool EquipSlot03 = false,
      int EquipSlotTier03 = 0,
      int EquipSlotLevel03 = 0,
      bool EquipCharacterWeapon = false,
      int EquipCharacterWeaponTier = 0,
      int EquipCharacterWeaponLevel = 0,
      bool EquipCharacterGear = false,
      int EquipCharacterGearTier = 0,
      int EquipCharacterGearLevel = 0,
      SCHALE.Common.FlatData.PotentialStatBonusRateType PotentialType01 = SCHALE.Common.FlatData.PotentialStatBonusRateType.None,
      int PotentialLevel01 = 0,
      SCHALE.Common.FlatData.PotentialStatBonusRateType PotentialType02 = SCHALE.Common.FlatData.PotentialStatBonusRateType.None,
      int PotentialLevel02 = 0,
      SCHALE.Common.FlatData.PotentialStatBonusRateType PotentialType03 = SCHALE.Common.FlatData.PotentialStatBonusRateType.None,
      int PotentialLevel03 = 0) {
    builder.StartTable(33);
    PresetCharacterGroupExcel.AddPresetCharacterGroupId(builder, PresetCharacterGroupId);
    PresetCharacterGroupExcel.AddPotentialLevel03(builder, PotentialLevel03);
    PresetCharacterGroupExcel.AddPotentialType03(builder, PotentialType03);
    PresetCharacterGroupExcel.AddPotentialLevel02(builder, PotentialLevel02);
    PresetCharacterGroupExcel.AddPotentialType02(builder, PotentialType02);
    PresetCharacterGroupExcel.AddPotentialLevel01(builder, PotentialLevel01);
    PresetCharacterGroupExcel.AddPotentialType01(builder, PotentialType01);
    PresetCharacterGroupExcel.AddEquipCharacterGearLevel(builder, EquipCharacterGearLevel);
    PresetCharacterGroupExcel.AddEquipCharacterGearTier(builder, EquipCharacterGearTier);
    PresetCharacterGroupExcel.AddEquipCharacterWeaponLevel(builder, EquipCharacterWeaponLevel);
    PresetCharacterGroupExcel.AddEquipCharacterWeaponTier(builder, EquipCharacterWeaponTier);
    PresetCharacterGroupExcel.AddEquipSlotLevel03(builder, EquipSlotLevel03);
    PresetCharacterGroupExcel.AddEquipSlotTier03(builder, EquipSlotTier03);
    PresetCharacterGroupExcel.AddEquipSlotLevel02(builder, EquipSlotLevel02);
    PresetCharacterGroupExcel.AddEquipSlotTier02(builder, EquipSlotTier02);
    PresetCharacterGroupExcel.AddEquipSlotLevel01(builder, EquipSlotLevel01);
    PresetCharacterGroupExcel.AddEquipSlotTier01(builder, EquipSlotTier01);
    PresetCharacterGroupExcel.AddLeaderSkillLevel(builder, LeaderSkillLevel);
    PresetCharacterGroupExcel.AddCommonSkillLevel(builder, CommonSkillLevel);
    PresetCharacterGroupExcel.AddExtraPassiveSkillLevel(builder, ExtraPassiveSkillLevel);
    PresetCharacterGroupExcel.AddPassiveSkillLevel(builder, PassiveSkillLevel);
    PresetCharacterGroupExcel.AddExSkillLevel(builder, ExSkillLevel);
    PresetCharacterGroupExcel.AddStarGrade(builder, StarGrade);
    PresetCharacterGroupExcel.AddFavorRank(builder, FavorRank);
    PresetCharacterGroupExcel.AddFavorExp(builder, FavorExp);
    PresetCharacterGroupExcel.AddExp(builder, Exp);
    PresetCharacterGroupExcel.AddLevel(builder, Level);
    PresetCharacterGroupExcel.AddGetPresetType(builder, GetPresetTypeOffset);
    PresetCharacterGroupExcel.AddEquipCharacterGear(builder, EquipCharacterGear);
    PresetCharacterGroupExcel.AddEquipCharacterWeapon(builder, EquipCharacterWeapon);
    PresetCharacterGroupExcel.AddEquipSlot03(builder, EquipSlot03);
    PresetCharacterGroupExcel.AddEquipSlot02(builder, EquipSlot02);
    PresetCharacterGroupExcel.AddEquipSlot01(builder, EquipSlot01);
    return PresetCharacterGroupExcel.EndPresetCharacterGroupExcel(builder);
  }

  public static void StartPresetCharacterGroupExcel(FlatBufferBuilder builder) { builder.StartTable(33); }
  public static void AddPresetCharacterGroupId(FlatBufferBuilder builder, long presetCharacterGroupId) { builder.AddLong(0, presetCharacterGroupId, 0); }
  public static void AddGetPresetType(FlatBufferBuilder builder, StringOffset getPresetTypeOffset) { builder.AddOffset(1, getPresetTypeOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(2, level, 0); }
  public static void AddExp(FlatBufferBuilder builder, int exp) { builder.AddInt(3, exp, 0); }
  public static void AddFavorExp(FlatBufferBuilder builder, int favorExp) { builder.AddInt(4, favorExp, 0); }
  public static void AddFavorRank(FlatBufferBuilder builder, int favorRank) { builder.AddInt(5, favorRank, 0); }
  public static void AddStarGrade(FlatBufferBuilder builder, int starGrade) { builder.AddInt(6, starGrade, 0); }
  public static void AddExSkillLevel(FlatBufferBuilder builder, int exSkillLevel) { builder.AddInt(7, exSkillLevel, 0); }
  public static void AddPassiveSkillLevel(FlatBufferBuilder builder, int passiveSkillLevel) { builder.AddInt(8, passiveSkillLevel, 0); }
  public static void AddExtraPassiveSkillLevel(FlatBufferBuilder builder, int extraPassiveSkillLevel) { builder.AddInt(9, extraPassiveSkillLevel, 0); }
  public static void AddCommonSkillLevel(FlatBufferBuilder builder, int commonSkillLevel) { builder.AddInt(10, commonSkillLevel, 0); }
  public static void AddLeaderSkillLevel(FlatBufferBuilder builder, int leaderSkillLevel) { builder.AddInt(11, leaderSkillLevel, 0); }
  public static void AddEquipSlot01(FlatBufferBuilder builder, bool equipSlot01) { builder.AddBool(12, equipSlot01, false); }
  public static void AddEquipSlotTier01(FlatBufferBuilder builder, int equipSlotTier01) { builder.AddInt(13, equipSlotTier01, 0); }
  public static void AddEquipSlotLevel01(FlatBufferBuilder builder, int equipSlotLevel01) { builder.AddInt(14, equipSlotLevel01, 0); }
  public static void AddEquipSlot02(FlatBufferBuilder builder, bool equipSlot02) { builder.AddBool(15, equipSlot02, false); }
  public static void AddEquipSlotTier02(FlatBufferBuilder builder, int equipSlotTier02) { builder.AddInt(16, equipSlotTier02, 0); }
  public static void AddEquipSlotLevel02(FlatBufferBuilder builder, int equipSlotLevel02) { builder.AddInt(17, equipSlotLevel02, 0); }
  public static void AddEquipSlot03(FlatBufferBuilder builder, bool equipSlot03) { builder.AddBool(18, equipSlot03, false); }
  public static void AddEquipSlotTier03(FlatBufferBuilder builder, int equipSlotTier03) { builder.AddInt(19, equipSlotTier03, 0); }
  public static void AddEquipSlotLevel03(FlatBufferBuilder builder, int equipSlotLevel03) { builder.AddInt(20, equipSlotLevel03, 0); }
  public static void AddEquipCharacterWeapon(FlatBufferBuilder builder, bool equipCharacterWeapon) { builder.AddBool(21, equipCharacterWeapon, false); }
  public static void AddEquipCharacterWeaponTier(FlatBufferBuilder builder, int equipCharacterWeaponTier) { builder.AddInt(22, equipCharacterWeaponTier, 0); }
  public static void AddEquipCharacterWeaponLevel(FlatBufferBuilder builder, int equipCharacterWeaponLevel) { builder.AddInt(23, equipCharacterWeaponLevel, 0); }
  public static void AddEquipCharacterGear(FlatBufferBuilder builder, bool equipCharacterGear) { builder.AddBool(24, equipCharacterGear, false); }
  public static void AddEquipCharacterGearTier(FlatBufferBuilder builder, int equipCharacterGearTier) { builder.AddInt(25, equipCharacterGearTier, 0); }
  public static void AddEquipCharacterGearLevel(FlatBufferBuilder builder, int equipCharacterGearLevel) { builder.AddInt(26, equipCharacterGearLevel, 0); }
  public static void AddPotentialType01(FlatBufferBuilder builder, SCHALE.Common.FlatData.PotentialStatBonusRateType potentialType01) { builder.AddInt(27, (int)potentialType01, 0); }
  public static void AddPotentialLevel01(FlatBufferBuilder builder, int potentialLevel01) { builder.AddInt(28, potentialLevel01, 0); }
  public static void AddPotentialType02(FlatBufferBuilder builder, SCHALE.Common.FlatData.PotentialStatBonusRateType potentialType02) { builder.AddInt(29, (int)potentialType02, 0); }
  public static void AddPotentialLevel02(FlatBufferBuilder builder, int potentialLevel02) { builder.AddInt(30, potentialLevel02, 0); }
  public static void AddPotentialType03(FlatBufferBuilder builder, SCHALE.Common.FlatData.PotentialStatBonusRateType potentialType03) { builder.AddInt(31, (int)potentialType03, 0); }
  public static void AddPotentialLevel03(FlatBufferBuilder builder, int potentialLevel03) { builder.AddInt(32, potentialLevel03, 0); }
  public static Offset<SCHALE.Common.FlatData.PresetCharacterGroupExcel> EndPresetCharacterGroupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.PresetCharacterGroupExcel>(o);
  }
  public PresetCharacterGroupExcelT UnPack() {
    var _o = new PresetCharacterGroupExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PresetCharacterGroupExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("PresetCharacterGroup");
    _o.PresetCharacterGroupId = TableEncryptionService.Convert(this.PresetCharacterGroupId, key);
    _o.GetPresetType = TableEncryptionService.Convert(this.GetPresetType, key);
    _o.Level = TableEncryptionService.Convert(this.Level, key);
    _o.Exp = TableEncryptionService.Convert(this.Exp, key);
    _o.FavorExp = TableEncryptionService.Convert(this.FavorExp, key);
    _o.FavorRank = TableEncryptionService.Convert(this.FavorRank, key);
    _o.StarGrade = TableEncryptionService.Convert(this.StarGrade, key);
    _o.ExSkillLevel = TableEncryptionService.Convert(this.ExSkillLevel, key);
    _o.PassiveSkillLevel = TableEncryptionService.Convert(this.PassiveSkillLevel, key);
    _o.ExtraPassiveSkillLevel = TableEncryptionService.Convert(this.ExtraPassiveSkillLevel, key);
    _o.CommonSkillLevel = TableEncryptionService.Convert(this.CommonSkillLevel, key);
    _o.LeaderSkillLevel = TableEncryptionService.Convert(this.LeaderSkillLevel, key);
    _o.EquipSlot01 = TableEncryptionService.Convert(this.EquipSlot01, key);
    _o.EquipSlotTier01 = TableEncryptionService.Convert(this.EquipSlotTier01, key);
    _o.EquipSlotLevel01 = TableEncryptionService.Convert(this.EquipSlotLevel01, key);
    _o.EquipSlot02 = TableEncryptionService.Convert(this.EquipSlot02, key);
    _o.EquipSlotTier02 = TableEncryptionService.Convert(this.EquipSlotTier02, key);
    _o.EquipSlotLevel02 = TableEncryptionService.Convert(this.EquipSlotLevel02, key);
    _o.EquipSlot03 = TableEncryptionService.Convert(this.EquipSlot03, key);
    _o.EquipSlotTier03 = TableEncryptionService.Convert(this.EquipSlotTier03, key);
    _o.EquipSlotLevel03 = TableEncryptionService.Convert(this.EquipSlotLevel03, key);
    _o.EquipCharacterWeapon = TableEncryptionService.Convert(this.EquipCharacterWeapon, key);
    _o.EquipCharacterWeaponTier = TableEncryptionService.Convert(this.EquipCharacterWeaponTier, key);
    _o.EquipCharacterWeaponLevel = TableEncryptionService.Convert(this.EquipCharacterWeaponLevel, key);
    _o.EquipCharacterGear = TableEncryptionService.Convert(this.EquipCharacterGear, key);
    _o.EquipCharacterGearTier = TableEncryptionService.Convert(this.EquipCharacterGearTier, key);
    _o.EquipCharacterGearLevel = TableEncryptionService.Convert(this.EquipCharacterGearLevel, key);
    _o.PotentialType01 = TableEncryptionService.Convert(this.PotentialType01, key);
    _o.PotentialLevel01 = TableEncryptionService.Convert(this.PotentialLevel01, key);
    _o.PotentialType02 = TableEncryptionService.Convert(this.PotentialType02, key);
    _o.PotentialLevel02 = TableEncryptionService.Convert(this.PotentialLevel02, key);
    _o.PotentialType03 = TableEncryptionService.Convert(this.PotentialType03, key);
    _o.PotentialLevel03 = TableEncryptionService.Convert(this.PotentialLevel03, key);
  }
  public static Offset<SCHALE.Common.FlatData.PresetCharacterGroupExcel> Pack(FlatBufferBuilder builder, PresetCharacterGroupExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.PresetCharacterGroupExcel>);
    var _GetPresetType = _o.GetPresetType == null ? default(StringOffset) : builder.CreateString(_o.GetPresetType);
    return CreatePresetCharacterGroupExcel(
      builder,
      _o.PresetCharacterGroupId,
      _GetPresetType,
      _o.Level,
      _o.Exp,
      _o.FavorExp,
      _o.FavorRank,
      _o.StarGrade,
      _o.ExSkillLevel,
      _o.PassiveSkillLevel,
      _o.ExtraPassiveSkillLevel,
      _o.CommonSkillLevel,
      _o.LeaderSkillLevel,
      _o.EquipSlot01,
      _o.EquipSlotTier01,
      _o.EquipSlotLevel01,
      _o.EquipSlot02,
      _o.EquipSlotTier02,
      _o.EquipSlotLevel02,
      _o.EquipSlot03,
      _o.EquipSlotTier03,
      _o.EquipSlotLevel03,
      _o.EquipCharacterWeapon,
      _o.EquipCharacterWeaponTier,
      _o.EquipCharacterWeaponLevel,
      _o.EquipCharacterGear,
      _o.EquipCharacterGearTier,
      _o.EquipCharacterGearLevel,
      _o.PotentialType01,
      _o.PotentialLevel01,
      _o.PotentialType02,
      _o.PotentialLevel02,
      _o.PotentialType03,
      _o.PotentialLevel03);
  }
}

public class PresetCharacterGroupExcelT
{
  public long PresetCharacterGroupId { get; set; }
  public string GetPresetType { get; set; }
  public int Level { get; set; }
  public int Exp { get; set; }
  public int FavorExp { get; set; }
  public int FavorRank { get; set; }
  public int StarGrade { get; set; }
  public int ExSkillLevel { get; set; }
  public int PassiveSkillLevel { get; set; }
  public int ExtraPassiveSkillLevel { get; set; }
  public int CommonSkillLevel { get; set; }
  public int LeaderSkillLevel { get; set; }
  public bool EquipSlot01 { get; set; }
  public int EquipSlotTier01 { get; set; }
  public int EquipSlotLevel01 { get; set; }
  public bool EquipSlot02 { get; set; }
  public int EquipSlotTier02 { get; set; }
  public int EquipSlotLevel02 { get; set; }
  public bool EquipSlot03 { get; set; }
  public int EquipSlotTier03 { get; set; }
  public int EquipSlotLevel03 { get; set; }
  public bool EquipCharacterWeapon { get; set; }
  public int EquipCharacterWeaponTier { get; set; }
  public int EquipCharacterWeaponLevel { get; set; }
  public bool EquipCharacterGear { get; set; }
  public int EquipCharacterGearTier { get; set; }
  public int EquipCharacterGearLevel { get; set; }
  public SCHALE.Common.FlatData.PotentialStatBonusRateType PotentialType01 { get; set; }
  public int PotentialLevel01 { get; set; }
  public SCHALE.Common.FlatData.PotentialStatBonusRateType PotentialType02 { get; set; }
  public int PotentialLevel02 { get; set; }
  public SCHALE.Common.FlatData.PotentialStatBonusRateType PotentialType03 { get; set; }
  public int PotentialLevel03 { get; set; }

  public PresetCharacterGroupExcelT() {
    this.PresetCharacterGroupId = 0;
    this.GetPresetType = null;
    this.Level = 0;
    this.Exp = 0;
    this.FavorExp = 0;
    this.FavorRank = 0;
    this.StarGrade = 0;
    this.ExSkillLevel = 0;
    this.PassiveSkillLevel = 0;
    this.ExtraPassiveSkillLevel = 0;
    this.CommonSkillLevel = 0;
    this.LeaderSkillLevel = 0;
    this.EquipSlot01 = false;
    this.EquipSlotTier01 = 0;
    this.EquipSlotLevel01 = 0;
    this.EquipSlot02 = false;
    this.EquipSlotTier02 = 0;
    this.EquipSlotLevel02 = 0;
    this.EquipSlot03 = false;
    this.EquipSlotTier03 = 0;
    this.EquipSlotLevel03 = 0;
    this.EquipCharacterWeapon = false;
    this.EquipCharacterWeaponTier = 0;
    this.EquipCharacterWeaponLevel = 0;
    this.EquipCharacterGear = false;
    this.EquipCharacterGearTier = 0;
    this.EquipCharacterGearLevel = 0;
    this.PotentialType01 = SCHALE.Common.FlatData.PotentialStatBonusRateType.None;
    this.PotentialLevel01 = 0;
    this.PotentialType02 = SCHALE.Common.FlatData.PotentialStatBonusRateType.None;
    this.PotentialLevel02 = 0;
    this.PotentialType03 = SCHALE.Common.FlatData.PotentialStatBonusRateType.None;
    this.PotentialLevel03 = 0;
  }
}


static public class PresetCharacterGroupExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PresetCharacterGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*GetPresetType*/, false)
      && verifier.VerifyField(tablePos, 8 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Exp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*FavorExp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*FavorRank*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*StarGrade*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*ExSkillLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*PassiveSkillLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*ExtraPassiveSkillLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*CommonSkillLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*LeaderSkillLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*EquipSlot01*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 30 /*EquipSlotTier01*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*EquipSlotLevel01*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*EquipSlot02*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 36 /*EquipSlotTier02*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*EquipSlotLevel02*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*EquipSlot03*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 42 /*EquipSlotTier03*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*EquipSlotLevel03*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*EquipCharacterWeapon*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 48 /*EquipCharacterWeaponTier*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*EquipCharacterWeaponLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*EquipCharacterGear*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 54 /*EquipCharacterGearTier*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*EquipCharacterGearLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*PotentialType01*/, 4 /*SCHALE.Common.FlatData.PotentialStatBonusRateType*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*PotentialLevel01*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*PotentialType02*/, 4 /*SCHALE.Common.FlatData.PotentialStatBonusRateType*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*PotentialLevel02*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 66 /*PotentialType03*/, 4 /*SCHALE.Common.FlatData.PotentialStatBonusRateType*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*PotentialLevel03*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
