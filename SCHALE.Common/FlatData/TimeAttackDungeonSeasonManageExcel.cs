// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct TimeAttackDungeonSeasonManageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static TimeAttackDungeonSeasonManageExcel GetRootAsTimeAttackDungeonSeasonManageExcel(ByteBuffer _bb) { return GetRootAsTimeAttackDungeonSeasonManageExcel(_bb, new TimeAttackDungeonSeasonManageExcel()); }
  public static TimeAttackDungeonSeasonManageExcel GetRootAsTimeAttackDungeonSeasonManageExcel(ByteBuffer _bb, TimeAttackDungeonSeasonManageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TimeAttackDungeonSeasonManageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string StartDate { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartDateBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetStartDateBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetStartDateArray() { return __p.__vector_as_array<byte>(6); }
  public string EndDate { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndDateBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetEndDateBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetEndDateArray() { return __p.__vector_as_array<byte>(8); }
  public long UISlot { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DungeonId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DifficultyGeas(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int DifficultyGeasLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetDifficultyGeasBytes() { return __p.__vector_as_span<long>(14, 8); }
#else
  public ArraySegment<byte>? GetDifficultyGeasBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public long[] GetDifficultyGeasArray() { return __p.__vector_as_array<long>(14); }
  public long TimeAttackDungeonRewardId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RoomLifeTimeInSeconds { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SCHALE.Common.FlatData.TimeAttackDungeonSeasonManageExcel> CreateTimeAttackDungeonSeasonManageExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset StartDateOffset = default(StringOffset),
      StringOffset EndDateOffset = default(StringOffset),
      long UISlot = 0,
      long DungeonId = 0,
      VectorOffset DifficultyGeasOffset = default(VectorOffset),
      long TimeAttackDungeonRewardId = 0,
      long RoomLifeTimeInSeconds = 0) {
    builder.StartTable(8);
    TimeAttackDungeonSeasonManageExcel.AddRoomLifeTimeInSeconds(builder, RoomLifeTimeInSeconds);
    TimeAttackDungeonSeasonManageExcel.AddTimeAttackDungeonRewardId(builder, TimeAttackDungeonRewardId);
    TimeAttackDungeonSeasonManageExcel.AddDungeonId(builder, DungeonId);
    TimeAttackDungeonSeasonManageExcel.AddUISlot(builder, UISlot);
    TimeAttackDungeonSeasonManageExcel.AddId(builder, Id);
    TimeAttackDungeonSeasonManageExcel.AddDifficultyGeas(builder, DifficultyGeasOffset);
    TimeAttackDungeonSeasonManageExcel.AddEndDate(builder, EndDateOffset);
    TimeAttackDungeonSeasonManageExcel.AddStartDate(builder, StartDateOffset);
    return TimeAttackDungeonSeasonManageExcel.EndTimeAttackDungeonSeasonManageExcel(builder);
  }

  public static void StartTimeAttackDungeonSeasonManageExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddStartDate(FlatBufferBuilder builder, StringOffset startDateOffset) { builder.AddOffset(1, startDateOffset.Value, 0); }
  public static void AddEndDate(FlatBufferBuilder builder, StringOffset endDateOffset) { builder.AddOffset(2, endDateOffset.Value, 0); }
  public static void AddUISlot(FlatBufferBuilder builder, long uISlot) { builder.AddLong(3, uISlot, 0); }
  public static void AddDungeonId(FlatBufferBuilder builder, long dungeonId) { builder.AddLong(4, dungeonId, 0); }
  public static void AddDifficultyGeas(FlatBufferBuilder builder, VectorOffset difficultyGeasOffset) { builder.AddOffset(5, difficultyGeasOffset.Value, 0); }
  public static VectorOffset CreateDifficultyGeasVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyGeasVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyGeasVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyGeasVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDifficultyGeasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddTimeAttackDungeonRewardId(FlatBufferBuilder builder, long timeAttackDungeonRewardId) { builder.AddLong(6, timeAttackDungeonRewardId, 0); }
  public static void AddRoomLifeTimeInSeconds(FlatBufferBuilder builder, long roomLifeTimeInSeconds) { builder.AddLong(7, roomLifeTimeInSeconds, 0); }
  public static Offset<SCHALE.Common.FlatData.TimeAttackDungeonSeasonManageExcel> EndTimeAttackDungeonSeasonManageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.TimeAttackDungeonSeasonManageExcel>(o);
  }
  public TimeAttackDungeonSeasonManageExcelT UnPack() {
    var _o = new TimeAttackDungeonSeasonManageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TimeAttackDungeonSeasonManageExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("TimeAttackDungeonSeasonManage");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.StartDate = TableEncryptionService.Convert(this.StartDate, key);
    _o.EndDate = TableEncryptionService.Convert(this.EndDate, key);
    _o.UISlot = TableEncryptionService.Convert(this.UISlot, key);
    _o.DungeonId = TableEncryptionService.Convert(this.DungeonId, key);
    _o.DifficultyGeas = new List<long>();
    for (var _j = 0; _j < this.DifficultyGeasLength; ++_j) {_o.DifficultyGeas.Add(TableEncryptionService.Convert(this.DifficultyGeas(_j), key));}
    _o.TimeAttackDungeonRewardId = TableEncryptionService.Convert(this.TimeAttackDungeonRewardId, key);
    _o.RoomLifeTimeInSeconds = TableEncryptionService.Convert(this.RoomLifeTimeInSeconds, key);
  }
  public static Offset<SCHALE.Common.FlatData.TimeAttackDungeonSeasonManageExcel> Pack(FlatBufferBuilder builder, TimeAttackDungeonSeasonManageExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.TimeAttackDungeonSeasonManageExcel>);
    var _StartDate = _o.StartDate == null ? default(StringOffset) : builder.CreateString(_o.StartDate);
    var _EndDate = _o.EndDate == null ? default(StringOffset) : builder.CreateString(_o.EndDate);
    var _DifficultyGeas = default(VectorOffset);
    if (_o.DifficultyGeas != null) {
      var __DifficultyGeas = _o.DifficultyGeas.ToArray();
      _DifficultyGeas = CreateDifficultyGeasVector(builder, __DifficultyGeas);
    }
    return CreateTimeAttackDungeonSeasonManageExcel(
      builder,
      _o.Id,
      _StartDate,
      _EndDate,
      _o.UISlot,
      _o.DungeonId,
      _DifficultyGeas,
      _o.TimeAttackDungeonRewardId,
      _o.RoomLifeTimeInSeconds);
  }
}

public class TimeAttackDungeonSeasonManageExcelT
{
  public long Id { get; set; }
  public string StartDate { get; set; }
  public string EndDate { get; set; }
  public long UISlot { get; set; }
  public long DungeonId { get; set; }
  public List<long> DifficultyGeas { get; set; }
  public long TimeAttackDungeonRewardId { get; set; }
  public long RoomLifeTimeInSeconds { get; set; }

  public TimeAttackDungeonSeasonManageExcelT() {
    this.Id = 0;
    this.StartDate = null;
    this.EndDate = null;
    this.UISlot = 0;
    this.DungeonId = 0;
    this.DifficultyGeas = null;
    this.TimeAttackDungeonRewardId = 0;
    this.RoomLifeTimeInSeconds = 0;
  }
}


static public class TimeAttackDungeonSeasonManageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*StartDate*/, false)
      && verifier.VerifyString(tablePos, 8 /*EndDate*/, false)
      && verifier.VerifyField(tablePos, 10 /*UISlot*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*DungeonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*DifficultyGeas*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 16 /*TimeAttackDungeonRewardId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*RoomLifeTimeInSeconds*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
