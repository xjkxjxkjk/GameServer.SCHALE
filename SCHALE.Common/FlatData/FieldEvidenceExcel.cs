// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct FieldEvidenceExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static FieldEvidenceExcel GetRootAsFieldEvidenceExcel(ByteBuffer _bb) { return GetRootAsFieldEvidenceExcel(_bb, new FieldEvidenceExcel()); }
  public static FieldEvidenceExcel GetRootAsFieldEvidenceExcel(ByteBuffer _bb, FieldEvidenceExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldEvidenceExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string NameLocalizeKey { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameLocalizeKeyBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameLocalizeKeyBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameLocalizeKeyArray() { return __p.__vector_as_array<byte>(6); }
  public string DescriptionLocalizeKey { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionLocalizeKeyBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescriptionLocalizeKeyBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescriptionLocalizeKeyArray() { return __p.__vector_as_array<byte>(8); }
  public string DetailLocalizeKey { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDetailLocalizeKeyBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDetailLocalizeKeyBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDetailLocalizeKeyArray() { return __p.__vector_as_array<byte>(10); }
  public string ImagePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImagePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetImagePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetImagePathArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<SCHALE.Common.FlatData.FieldEvidenceExcel> CreateFieldEvidenceExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      StringOffset NameLocalizeKeyOffset = default(StringOffset),
      StringOffset DescriptionLocalizeKeyOffset = default(StringOffset),
      StringOffset DetailLocalizeKeyOffset = default(StringOffset),
      StringOffset ImagePathOffset = default(StringOffset)) {
    builder.StartTable(5);
    FieldEvidenceExcel.AddUniqueId(builder, UniqueId);
    FieldEvidenceExcel.AddImagePath(builder, ImagePathOffset);
    FieldEvidenceExcel.AddDetailLocalizeKey(builder, DetailLocalizeKeyOffset);
    FieldEvidenceExcel.AddDescriptionLocalizeKey(builder, DescriptionLocalizeKeyOffset);
    FieldEvidenceExcel.AddNameLocalizeKey(builder, NameLocalizeKeyOffset);
    return FieldEvidenceExcel.EndFieldEvidenceExcel(builder);
  }

  public static void StartFieldEvidenceExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(0, uniqueId, 0); }
  public static void AddNameLocalizeKey(FlatBufferBuilder builder, StringOffset nameLocalizeKeyOffset) { builder.AddOffset(1, nameLocalizeKeyOffset.Value, 0); }
  public static void AddDescriptionLocalizeKey(FlatBufferBuilder builder, StringOffset descriptionLocalizeKeyOffset) { builder.AddOffset(2, descriptionLocalizeKeyOffset.Value, 0); }
  public static void AddDetailLocalizeKey(FlatBufferBuilder builder, StringOffset detailLocalizeKeyOffset) { builder.AddOffset(3, detailLocalizeKeyOffset.Value, 0); }
  public static void AddImagePath(FlatBufferBuilder builder, StringOffset imagePathOffset) { builder.AddOffset(4, imagePathOffset.Value, 0); }
  public static Offset<SCHALE.Common.FlatData.FieldEvidenceExcel> EndFieldEvidenceExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.FieldEvidenceExcel>(o);
  }
  public FieldEvidenceExcelT UnPack() {
    var _o = new FieldEvidenceExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FieldEvidenceExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("FieldEvidence");
    _o.UniqueId = TableEncryptionService.Convert(this.UniqueId, key);
    _o.NameLocalizeKey = TableEncryptionService.Convert(this.NameLocalizeKey, key);
    _o.DescriptionLocalizeKey = TableEncryptionService.Convert(this.DescriptionLocalizeKey, key);
    _o.DetailLocalizeKey = TableEncryptionService.Convert(this.DetailLocalizeKey, key);
    _o.ImagePath = TableEncryptionService.Convert(this.ImagePath, key);
  }
  public static Offset<SCHALE.Common.FlatData.FieldEvidenceExcel> Pack(FlatBufferBuilder builder, FieldEvidenceExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.FieldEvidenceExcel>);
    var _NameLocalizeKey = _o.NameLocalizeKey == null ? default(StringOffset) : builder.CreateString(_o.NameLocalizeKey);
    var _DescriptionLocalizeKey = _o.DescriptionLocalizeKey == null ? default(StringOffset) : builder.CreateString(_o.DescriptionLocalizeKey);
    var _DetailLocalizeKey = _o.DetailLocalizeKey == null ? default(StringOffset) : builder.CreateString(_o.DetailLocalizeKey);
    var _ImagePath = _o.ImagePath == null ? default(StringOffset) : builder.CreateString(_o.ImagePath);
    return CreateFieldEvidenceExcel(
      builder,
      _o.UniqueId,
      _NameLocalizeKey,
      _DescriptionLocalizeKey,
      _DetailLocalizeKey,
      _ImagePath);
  }
}

public class FieldEvidenceExcelT
{
  public long UniqueId { get; set; }
  public string NameLocalizeKey { get; set; }
  public string DescriptionLocalizeKey { get; set; }
  public string DetailLocalizeKey { get; set; }
  public string ImagePath { get; set; }

  public FieldEvidenceExcelT() {
    this.UniqueId = 0;
    this.NameLocalizeKey = null;
    this.DescriptionLocalizeKey = null;
    this.DetailLocalizeKey = null;
    this.ImagePath = null;
  }
}


static public class FieldEvidenceExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*NameLocalizeKey*/, false)
      && verifier.VerifyString(tablePos, 8 /*DescriptionLocalizeKey*/, false)
      && verifier.VerifyString(tablePos, 10 /*DetailLocalizeKey*/, false)
      && verifier.VerifyString(tablePos, 12 /*ImagePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
