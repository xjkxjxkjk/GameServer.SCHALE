// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct GachaCraftOpenTagExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GachaCraftOpenTagExcel GetRootAsGachaCraftOpenTagExcel(ByteBuffer _bb) { return GetRootAsGachaCraftOpenTagExcel(_bb, new GachaCraftOpenTagExcel()); }
  public static GachaCraftOpenTagExcel GetRootAsGachaCraftOpenTagExcel(ByteBuffer _bb, GachaCraftOpenTagExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaCraftOpenTagExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SCHALE.Common.FlatData.CraftNodeTier NodeTier { get { int o = __p.__offset(4); return o != 0 ? (SCHALE.Common.FlatData.CraftNodeTier)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.CraftNodeTier.Base; } }
  public SCHALE.Common.FlatData.Tag Tag_(int j) { int o = __p.__offset(6); return o != 0 ? (SCHALE.Common.FlatData.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (SCHALE.Common.FlatData.Tag)0; }
  public int Tag_Length { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<SCHALE.Common.FlatData.Tag> GetTag_Bytes() { return __p.__vector_as_span<SCHALE.Common.FlatData.Tag>(6, 4); }
#else
  public ArraySegment<byte>? GetTag_Bytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public SCHALE.Common.FlatData.Tag[] GetTag_Array() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); SCHALE.Common.FlatData.Tag[] a = new SCHALE.Common.FlatData.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (SCHALE.Common.FlatData.Tag)__p.bb.GetInt(p + i * 4); } return a; }

  public static Offset<SCHALE.Common.FlatData.GachaCraftOpenTagExcel> CreateGachaCraftOpenTagExcel(FlatBufferBuilder builder,
      SCHALE.Common.FlatData.CraftNodeTier NodeTier = SCHALE.Common.FlatData.CraftNodeTier.Base,
      VectorOffset Tag_Offset = default(VectorOffset)) {
    builder.StartTable(2);
    GachaCraftOpenTagExcel.AddTag_(builder, Tag_Offset);
    GachaCraftOpenTagExcel.AddNodeTier(builder, NodeTier);
    return GachaCraftOpenTagExcel.EndGachaCraftOpenTagExcel(builder);
  }

  public static void StartGachaCraftOpenTagExcel(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddNodeTier(FlatBufferBuilder builder, SCHALE.Common.FlatData.CraftNodeTier nodeTier) { builder.AddInt(0, (int)nodeTier, 0); }
  public static void AddTag_(FlatBufferBuilder builder, VectorOffset tag_Offset) { builder.AddOffset(1, tag_Offset.Value, 0); }
  public static VectorOffset CreateTag_Vector(FlatBufferBuilder builder, SCHALE.Common.FlatData.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTag_VectorBlock(FlatBufferBuilder builder, SCHALE.Common.FlatData.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTag_VectorBlock(FlatBufferBuilder builder, ArraySegment<SCHALE.Common.FlatData.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTag_VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<SCHALE.Common.FlatData.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTag_Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SCHALE.Common.FlatData.GachaCraftOpenTagExcel> EndGachaCraftOpenTagExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.GachaCraftOpenTagExcel>(o);
  }
  public GachaCraftOpenTagExcelT UnPack() {
    var _o = new GachaCraftOpenTagExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GachaCraftOpenTagExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("GachaCraftOpenTag");
    _o.NodeTier = TableEncryptionService.Convert(this.NodeTier, key);
    _o.Tag_ = new List<SCHALE.Common.FlatData.Tag>();
    for (var _j = 0; _j < this.Tag_Length; ++_j) {_o.Tag_.Add(TableEncryptionService.Convert(this.Tag_(_j), key));}
  }
  public static Offset<SCHALE.Common.FlatData.GachaCraftOpenTagExcel> Pack(FlatBufferBuilder builder, GachaCraftOpenTagExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.GachaCraftOpenTagExcel>);
    var _Tag_ = default(VectorOffset);
    if (_o.Tag_ != null) {
      var __Tag_ = _o.Tag_.ToArray();
      _Tag_ = CreateTag_Vector(builder, __Tag_);
    }
    return CreateGachaCraftOpenTagExcel(
      builder,
      _o.NodeTier,
      _Tag_);
  }
}

public class GachaCraftOpenTagExcelT
{
  public SCHALE.Common.FlatData.CraftNodeTier NodeTier { get; set; }
  public List<SCHALE.Common.FlatData.Tag> Tag_ { get; set; }

  public GachaCraftOpenTagExcelT() {
    this.NodeTier = SCHALE.Common.FlatData.CraftNodeTier.Base;
    this.Tag_ = null;
  }
}


static public class GachaCraftOpenTagExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*NodeTier*/, 4 /*SCHALE.Common.FlatData.CraftNodeTier*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Tag_*/, 4 /*SCHALE.Common.FlatData.Tag*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
