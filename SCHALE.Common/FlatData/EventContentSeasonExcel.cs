// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct EventContentSeasonExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EventContentSeasonExcel GetRootAsEventContentSeasonExcel(ByteBuffer _bb) { return GetRootAsEventContentSeasonExcel(_bb, new EventContentSeasonExcel()); }
  public static EventContentSeasonExcel GetRootAsEventContentSeasonExcel(ByteBuffer _bb, EventContentSeasonExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentSeasonExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OriginalEventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsReturn { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public SCHALE.Common.FlatData.EventContentType EventContentType { get { int o = __p.__offset(12); return o != 0 ? (SCHALE.Common.FlatData.EventContentType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.EventContentType.Stage; } }
  public SCHALE.Common.FlatData.OpenConditionContent OpenConditionContent { get { int o = __p.__offset(14); return o != 0 ? (SCHALE.Common.FlatData.OpenConditionContent)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.OpenConditionContent.Shop; } }
  public bool EventDisplay { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int IconOrder { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public SCHALE.Common.FlatData.SubEventType SubEventType { get { int o = __p.__offset(20); return o != 0 ? (SCHALE.Common.FlatData.SubEventType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.SubEventType.None; } }
  public bool SubEvent { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long EventItemId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MainEventId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventChangeOpenCondition { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string BeforehandExposedTime { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeforehandExposedTimeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetBeforehandExposedTimeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetBeforehandExposedTimeArray() { return __p.__vector_as_array<byte>(30); }
  public string EventContentOpenTime { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventContentOpenTimeBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetEventContentOpenTimeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetEventContentOpenTimeArray() { return __p.__vector_as_array<byte>(32); }
  public string EventContentCloseTime { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventContentCloseTimeBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetEventContentCloseTimeBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetEventContentCloseTimeArray() { return __p.__vector_as_array<byte>(34); }
  public string ExtensionTime { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtensionTimeBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetExtensionTimeBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetExtensionTimeArray() { return __p.__vector_as_array<byte>(36); }
  public string MainIconParcelPath { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainIconParcelPathBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetMainIconParcelPathBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetMainIconParcelPathArray() { return __p.__vector_as_array<byte>(38); }
  public string SubIconParcelPath { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSubIconParcelPathBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetSubIconParcelPathBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetSubIconParcelPathArray() { return __p.__vector_as_array<byte>(40); }
  public string BeforehandBgImagePath { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeforehandBgImagePathBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetBeforehandBgImagePathBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetBeforehandBgImagePathArray() { return __p.__vector_as_array<byte>(42); }
  public long MinigamePrologScenarioGroupId { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BeforehandScenarioGroupId(int j) { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BeforehandScenarioGroupIdLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBeforehandScenarioGroupIdBytes() { return __p.__vector_as_span<long>(46, 8); }
#else
  public ArraySegment<byte>? GetBeforehandScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public long[] GetBeforehandScenarioGroupIdArray() { return __p.__vector_as_array<long>(46); }
  public string MainBannerImagePath { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainBannerImagePathBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetMainBannerImagePathBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetMainBannerImagePathArray() { return __p.__vector_as_array<byte>(48); }
  public string MainBgImagePath { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainBgImagePathBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetMainBgImagePathBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetMainBgImagePathArray() { return __p.__vector_as_array<byte>(50); }
  public long ShiftTriggerStageId { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ShiftMainBgImagePath { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShiftMainBgImagePathBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetShiftMainBgImagePathBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetShiftMainBgImagePathArray() { return __p.__vector_as_array<byte>(54); }
  public string MinigameLobbyPrefabName { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMinigameLobbyPrefabNameBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetMinigameLobbyPrefabNameBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetMinigameLobbyPrefabNameArray() { return __p.__vector_as_array<byte>(56); }
  public string MinigameVictoryPrefabName { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMinigameVictoryPrefabNameBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetMinigameVictoryPrefabNameBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetMinigameVictoryPrefabNameArray() { return __p.__vector_as_array<byte>(58); }
  public string MinigameMissionBgPrefabName { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMinigameMissionBgPrefabNameBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetMinigameMissionBgPrefabNameBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetMinigameMissionBgPrefabNameArray() { return __p.__vector_as_array<byte>(60); }
  public string CardBgImagePath { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCardBgImagePathBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetCardBgImagePathBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetCardBgImagePathArray() { return __p.__vector_as_array<byte>(62); }
  public bool EventAssist { get { int o = __p.__offset(64); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public SCHALE.Common.FlatData.EventContentReleaseType EventContentReleaseType { get { int o = __p.__offset(66); return o != 0 ? (SCHALE.Common.FlatData.EventContentReleaseType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.EventContentReleaseType.None; } }
  public long EventContentStageRewardIdPermanent { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.RewardTag RewardTagPermanent { get { int o = __p.__offset(70); return o != 0 ? (SCHALE.Common.FlatData.RewardTag)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.RewardTag.Default; } }
  public long MiniEventShortCutScenarioModeId { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SCHALE.Common.FlatData.EventContentSeasonExcel> CreateEventContentSeasonExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long OriginalEventContentId = 0,
      bool IsReturn = false,
      StringOffset NameOffset = default(StringOffset),
      SCHALE.Common.FlatData.EventContentType EventContentType = SCHALE.Common.FlatData.EventContentType.Stage,
      SCHALE.Common.FlatData.OpenConditionContent OpenConditionContent = SCHALE.Common.FlatData.OpenConditionContent.Shop,
      bool EventDisplay = false,
      int IconOrder = 0,
      SCHALE.Common.FlatData.SubEventType SubEventType = SCHALE.Common.FlatData.SubEventType.None,
      bool SubEvent = false,
      long EventItemId = 0,
      long MainEventId = 0,
      long EventChangeOpenCondition = 0,
      StringOffset BeforehandExposedTimeOffset = default(StringOffset),
      StringOffset EventContentOpenTimeOffset = default(StringOffset),
      StringOffset EventContentCloseTimeOffset = default(StringOffset),
      StringOffset ExtensionTimeOffset = default(StringOffset),
      StringOffset MainIconParcelPathOffset = default(StringOffset),
      StringOffset SubIconParcelPathOffset = default(StringOffset),
      StringOffset BeforehandBgImagePathOffset = default(StringOffset),
      long MinigamePrologScenarioGroupId = 0,
      VectorOffset BeforehandScenarioGroupIdOffset = default(VectorOffset),
      StringOffset MainBannerImagePathOffset = default(StringOffset),
      StringOffset MainBgImagePathOffset = default(StringOffset),
      long ShiftTriggerStageId = 0,
      StringOffset ShiftMainBgImagePathOffset = default(StringOffset),
      StringOffset MinigameLobbyPrefabNameOffset = default(StringOffset),
      StringOffset MinigameVictoryPrefabNameOffset = default(StringOffset),
      StringOffset MinigameMissionBgPrefabNameOffset = default(StringOffset),
      StringOffset CardBgImagePathOffset = default(StringOffset),
      bool EventAssist = false,
      SCHALE.Common.FlatData.EventContentReleaseType EventContentReleaseType = SCHALE.Common.FlatData.EventContentReleaseType.None,
      long EventContentStageRewardIdPermanent = 0,
      SCHALE.Common.FlatData.RewardTag RewardTagPermanent = SCHALE.Common.FlatData.RewardTag.Default,
      long MiniEventShortCutScenarioModeId = 0) {
    builder.StartTable(35);
    EventContentSeasonExcel.AddMiniEventShortCutScenarioModeId(builder, MiniEventShortCutScenarioModeId);
    EventContentSeasonExcel.AddEventContentStageRewardIdPermanent(builder, EventContentStageRewardIdPermanent);
    EventContentSeasonExcel.AddShiftTriggerStageId(builder, ShiftTriggerStageId);
    EventContentSeasonExcel.AddMinigamePrologScenarioGroupId(builder, MinigamePrologScenarioGroupId);
    EventContentSeasonExcel.AddEventChangeOpenCondition(builder, EventChangeOpenCondition);
    EventContentSeasonExcel.AddMainEventId(builder, MainEventId);
    EventContentSeasonExcel.AddEventItemId(builder, EventItemId);
    EventContentSeasonExcel.AddOriginalEventContentId(builder, OriginalEventContentId);
    EventContentSeasonExcel.AddEventContentId(builder, EventContentId);
    EventContentSeasonExcel.AddRewardTagPermanent(builder, RewardTagPermanent);
    EventContentSeasonExcel.AddEventContentReleaseType(builder, EventContentReleaseType);
    EventContentSeasonExcel.AddCardBgImagePath(builder, CardBgImagePathOffset);
    EventContentSeasonExcel.AddMinigameMissionBgPrefabName(builder, MinigameMissionBgPrefabNameOffset);
    EventContentSeasonExcel.AddMinigameVictoryPrefabName(builder, MinigameVictoryPrefabNameOffset);
    EventContentSeasonExcel.AddMinigameLobbyPrefabName(builder, MinigameLobbyPrefabNameOffset);
    EventContentSeasonExcel.AddShiftMainBgImagePath(builder, ShiftMainBgImagePathOffset);
    EventContentSeasonExcel.AddMainBgImagePath(builder, MainBgImagePathOffset);
    EventContentSeasonExcel.AddMainBannerImagePath(builder, MainBannerImagePathOffset);
    EventContentSeasonExcel.AddBeforehandScenarioGroupId(builder, BeforehandScenarioGroupIdOffset);
    EventContentSeasonExcel.AddBeforehandBgImagePath(builder, BeforehandBgImagePathOffset);
    EventContentSeasonExcel.AddSubIconParcelPath(builder, SubIconParcelPathOffset);
    EventContentSeasonExcel.AddMainIconParcelPath(builder, MainIconParcelPathOffset);
    EventContentSeasonExcel.AddExtensionTime(builder, ExtensionTimeOffset);
    EventContentSeasonExcel.AddEventContentCloseTime(builder, EventContentCloseTimeOffset);
    EventContentSeasonExcel.AddEventContentOpenTime(builder, EventContentOpenTimeOffset);
    EventContentSeasonExcel.AddBeforehandExposedTime(builder, BeforehandExposedTimeOffset);
    EventContentSeasonExcel.AddSubEventType(builder, SubEventType);
    EventContentSeasonExcel.AddIconOrder(builder, IconOrder);
    EventContentSeasonExcel.AddOpenConditionContent(builder, OpenConditionContent);
    EventContentSeasonExcel.AddEventContentType(builder, EventContentType);
    EventContentSeasonExcel.AddName(builder, NameOffset);
    EventContentSeasonExcel.AddEventAssist(builder, EventAssist);
    EventContentSeasonExcel.AddSubEvent(builder, SubEvent);
    EventContentSeasonExcel.AddEventDisplay(builder, EventDisplay);
    EventContentSeasonExcel.AddIsReturn(builder, IsReturn);
    return EventContentSeasonExcel.EndEventContentSeasonExcel(builder);
  }

  public static void StartEventContentSeasonExcel(FlatBufferBuilder builder) { builder.StartTable(35); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddOriginalEventContentId(FlatBufferBuilder builder, long originalEventContentId) { builder.AddLong(1, originalEventContentId, 0); }
  public static void AddIsReturn(FlatBufferBuilder builder, bool isReturn) { builder.AddBool(2, isReturn, false); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddEventContentType(FlatBufferBuilder builder, SCHALE.Common.FlatData.EventContentType eventContentType) { builder.AddInt(4, (int)eventContentType, 0); }
  public static void AddOpenConditionContent(FlatBufferBuilder builder, SCHALE.Common.FlatData.OpenConditionContent openConditionContent) { builder.AddInt(5, (int)openConditionContent, 0); }
  public static void AddEventDisplay(FlatBufferBuilder builder, bool eventDisplay) { builder.AddBool(6, eventDisplay, false); }
  public static void AddIconOrder(FlatBufferBuilder builder, int iconOrder) { builder.AddInt(7, iconOrder, 0); }
  public static void AddSubEventType(FlatBufferBuilder builder, SCHALE.Common.FlatData.SubEventType subEventType) { builder.AddInt(8, (int)subEventType, 0); }
  public static void AddSubEvent(FlatBufferBuilder builder, bool subEvent) { builder.AddBool(9, subEvent, false); }
  public static void AddEventItemId(FlatBufferBuilder builder, long eventItemId) { builder.AddLong(10, eventItemId, 0); }
  public static void AddMainEventId(FlatBufferBuilder builder, long mainEventId) { builder.AddLong(11, mainEventId, 0); }
  public static void AddEventChangeOpenCondition(FlatBufferBuilder builder, long eventChangeOpenCondition) { builder.AddLong(12, eventChangeOpenCondition, 0); }
  public static void AddBeforehandExposedTime(FlatBufferBuilder builder, StringOffset beforehandExposedTimeOffset) { builder.AddOffset(13, beforehandExposedTimeOffset.Value, 0); }
  public static void AddEventContentOpenTime(FlatBufferBuilder builder, StringOffset eventContentOpenTimeOffset) { builder.AddOffset(14, eventContentOpenTimeOffset.Value, 0); }
  public static void AddEventContentCloseTime(FlatBufferBuilder builder, StringOffset eventContentCloseTimeOffset) { builder.AddOffset(15, eventContentCloseTimeOffset.Value, 0); }
  public static void AddExtensionTime(FlatBufferBuilder builder, StringOffset extensionTimeOffset) { builder.AddOffset(16, extensionTimeOffset.Value, 0); }
  public static void AddMainIconParcelPath(FlatBufferBuilder builder, StringOffset mainIconParcelPathOffset) { builder.AddOffset(17, mainIconParcelPathOffset.Value, 0); }
  public static void AddSubIconParcelPath(FlatBufferBuilder builder, StringOffset subIconParcelPathOffset) { builder.AddOffset(18, subIconParcelPathOffset.Value, 0); }
  public static void AddBeforehandBgImagePath(FlatBufferBuilder builder, StringOffset beforehandBgImagePathOffset) { builder.AddOffset(19, beforehandBgImagePathOffset.Value, 0); }
  public static void AddMinigamePrologScenarioGroupId(FlatBufferBuilder builder, long minigamePrologScenarioGroupId) { builder.AddLong(20, minigamePrologScenarioGroupId, 0); }
  public static void AddBeforehandScenarioGroupId(FlatBufferBuilder builder, VectorOffset beforehandScenarioGroupIdOffset) { builder.AddOffset(21, beforehandScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateBeforehandScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBeforehandScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBeforehandScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBeforehandScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBeforehandScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddMainBannerImagePath(FlatBufferBuilder builder, StringOffset mainBannerImagePathOffset) { builder.AddOffset(22, mainBannerImagePathOffset.Value, 0); }
  public static void AddMainBgImagePath(FlatBufferBuilder builder, StringOffset mainBgImagePathOffset) { builder.AddOffset(23, mainBgImagePathOffset.Value, 0); }
  public static void AddShiftTriggerStageId(FlatBufferBuilder builder, long shiftTriggerStageId) { builder.AddLong(24, shiftTriggerStageId, 0); }
  public static void AddShiftMainBgImagePath(FlatBufferBuilder builder, StringOffset shiftMainBgImagePathOffset) { builder.AddOffset(25, shiftMainBgImagePathOffset.Value, 0); }
  public static void AddMinigameLobbyPrefabName(FlatBufferBuilder builder, StringOffset minigameLobbyPrefabNameOffset) { builder.AddOffset(26, minigameLobbyPrefabNameOffset.Value, 0); }
  public static void AddMinigameVictoryPrefabName(FlatBufferBuilder builder, StringOffset minigameVictoryPrefabNameOffset) { builder.AddOffset(27, minigameVictoryPrefabNameOffset.Value, 0); }
  public static void AddMinigameMissionBgPrefabName(FlatBufferBuilder builder, StringOffset minigameMissionBgPrefabNameOffset) { builder.AddOffset(28, minigameMissionBgPrefabNameOffset.Value, 0); }
  public static void AddCardBgImagePath(FlatBufferBuilder builder, StringOffset cardBgImagePathOffset) { builder.AddOffset(29, cardBgImagePathOffset.Value, 0); }
  public static void AddEventAssist(FlatBufferBuilder builder, bool eventAssist) { builder.AddBool(30, eventAssist, false); }
  public static void AddEventContentReleaseType(FlatBufferBuilder builder, SCHALE.Common.FlatData.EventContentReleaseType eventContentReleaseType) { builder.AddInt(31, (int)eventContentReleaseType, 0); }
  public static void AddEventContentStageRewardIdPermanent(FlatBufferBuilder builder, long eventContentStageRewardIdPermanent) { builder.AddLong(32, eventContentStageRewardIdPermanent, 0); }
  public static void AddRewardTagPermanent(FlatBufferBuilder builder, SCHALE.Common.FlatData.RewardTag rewardTagPermanent) { builder.AddInt(33, (int)rewardTagPermanent, 0); }
  public static void AddMiniEventShortCutScenarioModeId(FlatBufferBuilder builder, long miniEventShortCutScenarioModeId) { builder.AddLong(34, miniEventShortCutScenarioModeId, 0); }
  public static Offset<SCHALE.Common.FlatData.EventContentSeasonExcel> EndEventContentSeasonExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.EventContentSeasonExcel>(o);
  }
  public EventContentSeasonExcelT UnPack() {
    var _o = new EventContentSeasonExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentSeasonExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentSeason");
    _o.EventContentId = TableEncryptionService.Convert(this.EventContentId, key);
    _o.OriginalEventContentId = TableEncryptionService.Convert(this.OriginalEventContentId, key);
    _o.IsReturn = TableEncryptionService.Convert(this.IsReturn, key);
    _o.Name = TableEncryptionService.Convert(this.Name, key);
    _o.EventContentType = TableEncryptionService.Convert(this.EventContentType, key);
    _o.OpenConditionContent = TableEncryptionService.Convert(this.OpenConditionContent, key);
    _o.EventDisplay = TableEncryptionService.Convert(this.EventDisplay, key);
    _o.IconOrder = TableEncryptionService.Convert(this.IconOrder, key);
    _o.SubEventType = TableEncryptionService.Convert(this.SubEventType, key);
    _o.SubEvent = TableEncryptionService.Convert(this.SubEvent, key);
    _o.EventItemId = TableEncryptionService.Convert(this.EventItemId, key);
    _o.MainEventId = TableEncryptionService.Convert(this.MainEventId, key);
    _o.EventChangeOpenCondition = TableEncryptionService.Convert(this.EventChangeOpenCondition, key);
    _o.BeforehandExposedTime = TableEncryptionService.Convert(this.BeforehandExposedTime, key);
    _o.EventContentOpenTime = TableEncryptionService.Convert(this.EventContentOpenTime, key);
    _o.EventContentCloseTime = TableEncryptionService.Convert(this.EventContentCloseTime, key);
    _o.ExtensionTime = TableEncryptionService.Convert(this.ExtensionTime, key);
    _o.MainIconParcelPath = TableEncryptionService.Convert(this.MainIconParcelPath, key);
    _o.SubIconParcelPath = TableEncryptionService.Convert(this.SubIconParcelPath, key);
    _o.BeforehandBgImagePath = TableEncryptionService.Convert(this.BeforehandBgImagePath, key);
    _o.MinigamePrologScenarioGroupId = TableEncryptionService.Convert(this.MinigamePrologScenarioGroupId, key);
    _o.BeforehandScenarioGroupId = new List<long>();
    for (var _j = 0; _j < this.BeforehandScenarioGroupIdLength; ++_j) {_o.BeforehandScenarioGroupId.Add(TableEncryptionService.Convert(this.BeforehandScenarioGroupId(_j), key));}
    _o.MainBannerImagePath = TableEncryptionService.Convert(this.MainBannerImagePath, key);
    _o.MainBgImagePath = TableEncryptionService.Convert(this.MainBgImagePath, key);
    _o.ShiftTriggerStageId = TableEncryptionService.Convert(this.ShiftTriggerStageId, key);
    _o.ShiftMainBgImagePath = TableEncryptionService.Convert(this.ShiftMainBgImagePath, key);
    _o.MinigameLobbyPrefabName = TableEncryptionService.Convert(this.MinigameLobbyPrefabName, key);
    _o.MinigameVictoryPrefabName = TableEncryptionService.Convert(this.MinigameVictoryPrefabName, key);
    _o.MinigameMissionBgPrefabName = TableEncryptionService.Convert(this.MinigameMissionBgPrefabName, key);
    _o.CardBgImagePath = TableEncryptionService.Convert(this.CardBgImagePath, key);
    _o.EventAssist = TableEncryptionService.Convert(this.EventAssist, key);
    _o.EventContentReleaseType = TableEncryptionService.Convert(this.EventContentReleaseType, key);
    _o.EventContentStageRewardIdPermanent = TableEncryptionService.Convert(this.EventContentStageRewardIdPermanent, key);
    _o.RewardTagPermanent = TableEncryptionService.Convert(this.RewardTagPermanent, key);
    _o.MiniEventShortCutScenarioModeId = TableEncryptionService.Convert(this.MiniEventShortCutScenarioModeId, key);
  }
  public static Offset<SCHALE.Common.FlatData.EventContentSeasonExcel> Pack(FlatBufferBuilder builder, EventContentSeasonExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.EventContentSeasonExcel>);
    var _Name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _BeforehandExposedTime = _o.BeforehandExposedTime == null ? default(StringOffset) : builder.CreateString(_o.BeforehandExposedTime);
    var _EventContentOpenTime = _o.EventContentOpenTime == null ? default(StringOffset) : builder.CreateString(_o.EventContentOpenTime);
    var _EventContentCloseTime = _o.EventContentCloseTime == null ? default(StringOffset) : builder.CreateString(_o.EventContentCloseTime);
    var _ExtensionTime = _o.ExtensionTime == null ? default(StringOffset) : builder.CreateString(_o.ExtensionTime);
    var _MainIconParcelPath = _o.MainIconParcelPath == null ? default(StringOffset) : builder.CreateString(_o.MainIconParcelPath);
    var _SubIconParcelPath = _o.SubIconParcelPath == null ? default(StringOffset) : builder.CreateString(_o.SubIconParcelPath);
    var _BeforehandBgImagePath = _o.BeforehandBgImagePath == null ? default(StringOffset) : builder.CreateString(_o.BeforehandBgImagePath);
    var _BeforehandScenarioGroupId = default(VectorOffset);
    if (_o.BeforehandScenarioGroupId != null) {
      var __BeforehandScenarioGroupId = _o.BeforehandScenarioGroupId.ToArray();
      _BeforehandScenarioGroupId = CreateBeforehandScenarioGroupIdVector(builder, __BeforehandScenarioGroupId);
    }
    var _MainBannerImagePath = _o.MainBannerImagePath == null ? default(StringOffset) : builder.CreateString(_o.MainBannerImagePath);
    var _MainBgImagePath = _o.MainBgImagePath == null ? default(StringOffset) : builder.CreateString(_o.MainBgImagePath);
    var _ShiftMainBgImagePath = _o.ShiftMainBgImagePath == null ? default(StringOffset) : builder.CreateString(_o.ShiftMainBgImagePath);
    var _MinigameLobbyPrefabName = _o.MinigameLobbyPrefabName == null ? default(StringOffset) : builder.CreateString(_o.MinigameLobbyPrefabName);
    var _MinigameVictoryPrefabName = _o.MinigameVictoryPrefabName == null ? default(StringOffset) : builder.CreateString(_o.MinigameVictoryPrefabName);
    var _MinigameMissionBgPrefabName = _o.MinigameMissionBgPrefabName == null ? default(StringOffset) : builder.CreateString(_o.MinigameMissionBgPrefabName);
    var _CardBgImagePath = _o.CardBgImagePath == null ? default(StringOffset) : builder.CreateString(_o.CardBgImagePath);
    return CreateEventContentSeasonExcel(
      builder,
      _o.EventContentId,
      _o.OriginalEventContentId,
      _o.IsReturn,
      _Name,
      _o.EventContentType,
      _o.OpenConditionContent,
      _o.EventDisplay,
      _o.IconOrder,
      _o.SubEventType,
      _o.SubEvent,
      _o.EventItemId,
      _o.MainEventId,
      _o.EventChangeOpenCondition,
      _BeforehandExposedTime,
      _EventContentOpenTime,
      _EventContentCloseTime,
      _ExtensionTime,
      _MainIconParcelPath,
      _SubIconParcelPath,
      _BeforehandBgImagePath,
      _o.MinigamePrologScenarioGroupId,
      _BeforehandScenarioGroupId,
      _MainBannerImagePath,
      _MainBgImagePath,
      _o.ShiftTriggerStageId,
      _ShiftMainBgImagePath,
      _MinigameLobbyPrefabName,
      _MinigameVictoryPrefabName,
      _MinigameMissionBgPrefabName,
      _CardBgImagePath,
      _o.EventAssist,
      _o.EventContentReleaseType,
      _o.EventContentStageRewardIdPermanent,
      _o.RewardTagPermanent,
      _o.MiniEventShortCutScenarioModeId);
  }
}

public class EventContentSeasonExcelT
{
  public long EventContentId { get; set; }
  public long OriginalEventContentId { get; set; }
  public bool IsReturn { get; set; }
  public string Name { get; set; }
  public SCHALE.Common.FlatData.EventContentType EventContentType { get; set; }
  public SCHALE.Common.FlatData.OpenConditionContent OpenConditionContent { get; set; }
  public bool EventDisplay { get; set; }
  public int IconOrder { get; set; }
  public SCHALE.Common.FlatData.SubEventType SubEventType { get; set; }
  public bool SubEvent { get; set; }
  public long EventItemId { get; set; }
  public long MainEventId { get; set; }
  public long EventChangeOpenCondition { get; set; }
  public string BeforehandExposedTime { get; set; }
  public string EventContentOpenTime { get; set; }
  public string EventContentCloseTime { get; set; }
  public string ExtensionTime { get; set; }
  public string MainIconParcelPath { get; set; }
  public string SubIconParcelPath { get; set; }
  public string BeforehandBgImagePath { get; set; }
  public long MinigamePrologScenarioGroupId { get; set; }
  public List<long> BeforehandScenarioGroupId { get; set; }
  public string MainBannerImagePath { get; set; }
  public string MainBgImagePath { get; set; }
  public long ShiftTriggerStageId { get; set; }
  public string ShiftMainBgImagePath { get; set; }
  public string MinigameLobbyPrefabName { get; set; }
  public string MinigameVictoryPrefabName { get; set; }
  public string MinigameMissionBgPrefabName { get; set; }
  public string CardBgImagePath { get; set; }
  public bool EventAssist { get; set; }
  public SCHALE.Common.FlatData.EventContentReleaseType EventContentReleaseType { get; set; }
  public long EventContentStageRewardIdPermanent { get; set; }
  public SCHALE.Common.FlatData.RewardTag RewardTagPermanent { get; set; }
  public long MiniEventShortCutScenarioModeId { get; set; }

  public EventContentSeasonExcelT() {
    this.EventContentId = 0;
    this.OriginalEventContentId = 0;
    this.IsReturn = false;
    this.Name = null;
    this.EventContentType = SCHALE.Common.FlatData.EventContentType.Stage;
    this.OpenConditionContent = SCHALE.Common.FlatData.OpenConditionContent.Shop;
    this.EventDisplay = false;
    this.IconOrder = 0;
    this.SubEventType = SCHALE.Common.FlatData.SubEventType.None;
    this.SubEvent = false;
    this.EventItemId = 0;
    this.MainEventId = 0;
    this.EventChangeOpenCondition = 0;
    this.BeforehandExposedTime = null;
    this.EventContentOpenTime = null;
    this.EventContentCloseTime = null;
    this.ExtensionTime = null;
    this.MainIconParcelPath = null;
    this.SubIconParcelPath = null;
    this.BeforehandBgImagePath = null;
    this.MinigamePrologScenarioGroupId = 0;
    this.BeforehandScenarioGroupId = null;
    this.MainBannerImagePath = null;
    this.MainBgImagePath = null;
    this.ShiftTriggerStageId = 0;
    this.ShiftMainBgImagePath = null;
    this.MinigameLobbyPrefabName = null;
    this.MinigameVictoryPrefabName = null;
    this.MinigameMissionBgPrefabName = null;
    this.CardBgImagePath = null;
    this.EventAssist = false;
    this.EventContentReleaseType = SCHALE.Common.FlatData.EventContentReleaseType.None;
    this.EventContentStageRewardIdPermanent = 0;
    this.RewardTagPermanent = SCHALE.Common.FlatData.RewardTag.Default;
    this.MiniEventShortCutScenarioModeId = 0;
  }
}


static public class EventContentSeasonExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*OriginalEventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*IsReturn*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyField(tablePos, 12 /*EventContentType*/, 4 /*SCHALE.Common.FlatData.EventContentType*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*OpenConditionContent*/, 4 /*SCHALE.Common.FlatData.OpenConditionContent*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*EventDisplay*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*IconOrder*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*SubEventType*/, 4 /*SCHALE.Common.FlatData.SubEventType*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*SubEvent*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*EventItemId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*MainEventId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*EventChangeOpenCondition*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 30 /*BeforehandExposedTime*/, false)
      && verifier.VerifyString(tablePos, 32 /*EventContentOpenTime*/, false)
      && verifier.VerifyString(tablePos, 34 /*EventContentCloseTime*/, false)
      && verifier.VerifyString(tablePos, 36 /*ExtensionTime*/, false)
      && verifier.VerifyString(tablePos, 38 /*MainIconParcelPath*/, false)
      && verifier.VerifyString(tablePos, 40 /*SubIconParcelPath*/, false)
      && verifier.VerifyString(tablePos, 42 /*BeforehandBgImagePath*/, false)
      && verifier.VerifyField(tablePos, 44 /*MinigamePrologScenarioGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 46 /*BeforehandScenarioGroupId*/, 8 /*long*/, false)
      && verifier.VerifyString(tablePos, 48 /*MainBannerImagePath*/, false)
      && verifier.VerifyString(tablePos, 50 /*MainBgImagePath*/, false)
      && verifier.VerifyField(tablePos, 52 /*ShiftTriggerStageId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 54 /*ShiftMainBgImagePath*/, false)
      && verifier.VerifyString(tablePos, 56 /*MinigameLobbyPrefabName*/, false)
      && verifier.VerifyString(tablePos, 58 /*MinigameVictoryPrefabName*/, false)
      && verifier.VerifyString(tablePos, 60 /*MinigameMissionBgPrefabName*/, false)
      && verifier.VerifyString(tablePos, 62 /*CardBgImagePath*/, false)
      && verifier.VerifyField(tablePos, 64 /*EventAssist*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 66 /*EventContentReleaseType*/, 4 /*SCHALE.Common.FlatData.EventContentReleaseType*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*EventContentStageRewardIdPermanent*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*RewardTagPermanent*/, 4 /*SCHALE.Common.FlatData.RewardTag*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*MiniEventShortCutScenarioModeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
