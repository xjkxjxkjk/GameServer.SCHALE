// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct SoundUIExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SoundUIExcel GetRootAsSoundUIExcel(ByteBuffer _bb) { return GetRootAsSoundUIExcel(_bb, new SoundUIExcel()); }
  public static SoundUIExcel GetRootAsSoundUIExcel(ByteBuffer _bb, SoundUIExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SoundUIExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string SoundUniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSoundUniqueIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSoundUniqueIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSoundUniqueIdArray() { return __p.__vector_as_array<byte>(6); }
  public string Path { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<SCHALE.Common.FlatData.SoundUIExcel> CreateSoundUIExcel(FlatBufferBuilder builder,
      long ID = 0,
      StringOffset SoundUniqueIdOffset = default(StringOffset),
      StringOffset PathOffset = default(StringOffset)) {
    builder.StartTable(3);
    SoundUIExcel.AddID(builder, ID);
    SoundUIExcel.AddPath(builder, PathOffset);
    SoundUIExcel.AddSoundUniqueId(builder, SoundUniqueIdOffset);
    return SoundUIExcel.EndSoundUIExcel(builder);
  }

  public static void StartSoundUIExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddID(FlatBufferBuilder builder, long iD) { builder.AddLong(0, iD, 0); }
  public static void AddSoundUniqueId(FlatBufferBuilder builder, StringOffset soundUniqueIdOffset) { builder.AddOffset(1, soundUniqueIdOffset.Value, 0); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(2, pathOffset.Value, 0); }
  public static Offset<SCHALE.Common.FlatData.SoundUIExcel> EndSoundUIExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.SoundUIExcel>(o);
  }
  public SoundUIExcelT UnPack() {
    var _o = new SoundUIExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SoundUIExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("SoundUI");
    _o.ID = TableEncryptionService.Convert(this.ID, key);
    _o.SoundUniqueId = TableEncryptionService.Convert(this.SoundUniqueId, key);
    _o.Path = TableEncryptionService.Convert(this.Path, key);
  }
  public static Offset<SCHALE.Common.FlatData.SoundUIExcel> Pack(FlatBufferBuilder builder, SoundUIExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.SoundUIExcel>);
    var _SoundUniqueId = _o.SoundUniqueId == null ? default(StringOffset) : builder.CreateString(_o.SoundUniqueId);
    var _Path = _o.Path == null ? default(StringOffset) : builder.CreateString(_o.Path);
    return CreateSoundUIExcel(
      builder,
      _o.ID,
      _SoundUniqueId,
      _Path);
  }
}

public class SoundUIExcelT
{
  public long ID { get; set; }
  public string SoundUniqueId { get; set; }
  public string Path { get; set; }

  public SoundUIExcelT() {
    this.ID = 0;
    this.SoundUniqueId = null;
    this.Path = null;
  }
}


static public class SoundUIExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ID*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*SoundUniqueId*/, false)
      && verifier.VerifyString(tablePos, 8 /*Path*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
