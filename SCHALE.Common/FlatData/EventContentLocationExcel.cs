// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct EventContentLocationExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EventContentLocationExcel GetRootAsEventContentLocationExcel(ByteBuffer _bb) { return GetRootAsEventContentLocationExcel(_bb, new EventContentLocationExcel()); }
  public static EventContentLocationExcel GetRootAsEventContentLocationExcel(ByteBuffer _bb, EventContentLocationExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentLocationExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string PrefabPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabPathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPrefabPathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPrefabPathArray() { return __p.__vector_as_array<byte>(10); }
  public int LocationResetScheduleCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public SCHALE.Common.FlatData.ParcelType ScheduleEventPointCostParcelType { get { int o = __p.__offset(14); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.ParcelType.None; } }
  public long ScheduleEventPointCostParcelId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ScheduleEventPointCostParcelAmount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.ParcelType RewardParcelType { get { int o = __p.__offset(20); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.ParcelType.None; } }
  public long RewardParcelId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long InformationGroupId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SCHALE.Common.FlatData.EventContentLocationExcel> CreateEventContentLocationExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long Id = 0,
      uint LocalizeEtcId = 0,
      StringOffset PrefabPathOffset = default(StringOffset),
      int LocationResetScheduleCount = 0,
      SCHALE.Common.FlatData.ParcelType ScheduleEventPointCostParcelType = SCHALE.Common.FlatData.ParcelType.None,
      long ScheduleEventPointCostParcelId = 0,
      long ScheduleEventPointCostParcelAmount = 0,
      SCHALE.Common.FlatData.ParcelType RewardParcelType = SCHALE.Common.FlatData.ParcelType.None,
      long RewardParcelId = 0,
      long InformationGroupId = 0) {
    builder.StartTable(11);
    EventContentLocationExcel.AddInformationGroupId(builder, InformationGroupId);
    EventContentLocationExcel.AddRewardParcelId(builder, RewardParcelId);
    EventContentLocationExcel.AddScheduleEventPointCostParcelAmount(builder, ScheduleEventPointCostParcelAmount);
    EventContentLocationExcel.AddScheduleEventPointCostParcelId(builder, ScheduleEventPointCostParcelId);
    EventContentLocationExcel.AddId(builder, Id);
    EventContentLocationExcel.AddEventContentId(builder, EventContentId);
    EventContentLocationExcel.AddRewardParcelType(builder, RewardParcelType);
    EventContentLocationExcel.AddScheduleEventPointCostParcelType(builder, ScheduleEventPointCostParcelType);
    EventContentLocationExcel.AddLocationResetScheduleCount(builder, LocationResetScheduleCount);
    EventContentLocationExcel.AddPrefabPath(builder, PrefabPathOffset);
    EventContentLocationExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    return EventContentLocationExcel.EndEventContentLocationExcel(builder);
  }

  public static void StartEventContentLocationExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(1, id, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint localizeEtcId) { builder.AddUint(2, localizeEtcId, 0); }
  public static void AddPrefabPath(FlatBufferBuilder builder, StringOffset prefabPathOffset) { builder.AddOffset(3, prefabPathOffset.Value, 0); }
  public static void AddLocationResetScheduleCount(FlatBufferBuilder builder, int locationResetScheduleCount) { builder.AddInt(4, locationResetScheduleCount, 0); }
  public static void AddScheduleEventPointCostParcelType(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType scheduleEventPointCostParcelType) { builder.AddInt(5, (int)scheduleEventPointCostParcelType, 0); }
  public static void AddScheduleEventPointCostParcelId(FlatBufferBuilder builder, long scheduleEventPointCostParcelId) { builder.AddLong(6, scheduleEventPointCostParcelId, 0); }
  public static void AddScheduleEventPointCostParcelAmount(FlatBufferBuilder builder, long scheduleEventPointCostParcelAmount) { builder.AddLong(7, scheduleEventPointCostParcelAmount, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType rewardParcelType) { builder.AddInt(8, (int)rewardParcelType, 0); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, long rewardParcelId) { builder.AddLong(9, rewardParcelId, 0); }
  public static void AddInformationGroupId(FlatBufferBuilder builder, long informationGroupId) { builder.AddLong(10, informationGroupId, 0); }
  public static Offset<SCHALE.Common.FlatData.EventContentLocationExcel> EndEventContentLocationExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.EventContentLocationExcel>(o);
  }
  public EventContentLocationExcelT UnPack() {
    var _o = new EventContentLocationExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentLocationExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentLocation");
    _o.EventContentId = TableEncryptionService.Convert(this.EventContentId, key);
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.LocalizeEtcId = TableEncryptionService.Convert(this.LocalizeEtcId, key);
    _o.PrefabPath = TableEncryptionService.Convert(this.PrefabPath, key);
    _o.LocationResetScheduleCount = TableEncryptionService.Convert(this.LocationResetScheduleCount, key);
    _o.ScheduleEventPointCostParcelType = TableEncryptionService.Convert(this.ScheduleEventPointCostParcelType, key);
    _o.ScheduleEventPointCostParcelId = TableEncryptionService.Convert(this.ScheduleEventPointCostParcelId, key);
    _o.ScheduleEventPointCostParcelAmount = TableEncryptionService.Convert(this.ScheduleEventPointCostParcelAmount, key);
    _o.RewardParcelType = TableEncryptionService.Convert(this.RewardParcelType, key);
    _o.RewardParcelId = TableEncryptionService.Convert(this.RewardParcelId, key);
    _o.InformationGroupId = TableEncryptionService.Convert(this.InformationGroupId, key);
  }
  public static Offset<SCHALE.Common.FlatData.EventContentLocationExcel> Pack(FlatBufferBuilder builder, EventContentLocationExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.EventContentLocationExcel>);
    var _PrefabPath = _o.PrefabPath == null ? default(StringOffset) : builder.CreateString(_o.PrefabPath);
    return CreateEventContentLocationExcel(
      builder,
      _o.EventContentId,
      _o.Id,
      _o.LocalizeEtcId,
      _PrefabPath,
      _o.LocationResetScheduleCount,
      _o.ScheduleEventPointCostParcelType,
      _o.ScheduleEventPointCostParcelId,
      _o.ScheduleEventPointCostParcelAmount,
      _o.RewardParcelType,
      _o.RewardParcelId,
      _o.InformationGroupId);
  }
}

public class EventContentLocationExcelT
{
  public long EventContentId { get; set; }
  public long Id { get; set; }
  public uint LocalizeEtcId { get; set; }
  public string PrefabPath { get; set; }
  public int LocationResetScheduleCount { get; set; }
  public SCHALE.Common.FlatData.ParcelType ScheduleEventPointCostParcelType { get; set; }
  public long ScheduleEventPointCostParcelId { get; set; }
  public long ScheduleEventPointCostParcelAmount { get; set; }
  public SCHALE.Common.FlatData.ParcelType RewardParcelType { get; set; }
  public long RewardParcelId { get; set; }
  public long InformationGroupId { get; set; }

  public EventContentLocationExcelT() {
    this.EventContentId = 0;
    this.Id = 0;
    this.LocalizeEtcId = 0;
    this.PrefabPath = null;
    this.LocationResetScheduleCount = 0;
    this.ScheduleEventPointCostParcelType = SCHALE.Common.FlatData.ParcelType.None;
    this.ScheduleEventPointCostParcelId = 0;
    this.ScheduleEventPointCostParcelAmount = 0;
    this.RewardParcelType = SCHALE.Common.FlatData.ParcelType.None;
    this.RewardParcelId = 0;
    this.InformationGroupId = 0;
  }
}


static public class EventContentLocationExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*LocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*PrefabPath*/, false)
      && verifier.VerifyField(tablePos, 12 /*LocationResetScheduleCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ScheduleEventPointCostParcelType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*ScheduleEventPointCostParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*ScheduleEventPointCostParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*RewardParcelType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*RewardParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*InformationGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
