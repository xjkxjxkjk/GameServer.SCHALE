// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct TacticDamageSimulatorSettingExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static TacticDamageSimulatorSettingExcel GetRootAsTacticDamageSimulatorSettingExcel(ByteBuffer _bb) { return GetRootAsTacticDamageSimulatorSettingExcel(_bb, new TacticDamageSimulatorSettingExcel()); }
  public static TacticDamageSimulatorSettingExcel GetRootAsTacticDamageSimulatorSettingExcel(ByteBuffer _bb, TacticDamageSimulatorSettingExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TacticDamageSimulatorSettingExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Order { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Repeat { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long TestPreset { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TestBattleTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long StrikerSquard { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SpecialSquard { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool ReplaceCharacterCostRegen { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ReplaceCostRegenValue { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool UseAutoSkill { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public SCHALE.Common.FlatData.TerrainAdaptationStat OverrideStreetAdaptation { get { int o = __p.__offset(22); return o != 0 ? (SCHALE.Common.FlatData.TerrainAdaptationStat)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.TerrainAdaptationStat.D; } }
  public SCHALE.Common.FlatData.TerrainAdaptationStat OverrideOutdoorAdaptation { get { int o = __p.__offset(24); return o != 0 ? (SCHALE.Common.FlatData.TerrainAdaptationStat)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.TerrainAdaptationStat.D; } }
  public SCHALE.Common.FlatData.TerrainAdaptationStat OverrideIndoorAdaptation { get { int o = __p.__offset(26); return o != 0 ? (SCHALE.Common.FlatData.TerrainAdaptationStat)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.TerrainAdaptationStat.D; } }
  public bool ApplyOverrideAdaptation { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long GroundId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FixedCharacter(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int FixedCharacterLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetFixedCharacterBytes() { return __p.__vector_as_span<long>(32, 8); }
#else
  public ArraySegment<byte>? GetFixedCharacterBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public long[] GetFixedCharacterArray() { return __p.__vector_as_array<long>(32); }

  public static Offset<SCHALE.Common.FlatData.TacticDamageSimulatorSettingExcel> CreateTacticDamageSimulatorSettingExcel(FlatBufferBuilder builder,
      int Order = 0,
      int Repeat = 0,
      long TestPreset = 0,
      long TestBattleTime = 0,
      long StrikerSquard = 0,
      long SpecialSquard = 0,
      bool ReplaceCharacterCostRegen = false,
      int ReplaceCostRegenValue = 0,
      bool UseAutoSkill = false,
      SCHALE.Common.FlatData.TerrainAdaptationStat OverrideStreetAdaptation = SCHALE.Common.FlatData.TerrainAdaptationStat.D,
      SCHALE.Common.FlatData.TerrainAdaptationStat OverrideOutdoorAdaptation = SCHALE.Common.FlatData.TerrainAdaptationStat.D,
      SCHALE.Common.FlatData.TerrainAdaptationStat OverrideIndoorAdaptation = SCHALE.Common.FlatData.TerrainAdaptationStat.D,
      bool ApplyOverrideAdaptation = false,
      long GroundId = 0,
      VectorOffset FixedCharacterOffset = default(VectorOffset)) {
    builder.StartTable(15);
    TacticDamageSimulatorSettingExcel.AddGroundId(builder, GroundId);
    TacticDamageSimulatorSettingExcel.AddSpecialSquard(builder, SpecialSquard);
    TacticDamageSimulatorSettingExcel.AddStrikerSquard(builder, StrikerSquard);
    TacticDamageSimulatorSettingExcel.AddTestBattleTime(builder, TestBattleTime);
    TacticDamageSimulatorSettingExcel.AddTestPreset(builder, TestPreset);
    TacticDamageSimulatorSettingExcel.AddFixedCharacter(builder, FixedCharacterOffset);
    TacticDamageSimulatorSettingExcel.AddOverrideIndoorAdaptation(builder, OverrideIndoorAdaptation);
    TacticDamageSimulatorSettingExcel.AddOverrideOutdoorAdaptation(builder, OverrideOutdoorAdaptation);
    TacticDamageSimulatorSettingExcel.AddOverrideStreetAdaptation(builder, OverrideStreetAdaptation);
    TacticDamageSimulatorSettingExcel.AddReplaceCostRegenValue(builder, ReplaceCostRegenValue);
    TacticDamageSimulatorSettingExcel.AddRepeat(builder, Repeat);
    TacticDamageSimulatorSettingExcel.AddOrder(builder, Order);
    TacticDamageSimulatorSettingExcel.AddApplyOverrideAdaptation(builder, ApplyOverrideAdaptation);
    TacticDamageSimulatorSettingExcel.AddUseAutoSkill(builder, UseAutoSkill);
    TacticDamageSimulatorSettingExcel.AddReplaceCharacterCostRegen(builder, ReplaceCharacterCostRegen);
    return TacticDamageSimulatorSettingExcel.EndTacticDamageSimulatorSettingExcel(builder);
  }

  public static void StartTacticDamageSimulatorSettingExcel(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddOrder(FlatBufferBuilder builder, int order) { builder.AddInt(0, order, 0); }
  public static void AddRepeat(FlatBufferBuilder builder, int repeat) { builder.AddInt(1, repeat, 0); }
  public static void AddTestPreset(FlatBufferBuilder builder, long testPreset) { builder.AddLong(2, testPreset, 0); }
  public static void AddTestBattleTime(FlatBufferBuilder builder, long testBattleTime) { builder.AddLong(3, testBattleTime, 0); }
  public static void AddStrikerSquard(FlatBufferBuilder builder, long strikerSquard) { builder.AddLong(4, strikerSquard, 0); }
  public static void AddSpecialSquard(FlatBufferBuilder builder, long specialSquard) { builder.AddLong(5, specialSquard, 0); }
  public static void AddReplaceCharacterCostRegen(FlatBufferBuilder builder, bool replaceCharacterCostRegen) { builder.AddBool(6, replaceCharacterCostRegen, false); }
  public static void AddReplaceCostRegenValue(FlatBufferBuilder builder, int replaceCostRegenValue) { builder.AddInt(7, replaceCostRegenValue, 0); }
  public static void AddUseAutoSkill(FlatBufferBuilder builder, bool useAutoSkill) { builder.AddBool(8, useAutoSkill, false); }
  public static void AddOverrideStreetAdaptation(FlatBufferBuilder builder, SCHALE.Common.FlatData.TerrainAdaptationStat overrideStreetAdaptation) { builder.AddInt(9, (int)overrideStreetAdaptation, 0); }
  public static void AddOverrideOutdoorAdaptation(FlatBufferBuilder builder, SCHALE.Common.FlatData.TerrainAdaptationStat overrideOutdoorAdaptation) { builder.AddInt(10, (int)overrideOutdoorAdaptation, 0); }
  public static void AddOverrideIndoorAdaptation(FlatBufferBuilder builder, SCHALE.Common.FlatData.TerrainAdaptationStat overrideIndoorAdaptation) { builder.AddInt(11, (int)overrideIndoorAdaptation, 0); }
  public static void AddApplyOverrideAdaptation(FlatBufferBuilder builder, bool applyOverrideAdaptation) { builder.AddBool(12, applyOverrideAdaptation, false); }
  public static void AddGroundId(FlatBufferBuilder builder, long groundId) { builder.AddLong(13, groundId, 0); }
  public static void AddFixedCharacter(FlatBufferBuilder builder, VectorOffset fixedCharacterOffset) { builder.AddOffset(14, fixedCharacterOffset.Value, 0); }
  public static VectorOffset CreateFixedCharacterVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFixedCharacterVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFixedCharacterVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFixedCharacterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFixedCharacterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<SCHALE.Common.FlatData.TacticDamageSimulatorSettingExcel> EndTacticDamageSimulatorSettingExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.TacticDamageSimulatorSettingExcel>(o);
  }
  public TacticDamageSimulatorSettingExcelT UnPack() {
    var _o = new TacticDamageSimulatorSettingExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TacticDamageSimulatorSettingExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("TacticDamageSimulatorSetting");
    _o.Order = TableEncryptionService.Convert(this.Order, key);
    _o.Repeat = TableEncryptionService.Convert(this.Repeat, key);
    _o.TestPreset = TableEncryptionService.Convert(this.TestPreset, key);
    _o.TestBattleTime = TableEncryptionService.Convert(this.TestBattleTime, key);
    _o.StrikerSquard = TableEncryptionService.Convert(this.StrikerSquard, key);
    _o.SpecialSquard = TableEncryptionService.Convert(this.SpecialSquard, key);
    _o.ReplaceCharacterCostRegen = TableEncryptionService.Convert(this.ReplaceCharacterCostRegen, key);
    _o.ReplaceCostRegenValue = TableEncryptionService.Convert(this.ReplaceCostRegenValue, key);
    _o.UseAutoSkill = TableEncryptionService.Convert(this.UseAutoSkill, key);
    _o.OverrideStreetAdaptation = TableEncryptionService.Convert(this.OverrideStreetAdaptation, key);
    _o.OverrideOutdoorAdaptation = TableEncryptionService.Convert(this.OverrideOutdoorAdaptation, key);
    _o.OverrideIndoorAdaptation = TableEncryptionService.Convert(this.OverrideIndoorAdaptation, key);
    _o.ApplyOverrideAdaptation = TableEncryptionService.Convert(this.ApplyOverrideAdaptation, key);
    _o.GroundId = TableEncryptionService.Convert(this.GroundId, key);
    _o.FixedCharacter = new List<long>();
    for (var _j = 0; _j < this.FixedCharacterLength; ++_j) {_o.FixedCharacter.Add(TableEncryptionService.Convert(this.FixedCharacter(_j), key));}
  }
  public static Offset<SCHALE.Common.FlatData.TacticDamageSimulatorSettingExcel> Pack(FlatBufferBuilder builder, TacticDamageSimulatorSettingExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.TacticDamageSimulatorSettingExcel>);
    var _FixedCharacter = default(VectorOffset);
    if (_o.FixedCharacter != null) {
      var __FixedCharacter = _o.FixedCharacter.ToArray();
      _FixedCharacter = CreateFixedCharacterVector(builder, __FixedCharacter);
    }
    return CreateTacticDamageSimulatorSettingExcel(
      builder,
      _o.Order,
      _o.Repeat,
      _o.TestPreset,
      _o.TestBattleTime,
      _o.StrikerSquard,
      _o.SpecialSquard,
      _o.ReplaceCharacterCostRegen,
      _o.ReplaceCostRegenValue,
      _o.UseAutoSkill,
      _o.OverrideStreetAdaptation,
      _o.OverrideOutdoorAdaptation,
      _o.OverrideIndoorAdaptation,
      _o.ApplyOverrideAdaptation,
      _o.GroundId,
      _FixedCharacter);
  }
}

public class TacticDamageSimulatorSettingExcelT
{
  public int Order { get; set; }
  public int Repeat { get; set; }
  public long TestPreset { get; set; }
  public long TestBattleTime { get; set; }
  public long StrikerSquard { get; set; }
  public long SpecialSquard { get; set; }
  public bool ReplaceCharacterCostRegen { get; set; }
  public int ReplaceCostRegenValue { get; set; }
  public bool UseAutoSkill { get; set; }
  public SCHALE.Common.FlatData.TerrainAdaptationStat OverrideStreetAdaptation { get; set; }
  public SCHALE.Common.FlatData.TerrainAdaptationStat OverrideOutdoorAdaptation { get; set; }
  public SCHALE.Common.FlatData.TerrainAdaptationStat OverrideIndoorAdaptation { get; set; }
  public bool ApplyOverrideAdaptation { get; set; }
  public long GroundId { get; set; }
  public List<long> FixedCharacter { get; set; }

  public TacticDamageSimulatorSettingExcelT() {
    this.Order = 0;
    this.Repeat = 0;
    this.TestPreset = 0;
    this.TestBattleTime = 0;
    this.StrikerSquard = 0;
    this.SpecialSquard = 0;
    this.ReplaceCharacterCostRegen = false;
    this.ReplaceCostRegenValue = 0;
    this.UseAutoSkill = false;
    this.OverrideStreetAdaptation = SCHALE.Common.FlatData.TerrainAdaptationStat.D;
    this.OverrideOutdoorAdaptation = SCHALE.Common.FlatData.TerrainAdaptationStat.D;
    this.OverrideIndoorAdaptation = SCHALE.Common.FlatData.TerrainAdaptationStat.D;
    this.ApplyOverrideAdaptation = false;
    this.GroundId = 0;
    this.FixedCharacter = null;
  }
}


static public class TacticDamageSimulatorSettingExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Order*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Repeat*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*TestPreset*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*TestBattleTime*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*StrikerSquard*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*SpecialSquard*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*ReplaceCharacterCostRegen*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*ReplaceCostRegenValue*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*UseAutoSkill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*OverrideStreetAdaptation*/, 4 /*SCHALE.Common.FlatData.TerrainAdaptationStat*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*OverrideOutdoorAdaptation*/, 4 /*SCHALE.Common.FlatData.TerrainAdaptationStat*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*OverrideIndoorAdaptation*/, 4 /*SCHALE.Common.FlatData.TerrainAdaptationStat*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*ApplyOverrideAdaptation*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 30 /*GroundId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 32 /*FixedCharacter*/, 8 /*long*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
