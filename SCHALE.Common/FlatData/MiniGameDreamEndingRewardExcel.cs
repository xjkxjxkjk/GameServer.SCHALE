// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct MiniGameDreamEndingRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MiniGameDreamEndingRewardExcel GetRootAsMiniGameDreamEndingRewardExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamEndingRewardExcel(_bb, new MiniGameDreamEndingRewardExcel()); }
  public static MiniGameDreamEndingRewardExcel GetRootAsMiniGameDreamEndingRewardExcel(ByteBuffer _bb, MiniGameDreamEndingRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamEndingRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EndingId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public SCHALE.Common.FlatData.DreamMakerEndingRewardType DreamMakerEndingRewardType { get { int o = __p.__offset(10); return o != 0 ? (SCHALE.Common.FlatData.DreamMakerEndingRewardType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.DreamMakerEndingRewardType.None; } }
  public SCHALE.Common.FlatData.DreamMakerEndingType DreamMakerEndingType { get { int o = __p.__offset(12); return o != 0 ? (SCHALE.Common.FlatData.DreamMakerEndingType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.DreamMakerEndingType.None; } }
  public SCHALE.Common.FlatData.ParcelType RewardParcelType(int j) { int o = __p.__offset(14); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (SCHALE.Common.FlatData.ParcelType)0; }
  public int RewardParcelTypeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<SCHALE.Common.FlatData.ParcelType> GetRewardParcelTypeBytes() { return __p.__vector_as_span<SCHALE.Common.FlatData.ParcelType>(14, 4); }
#else
  public ArraySegment<byte>? GetRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public SCHALE.Common.FlatData.ParcelType[] GetRewardParcelTypeArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); SCHALE.Common.FlatData.ParcelType[] a = new SCHALE.Common.FlatData.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long RewardParcelId(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParcelIdLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParcelIdBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetRewardParcelIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetRewardParcelIdArray() { return __p.__vector_as_array<long>(16); }
  public long RewardParcelAmount(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParcelAmountLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParcelAmountBytes() { return __p.__vector_as_span<long>(18, 8); }
#else
  public ArraySegment<byte>? GetRewardParcelAmountBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public long[] GetRewardParcelAmountArray() { return __p.__vector_as_array<long>(18); }

  public static Offset<SCHALE.Common.FlatData.MiniGameDreamEndingRewardExcel> CreateMiniGameDreamEndingRewardExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long EndingId = 0,
      uint LocalizeEtcId = 0,
      SCHALE.Common.FlatData.DreamMakerEndingRewardType DreamMakerEndingRewardType = SCHALE.Common.FlatData.DreamMakerEndingRewardType.None,
      SCHALE.Common.FlatData.DreamMakerEndingType DreamMakerEndingType = SCHALE.Common.FlatData.DreamMakerEndingType.None,
      VectorOffset RewardParcelTypeOffset = default(VectorOffset),
      VectorOffset RewardParcelIdOffset = default(VectorOffset),
      VectorOffset RewardParcelAmountOffset = default(VectorOffset)) {
    builder.StartTable(8);
    MiniGameDreamEndingRewardExcel.AddEndingId(builder, EndingId);
    MiniGameDreamEndingRewardExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamEndingRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmountOffset);
    MiniGameDreamEndingRewardExcel.AddRewardParcelId(builder, RewardParcelIdOffset);
    MiniGameDreamEndingRewardExcel.AddRewardParcelType(builder, RewardParcelTypeOffset);
    MiniGameDreamEndingRewardExcel.AddDreamMakerEndingType(builder, DreamMakerEndingType);
    MiniGameDreamEndingRewardExcel.AddDreamMakerEndingRewardType(builder, DreamMakerEndingRewardType);
    MiniGameDreamEndingRewardExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    return MiniGameDreamEndingRewardExcel.EndMiniGameDreamEndingRewardExcel(builder);
  }

  public static void StartMiniGameDreamEndingRewardExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddEndingId(FlatBufferBuilder builder, long endingId) { builder.AddLong(1, endingId, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint localizeEtcId) { builder.AddUint(2, localizeEtcId, 0); }
  public static void AddDreamMakerEndingRewardType(FlatBufferBuilder builder, SCHALE.Common.FlatData.DreamMakerEndingRewardType dreamMakerEndingRewardType) { builder.AddInt(3, (int)dreamMakerEndingRewardType, 0); }
  public static void AddDreamMakerEndingType(FlatBufferBuilder builder, SCHALE.Common.FlatData.DreamMakerEndingType dreamMakerEndingType) { builder.AddInt(4, (int)dreamMakerEndingType, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, VectorOffset rewardParcelTypeOffset) { builder.AddOffset(5, rewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelTypeVector(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<SCHALE.Common.FlatData.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<SCHALE.Common.FlatData.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, VectorOffset rewardParcelIdOffset) { builder.AddOffset(6, rewardParcelIdOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, VectorOffset rewardParcelAmountOffset) { builder.AddOffset(7, rewardParcelAmountOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<SCHALE.Common.FlatData.MiniGameDreamEndingRewardExcel> EndMiniGameDreamEndingRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.MiniGameDreamEndingRewardExcel>(o);
  }
  public MiniGameDreamEndingRewardExcelT UnPack() {
    var _o = new MiniGameDreamEndingRewardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MiniGameDreamEndingRewardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MiniGameDreamEndingReward");
    _o.EventContentId = TableEncryptionService.Convert(this.EventContentId, key);
    _o.EndingId = TableEncryptionService.Convert(this.EndingId, key);
    _o.LocalizeEtcId = TableEncryptionService.Convert(this.LocalizeEtcId, key);
    _o.DreamMakerEndingRewardType = TableEncryptionService.Convert(this.DreamMakerEndingRewardType, key);
    _o.DreamMakerEndingType = TableEncryptionService.Convert(this.DreamMakerEndingType, key);
    _o.RewardParcelType = new List<SCHALE.Common.FlatData.ParcelType>();
    for (var _j = 0; _j < this.RewardParcelTypeLength; ++_j) {_o.RewardParcelType.Add(TableEncryptionService.Convert(this.RewardParcelType(_j), key));}
    _o.RewardParcelId = new List<long>();
    for (var _j = 0; _j < this.RewardParcelIdLength; ++_j) {_o.RewardParcelId.Add(TableEncryptionService.Convert(this.RewardParcelId(_j), key));}
    _o.RewardParcelAmount = new List<long>();
    for (var _j = 0; _j < this.RewardParcelAmountLength; ++_j) {_o.RewardParcelAmount.Add(TableEncryptionService.Convert(this.RewardParcelAmount(_j), key));}
  }
  public static Offset<SCHALE.Common.FlatData.MiniGameDreamEndingRewardExcel> Pack(FlatBufferBuilder builder, MiniGameDreamEndingRewardExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.MiniGameDreamEndingRewardExcel>);
    var _RewardParcelType = default(VectorOffset);
    if (_o.RewardParcelType != null) {
      var __RewardParcelType = _o.RewardParcelType.ToArray();
      _RewardParcelType = CreateRewardParcelTypeVector(builder, __RewardParcelType);
    }
    var _RewardParcelId = default(VectorOffset);
    if (_o.RewardParcelId != null) {
      var __RewardParcelId = _o.RewardParcelId.ToArray();
      _RewardParcelId = CreateRewardParcelIdVector(builder, __RewardParcelId);
    }
    var _RewardParcelAmount = default(VectorOffset);
    if (_o.RewardParcelAmount != null) {
      var __RewardParcelAmount = _o.RewardParcelAmount.ToArray();
      _RewardParcelAmount = CreateRewardParcelAmountVector(builder, __RewardParcelAmount);
    }
    return CreateMiniGameDreamEndingRewardExcel(
      builder,
      _o.EventContentId,
      _o.EndingId,
      _o.LocalizeEtcId,
      _o.DreamMakerEndingRewardType,
      _o.DreamMakerEndingType,
      _RewardParcelType,
      _RewardParcelId,
      _RewardParcelAmount);
  }
}

public class MiniGameDreamEndingRewardExcelT
{
  public long EventContentId { get; set; }
  public long EndingId { get; set; }
  public uint LocalizeEtcId { get; set; }
  public SCHALE.Common.FlatData.DreamMakerEndingRewardType DreamMakerEndingRewardType { get; set; }
  public SCHALE.Common.FlatData.DreamMakerEndingType DreamMakerEndingType { get; set; }
  public List<SCHALE.Common.FlatData.ParcelType> RewardParcelType { get; set; }
  public List<long> RewardParcelId { get; set; }
  public List<long> RewardParcelAmount { get; set; }

  public MiniGameDreamEndingRewardExcelT() {
    this.EventContentId = 0;
    this.EndingId = 0;
    this.LocalizeEtcId = 0;
    this.DreamMakerEndingRewardType = SCHALE.Common.FlatData.DreamMakerEndingRewardType.None;
    this.DreamMakerEndingType = SCHALE.Common.FlatData.DreamMakerEndingType.None;
    this.RewardParcelType = null;
    this.RewardParcelId = null;
    this.RewardParcelAmount = null;
  }
}


static public class MiniGameDreamEndingRewardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EndingId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*LocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*DreamMakerEndingRewardType*/, 4 /*SCHALE.Common.FlatData.DreamMakerEndingRewardType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*DreamMakerEndingType*/, 4 /*SCHALE.Common.FlatData.DreamMakerEndingType*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*RewardParcelType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*RewardParcelId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*RewardParcelAmount*/, 8 /*long*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
