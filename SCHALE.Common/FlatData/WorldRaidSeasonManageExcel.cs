// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct WorldRaidSeasonManageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static WorldRaidSeasonManageExcel GetRootAsWorldRaidSeasonManageExcel(ByteBuffer _bb) { return GetRootAsWorldRaidSeasonManageExcel(_bb, new WorldRaidSeasonManageExcel()); }
  public static WorldRaidSeasonManageExcel GetRootAsWorldRaidSeasonManageExcel(ByteBuffer _bb, WorldRaidSeasonManageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WorldRaidSeasonManageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long SeasonId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.CurrencyTypes EnterTicket { get { int o = __p.__offset(8); return o != 0 ? (SCHALE.Common.FlatData.CurrencyTypes)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.CurrencyTypes.Invalid; } }
  public string WorldRaidLobbyScene { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldRaidLobbySceneBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetWorldRaidLobbySceneBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetWorldRaidLobbySceneArray() { return __p.__vector_as_array<byte>(10); }
  public string WorldRaidLobbyBanner { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldRaidLobbyBannerBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetWorldRaidLobbyBannerBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetWorldRaidLobbyBannerArray() { return __p.__vector_as_array<byte>(12); }
  public string WorldRaidLobbyBG { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldRaidLobbyBGBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetWorldRaidLobbyBGBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetWorldRaidLobbyBGArray() { return __p.__vector_as_array<byte>(14); }
  public bool WorldRaidLobbyBannerShow { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long SeasonOpenCondition { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldRaidLobbyEnterScenario { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool CanPlayNotSeasonTime { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool WorldRaidUniqueThemeLobbyUI { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string WorldRaidUniqueThemeName { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldRaidUniqueThemeNameBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetWorldRaidUniqueThemeNameBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetWorldRaidUniqueThemeNameArray() { return __p.__vector_as_array<byte>(26); }
  public bool CanWorldRaidGemEnter { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool HideWorldRaidTicketUI { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UseWorldRaidCommonToast { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long OpenRaidBossGroupId(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int OpenRaidBossGroupIdLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetOpenRaidBossGroupIdBytes() { return __p.__vector_as_span<long>(34, 8); }
#else
  public ArraySegment<byte>? GetOpenRaidBossGroupIdBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public long[] GetOpenRaidBossGroupIdArray() { return __p.__vector_as_array<long>(34); }
  public string BossSpawnTime(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BossSpawnTimeLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string EliminateTime(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EliminateTimeLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  public long ScenarioOutputConditionId(int j) { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ScenarioOutputConditionIdLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetScenarioOutputConditionIdBytes() { return __p.__vector_as_span<long>(40, 8); }
#else
  public ArraySegment<byte>? GetScenarioOutputConditionIdBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public long[] GetScenarioOutputConditionIdArray() { return __p.__vector_as_array<long>(40); }
  public long ConditionScenarioGroupid(int j) { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ConditionScenarioGroupidLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetConditionScenarioGroupidBytes() { return __p.__vector_as_span<long>(42, 8); }
#else
  public ArraySegment<byte>? GetConditionScenarioGroupidBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public long[] GetConditionScenarioGroupidArray() { return __p.__vector_as_array<long>(42); }
  public string WorldRaidMapEnterOperator { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldRaidMapEnterOperatorBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetWorldRaidMapEnterOperatorBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetWorldRaidMapEnterOperatorArray() { return __p.__vector_as_array<byte>(44); }
  public bool UseFavorRankBuff { get { int o = __p.__offset(46); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<SCHALE.Common.FlatData.WorldRaidSeasonManageExcel> CreateWorldRaidSeasonManageExcel(FlatBufferBuilder builder,
      long SeasonId = 0,
      long EventContentId = 0,
      SCHALE.Common.FlatData.CurrencyTypes EnterTicket = SCHALE.Common.FlatData.CurrencyTypes.Invalid,
      StringOffset WorldRaidLobbySceneOffset = default(StringOffset),
      StringOffset WorldRaidLobbyBannerOffset = default(StringOffset),
      StringOffset WorldRaidLobbyBGOffset = default(StringOffset),
      bool WorldRaidLobbyBannerShow = false,
      long SeasonOpenCondition = 0,
      long WorldRaidLobbyEnterScenario = 0,
      bool CanPlayNotSeasonTime = false,
      bool WorldRaidUniqueThemeLobbyUI = false,
      StringOffset WorldRaidUniqueThemeNameOffset = default(StringOffset),
      bool CanWorldRaidGemEnter = false,
      bool HideWorldRaidTicketUI = false,
      bool UseWorldRaidCommonToast = false,
      VectorOffset OpenRaidBossGroupIdOffset = default(VectorOffset),
      VectorOffset BossSpawnTimeOffset = default(VectorOffset),
      VectorOffset EliminateTimeOffset = default(VectorOffset),
      VectorOffset ScenarioOutputConditionIdOffset = default(VectorOffset),
      VectorOffset ConditionScenarioGroupidOffset = default(VectorOffset),
      StringOffset WorldRaidMapEnterOperatorOffset = default(StringOffset),
      bool UseFavorRankBuff = false) {
    builder.StartTable(22);
    WorldRaidSeasonManageExcel.AddWorldRaidLobbyEnterScenario(builder, WorldRaidLobbyEnterScenario);
    WorldRaidSeasonManageExcel.AddSeasonOpenCondition(builder, SeasonOpenCondition);
    WorldRaidSeasonManageExcel.AddEventContentId(builder, EventContentId);
    WorldRaidSeasonManageExcel.AddSeasonId(builder, SeasonId);
    WorldRaidSeasonManageExcel.AddWorldRaidMapEnterOperator(builder, WorldRaidMapEnterOperatorOffset);
    WorldRaidSeasonManageExcel.AddConditionScenarioGroupid(builder, ConditionScenarioGroupidOffset);
    WorldRaidSeasonManageExcel.AddScenarioOutputConditionId(builder, ScenarioOutputConditionIdOffset);
    WorldRaidSeasonManageExcel.AddEliminateTime(builder, EliminateTimeOffset);
    WorldRaidSeasonManageExcel.AddBossSpawnTime(builder, BossSpawnTimeOffset);
    WorldRaidSeasonManageExcel.AddOpenRaidBossGroupId(builder, OpenRaidBossGroupIdOffset);
    WorldRaidSeasonManageExcel.AddWorldRaidUniqueThemeName(builder, WorldRaidUniqueThemeNameOffset);
    WorldRaidSeasonManageExcel.AddWorldRaidLobbyBG(builder, WorldRaidLobbyBGOffset);
    WorldRaidSeasonManageExcel.AddWorldRaidLobbyBanner(builder, WorldRaidLobbyBannerOffset);
    WorldRaidSeasonManageExcel.AddWorldRaidLobbyScene(builder, WorldRaidLobbySceneOffset);
    WorldRaidSeasonManageExcel.AddEnterTicket(builder, EnterTicket);
    WorldRaidSeasonManageExcel.AddUseFavorRankBuff(builder, UseFavorRankBuff);
    WorldRaidSeasonManageExcel.AddUseWorldRaidCommonToast(builder, UseWorldRaidCommonToast);
    WorldRaidSeasonManageExcel.AddHideWorldRaidTicketUI(builder, HideWorldRaidTicketUI);
    WorldRaidSeasonManageExcel.AddCanWorldRaidGemEnter(builder, CanWorldRaidGemEnter);
    WorldRaidSeasonManageExcel.AddWorldRaidUniqueThemeLobbyUI(builder, WorldRaidUniqueThemeLobbyUI);
    WorldRaidSeasonManageExcel.AddCanPlayNotSeasonTime(builder, CanPlayNotSeasonTime);
    WorldRaidSeasonManageExcel.AddWorldRaidLobbyBannerShow(builder, WorldRaidLobbyBannerShow);
    return WorldRaidSeasonManageExcel.EndWorldRaidSeasonManageExcel(builder);
  }

  public static void StartWorldRaidSeasonManageExcel(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddSeasonId(FlatBufferBuilder builder, long seasonId) { builder.AddLong(0, seasonId, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(1, eventContentId, 0); }
  public static void AddEnterTicket(FlatBufferBuilder builder, SCHALE.Common.FlatData.CurrencyTypes enterTicket) { builder.AddInt(2, (int)enterTicket, 0); }
  public static void AddWorldRaidLobbyScene(FlatBufferBuilder builder, StringOffset worldRaidLobbySceneOffset) { builder.AddOffset(3, worldRaidLobbySceneOffset.Value, 0); }
  public static void AddWorldRaidLobbyBanner(FlatBufferBuilder builder, StringOffset worldRaidLobbyBannerOffset) { builder.AddOffset(4, worldRaidLobbyBannerOffset.Value, 0); }
  public static void AddWorldRaidLobbyBG(FlatBufferBuilder builder, StringOffset worldRaidLobbyBGOffset) { builder.AddOffset(5, worldRaidLobbyBGOffset.Value, 0); }
  public static void AddWorldRaidLobbyBannerShow(FlatBufferBuilder builder, bool worldRaidLobbyBannerShow) { builder.AddBool(6, worldRaidLobbyBannerShow, false); }
  public static void AddSeasonOpenCondition(FlatBufferBuilder builder, long seasonOpenCondition) { builder.AddLong(7, seasonOpenCondition, 0); }
  public static void AddWorldRaidLobbyEnterScenario(FlatBufferBuilder builder, long worldRaidLobbyEnterScenario) { builder.AddLong(8, worldRaidLobbyEnterScenario, 0); }
  public static void AddCanPlayNotSeasonTime(FlatBufferBuilder builder, bool canPlayNotSeasonTime) { builder.AddBool(9, canPlayNotSeasonTime, false); }
  public static void AddWorldRaidUniqueThemeLobbyUI(FlatBufferBuilder builder, bool worldRaidUniqueThemeLobbyUI) { builder.AddBool(10, worldRaidUniqueThemeLobbyUI, false); }
  public static void AddWorldRaidUniqueThemeName(FlatBufferBuilder builder, StringOffset worldRaidUniqueThemeNameOffset) { builder.AddOffset(11, worldRaidUniqueThemeNameOffset.Value, 0); }
  public static void AddCanWorldRaidGemEnter(FlatBufferBuilder builder, bool canWorldRaidGemEnter) { builder.AddBool(12, canWorldRaidGemEnter, false); }
  public static void AddHideWorldRaidTicketUI(FlatBufferBuilder builder, bool hideWorldRaidTicketUI) { builder.AddBool(13, hideWorldRaidTicketUI, false); }
  public static void AddUseWorldRaidCommonToast(FlatBufferBuilder builder, bool useWorldRaidCommonToast) { builder.AddBool(14, useWorldRaidCommonToast, false); }
  public static void AddOpenRaidBossGroupId(FlatBufferBuilder builder, VectorOffset openRaidBossGroupIdOffset) { builder.AddOffset(15, openRaidBossGroupIdOffset.Value, 0); }
  public static VectorOffset CreateOpenRaidBossGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOpenRaidBossGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOpenRaidBossGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOpenRaidBossGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOpenRaidBossGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBossSpawnTime(FlatBufferBuilder builder, VectorOffset bossSpawnTimeOffset) { builder.AddOffset(16, bossSpawnTimeOffset.Value, 0); }
  public static VectorOffset CreateBossSpawnTimeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBossSpawnTimeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossSpawnTimeVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossSpawnTimeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBossSpawnTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEliminateTime(FlatBufferBuilder builder, VectorOffset eliminateTimeOffset) { builder.AddOffset(17, eliminateTimeOffset.Value, 0); }
  public static VectorOffset CreateEliminateTimeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEliminateTimeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEliminateTimeVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEliminateTimeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEliminateTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScenarioOutputConditionId(FlatBufferBuilder builder, VectorOffset scenarioOutputConditionIdOffset) { builder.AddOffset(18, scenarioOutputConditionIdOffset.Value, 0); }
  public static VectorOffset CreateScenarioOutputConditionIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateScenarioOutputConditionIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScenarioOutputConditionIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScenarioOutputConditionIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartScenarioOutputConditionIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddConditionScenarioGroupid(FlatBufferBuilder builder, VectorOffset conditionScenarioGroupidOffset) { builder.AddOffset(19, conditionScenarioGroupidOffset.Value, 0); }
  public static VectorOffset CreateConditionScenarioGroupidVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionScenarioGroupidVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionScenarioGroupidVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionScenarioGroupidVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionScenarioGroupidVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddWorldRaidMapEnterOperator(FlatBufferBuilder builder, StringOffset worldRaidMapEnterOperatorOffset) { builder.AddOffset(20, worldRaidMapEnterOperatorOffset.Value, 0); }
  public static void AddUseFavorRankBuff(FlatBufferBuilder builder, bool useFavorRankBuff) { builder.AddBool(21, useFavorRankBuff, false); }
  public static Offset<SCHALE.Common.FlatData.WorldRaidSeasonManageExcel> EndWorldRaidSeasonManageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.WorldRaidSeasonManageExcel>(o);
  }
  public WorldRaidSeasonManageExcelT UnPack() {
    var _o = new WorldRaidSeasonManageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WorldRaidSeasonManageExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("WorldRaidSeasonManage");
    _o.SeasonId = TableEncryptionService.Convert(this.SeasonId, key);
    _o.EventContentId = TableEncryptionService.Convert(this.EventContentId, key);
    _o.EnterTicket = TableEncryptionService.Convert(this.EnterTicket, key);
    _o.WorldRaidLobbyScene = TableEncryptionService.Convert(this.WorldRaidLobbyScene, key);
    _o.WorldRaidLobbyBanner = TableEncryptionService.Convert(this.WorldRaidLobbyBanner, key);
    _o.WorldRaidLobbyBG = TableEncryptionService.Convert(this.WorldRaidLobbyBG, key);
    _o.WorldRaidLobbyBannerShow = TableEncryptionService.Convert(this.WorldRaidLobbyBannerShow, key);
    _o.SeasonOpenCondition = TableEncryptionService.Convert(this.SeasonOpenCondition, key);
    _o.WorldRaidLobbyEnterScenario = TableEncryptionService.Convert(this.WorldRaidLobbyEnterScenario, key);
    _o.CanPlayNotSeasonTime = TableEncryptionService.Convert(this.CanPlayNotSeasonTime, key);
    _o.WorldRaidUniqueThemeLobbyUI = TableEncryptionService.Convert(this.WorldRaidUniqueThemeLobbyUI, key);
    _o.WorldRaidUniqueThemeName = TableEncryptionService.Convert(this.WorldRaidUniqueThemeName, key);
    _o.CanWorldRaidGemEnter = TableEncryptionService.Convert(this.CanWorldRaidGemEnter, key);
    _o.HideWorldRaidTicketUI = TableEncryptionService.Convert(this.HideWorldRaidTicketUI, key);
    _o.UseWorldRaidCommonToast = TableEncryptionService.Convert(this.UseWorldRaidCommonToast, key);
    _o.OpenRaidBossGroupId = new List<long>();
    for (var _j = 0; _j < this.OpenRaidBossGroupIdLength; ++_j) {_o.OpenRaidBossGroupId.Add(TableEncryptionService.Convert(this.OpenRaidBossGroupId(_j), key));}
    _o.BossSpawnTime = new List<string>();
    for (var _j = 0; _j < this.BossSpawnTimeLength; ++_j) {_o.BossSpawnTime.Add(TableEncryptionService.Convert(this.BossSpawnTime(_j), key));}
    _o.EliminateTime = new List<string>();
    for (var _j = 0; _j < this.EliminateTimeLength; ++_j) {_o.EliminateTime.Add(TableEncryptionService.Convert(this.EliminateTime(_j), key));}
    _o.ScenarioOutputConditionId = new List<long>();
    for (var _j = 0; _j < this.ScenarioOutputConditionIdLength; ++_j) {_o.ScenarioOutputConditionId.Add(TableEncryptionService.Convert(this.ScenarioOutputConditionId(_j), key));}
    _o.ConditionScenarioGroupid = new List<long>();
    for (var _j = 0; _j < this.ConditionScenarioGroupidLength; ++_j) {_o.ConditionScenarioGroupid.Add(TableEncryptionService.Convert(this.ConditionScenarioGroupid(_j), key));}
    _o.WorldRaidMapEnterOperator = TableEncryptionService.Convert(this.WorldRaidMapEnterOperator, key);
    _o.UseFavorRankBuff = TableEncryptionService.Convert(this.UseFavorRankBuff, key);
  }
  public static Offset<SCHALE.Common.FlatData.WorldRaidSeasonManageExcel> Pack(FlatBufferBuilder builder, WorldRaidSeasonManageExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.WorldRaidSeasonManageExcel>);
    var _WorldRaidLobbyScene = _o.WorldRaidLobbyScene == null ? default(StringOffset) : builder.CreateString(_o.WorldRaidLobbyScene);
    var _WorldRaidLobbyBanner = _o.WorldRaidLobbyBanner == null ? default(StringOffset) : builder.CreateString(_o.WorldRaidLobbyBanner);
    var _WorldRaidLobbyBG = _o.WorldRaidLobbyBG == null ? default(StringOffset) : builder.CreateString(_o.WorldRaidLobbyBG);
    var _WorldRaidUniqueThemeName = _o.WorldRaidUniqueThemeName == null ? default(StringOffset) : builder.CreateString(_o.WorldRaidUniqueThemeName);
    var _OpenRaidBossGroupId = default(VectorOffset);
    if (_o.OpenRaidBossGroupId != null) {
      var __OpenRaidBossGroupId = _o.OpenRaidBossGroupId.ToArray();
      _OpenRaidBossGroupId = CreateOpenRaidBossGroupIdVector(builder, __OpenRaidBossGroupId);
    }
    var _BossSpawnTime = default(VectorOffset);
    if (_o.BossSpawnTime != null) {
      var __BossSpawnTime = new StringOffset[_o.BossSpawnTime.Count];
      for (var _j = 0; _j < __BossSpawnTime.Length; ++_j) { __BossSpawnTime[_j] = builder.CreateString(_o.BossSpawnTime[_j]); }
      _BossSpawnTime = CreateBossSpawnTimeVector(builder, __BossSpawnTime);
    }
    var _EliminateTime = default(VectorOffset);
    if (_o.EliminateTime != null) {
      var __EliminateTime = new StringOffset[_o.EliminateTime.Count];
      for (var _j = 0; _j < __EliminateTime.Length; ++_j) { __EliminateTime[_j] = builder.CreateString(_o.EliminateTime[_j]); }
      _EliminateTime = CreateEliminateTimeVector(builder, __EliminateTime);
    }
    var _ScenarioOutputConditionId = default(VectorOffset);
    if (_o.ScenarioOutputConditionId != null) {
      var __ScenarioOutputConditionId = _o.ScenarioOutputConditionId.ToArray();
      _ScenarioOutputConditionId = CreateScenarioOutputConditionIdVector(builder, __ScenarioOutputConditionId);
    }
    var _ConditionScenarioGroupid = default(VectorOffset);
    if (_o.ConditionScenarioGroupid != null) {
      var __ConditionScenarioGroupid = _o.ConditionScenarioGroupid.ToArray();
      _ConditionScenarioGroupid = CreateConditionScenarioGroupidVector(builder, __ConditionScenarioGroupid);
    }
    var _WorldRaidMapEnterOperator = _o.WorldRaidMapEnterOperator == null ? default(StringOffset) : builder.CreateString(_o.WorldRaidMapEnterOperator);
    return CreateWorldRaidSeasonManageExcel(
      builder,
      _o.SeasonId,
      _o.EventContentId,
      _o.EnterTicket,
      _WorldRaidLobbyScene,
      _WorldRaidLobbyBanner,
      _WorldRaidLobbyBG,
      _o.WorldRaidLobbyBannerShow,
      _o.SeasonOpenCondition,
      _o.WorldRaidLobbyEnterScenario,
      _o.CanPlayNotSeasonTime,
      _o.WorldRaidUniqueThemeLobbyUI,
      _WorldRaidUniqueThemeName,
      _o.CanWorldRaidGemEnter,
      _o.HideWorldRaidTicketUI,
      _o.UseWorldRaidCommonToast,
      _OpenRaidBossGroupId,
      _BossSpawnTime,
      _EliminateTime,
      _ScenarioOutputConditionId,
      _ConditionScenarioGroupid,
      _WorldRaidMapEnterOperator,
      _o.UseFavorRankBuff);
  }
}

public class WorldRaidSeasonManageExcelT
{
  public long SeasonId { get; set; }
  public long EventContentId { get; set; }
  public SCHALE.Common.FlatData.CurrencyTypes EnterTicket { get; set; }
  public string WorldRaidLobbyScene { get; set; }
  public string WorldRaidLobbyBanner { get; set; }
  public string WorldRaidLobbyBG { get; set; }
  public bool WorldRaidLobbyBannerShow { get; set; }
  public long SeasonOpenCondition { get; set; }
  public long WorldRaidLobbyEnterScenario { get; set; }
  public bool CanPlayNotSeasonTime { get; set; }
  public bool WorldRaidUniqueThemeLobbyUI { get; set; }
  public string WorldRaidUniqueThemeName { get; set; }
  public bool CanWorldRaidGemEnter { get; set; }
  public bool HideWorldRaidTicketUI { get; set; }
  public bool UseWorldRaidCommonToast { get; set; }
  public List<long> OpenRaidBossGroupId { get; set; }
  public List<string> BossSpawnTime { get; set; }
  public List<string> EliminateTime { get; set; }
  public List<long> ScenarioOutputConditionId { get; set; }
  public List<long> ConditionScenarioGroupid { get; set; }
  public string WorldRaidMapEnterOperator { get; set; }
  public bool UseFavorRankBuff { get; set; }

  public WorldRaidSeasonManageExcelT() {
    this.SeasonId = 0;
    this.EventContentId = 0;
    this.EnterTicket = SCHALE.Common.FlatData.CurrencyTypes.Invalid;
    this.WorldRaidLobbyScene = null;
    this.WorldRaidLobbyBanner = null;
    this.WorldRaidLobbyBG = null;
    this.WorldRaidLobbyBannerShow = false;
    this.SeasonOpenCondition = 0;
    this.WorldRaidLobbyEnterScenario = 0;
    this.CanPlayNotSeasonTime = false;
    this.WorldRaidUniqueThemeLobbyUI = false;
    this.WorldRaidUniqueThemeName = null;
    this.CanWorldRaidGemEnter = false;
    this.HideWorldRaidTicketUI = false;
    this.UseWorldRaidCommonToast = false;
    this.OpenRaidBossGroupId = null;
    this.BossSpawnTime = null;
    this.EliminateTime = null;
    this.ScenarioOutputConditionId = null;
    this.ConditionScenarioGroupid = null;
    this.WorldRaidMapEnterOperator = null;
    this.UseFavorRankBuff = false;
  }
}


static public class WorldRaidSeasonManageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SeasonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*EnterTicket*/, 4 /*SCHALE.Common.FlatData.CurrencyTypes*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*WorldRaidLobbyScene*/, false)
      && verifier.VerifyString(tablePos, 12 /*WorldRaidLobbyBanner*/, false)
      && verifier.VerifyString(tablePos, 14 /*WorldRaidLobbyBG*/, false)
      && verifier.VerifyField(tablePos, 16 /*WorldRaidLobbyBannerShow*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*SeasonOpenCondition*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*WorldRaidLobbyEnterScenario*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*CanPlayNotSeasonTime*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*WorldRaidUniqueThemeLobbyUI*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 26 /*WorldRaidUniqueThemeName*/, false)
      && verifier.VerifyField(tablePos, 28 /*CanWorldRaidGemEnter*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 30 /*HideWorldRaidTicketUI*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 32 /*UseWorldRaidCommonToast*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*OpenRaidBossGroupId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*BossSpawnTime*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 38 /*EliminateTime*/, false)
      && verifier.VerifyVectorOfData(tablePos, 40 /*ScenarioOutputConditionId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 42 /*ConditionScenarioGroupid*/, 8 /*long*/, false)
      && verifier.VerifyString(tablePos, 44 /*WorldRaidMapEnterOperator*/, false)
      && verifier.VerifyField(tablePos, 46 /*UseFavorRankBuff*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
