// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct CharacterSkillListExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static CharacterSkillListExcel GetRootAsCharacterSkillListExcel(ByteBuffer _bb) { return GetRootAsCharacterSkillListExcel(_bb, new CharacterSkillListExcel()); }
  public static CharacterSkillListExcel GetRootAsCharacterSkillListExcel(ByteBuffer _bb, CharacterSkillListExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterSkillListExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long CharacterSkillListGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MinimumGradeCharacterWeapon { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinimumTierCharacterGear { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FormIndex { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsRootMotion { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsMoveLeftRight { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UseRandomAnimation { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long TSAInteractionId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string NormalSkillGroupId(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NormalSkillGroupIdLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int NormalSkillTimeLineIndex(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NormalSkillTimeLineIndexLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetNormalSkillTimeLineIndexBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetNormalSkillTimeLineIndexBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetNormalSkillTimeLineIndexArray() { return __p.__vector_as_array<int>(22); }
  public string ExSkillGroupId(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExSkillGroupIdLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int ExSkillTimeLineIndex(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ExSkillTimeLineIndexLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetExSkillTimeLineIndexBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetExSkillTimeLineIndexBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetExSkillTimeLineIndexArray() { return __p.__vector_as_array<int>(26); }
  public string PublicSkillGroupId(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PublicSkillGroupIdLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int PublicSkillTimeLineIndex(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PublicSkillTimeLineIndexLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPublicSkillTimeLineIndexBytes() { return __p.__vector_as_span<int>(30, 4); }
#else
  public ArraySegment<byte>? GetPublicSkillTimeLineIndexBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public int[] GetPublicSkillTimeLineIndexArray() { return __p.__vector_as_array<int>(30); }
  public string PassiveSkillGroupId(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PassiveSkillGroupIdLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string LeaderSkillGroupId(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LeaderSkillGroupIdLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ExtraPassiveSkillGroupId(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtraPassiveSkillGroupIdLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string HiddenPassiveSkillGroupId(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int HiddenPassiveSkillGroupIdLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SCHALE.Common.FlatData.CharacterSkillListExcel> CreateCharacterSkillListExcel(FlatBufferBuilder builder,
      long CharacterSkillListGroupId = 0,
      int MinimumGradeCharacterWeapon = 0,
      int MinimumTierCharacterGear = 0,
      int FormIndex = 0,
      bool IsRootMotion = false,
      bool IsMoveLeftRight = false,
      bool UseRandomAnimation = false,
      long TSAInteractionId = 0,
      VectorOffset NormalSkillGroupIdOffset = default(VectorOffset),
      VectorOffset NormalSkillTimeLineIndexOffset = default(VectorOffset),
      VectorOffset ExSkillGroupIdOffset = default(VectorOffset),
      VectorOffset ExSkillTimeLineIndexOffset = default(VectorOffset),
      VectorOffset PublicSkillGroupIdOffset = default(VectorOffset),
      VectorOffset PublicSkillTimeLineIndexOffset = default(VectorOffset),
      VectorOffset PassiveSkillGroupIdOffset = default(VectorOffset),
      VectorOffset LeaderSkillGroupIdOffset = default(VectorOffset),
      VectorOffset ExtraPassiveSkillGroupIdOffset = default(VectorOffset),
      VectorOffset HiddenPassiveSkillGroupIdOffset = default(VectorOffset)) {
    builder.StartTable(18);
    CharacterSkillListExcel.AddTSAInteractionId(builder, TSAInteractionId);
    CharacterSkillListExcel.AddCharacterSkillListGroupId(builder, CharacterSkillListGroupId);
    CharacterSkillListExcel.AddHiddenPassiveSkillGroupId(builder, HiddenPassiveSkillGroupIdOffset);
    CharacterSkillListExcel.AddExtraPassiveSkillGroupId(builder, ExtraPassiveSkillGroupIdOffset);
    CharacterSkillListExcel.AddLeaderSkillGroupId(builder, LeaderSkillGroupIdOffset);
    CharacterSkillListExcel.AddPassiveSkillGroupId(builder, PassiveSkillGroupIdOffset);
    CharacterSkillListExcel.AddPublicSkillTimeLineIndex(builder, PublicSkillTimeLineIndexOffset);
    CharacterSkillListExcel.AddPublicSkillGroupId(builder, PublicSkillGroupIdOffset);
    CharacterSkillListExcel.AddExSkillTimeLineIndex(builder, ExSkillTimeLineIndexOffset);
    CharacterSkillListExcel.AddExSkillGroupId(builder, ExSkillGroupIdOffset);
    CharacterSkillListExcel.AddNormalSkillTimeLineIndex(builder, NormalSkillTimeLineIndexOffset);
    CharacterSkillListExcel.AddNormalSkillGroupId(builder, NormalSkillGroupIdOffset);
    CharacterSkillListExcel.AddFormIndex(builder, FormIndex);
    CharacterSkillListExcel.AddMinimumTierCharacterGear(builder, MinimumTierCharacterGear);
    CharacterSkillListExcel.AddMinimumGradeCharacterWeapon(builder, MinimumGradeCharacterWeapon);
    CharacterSkillListExcel.AddUseRandomAnimation(builder, UseRandomAnimation);
    CharacterSkillListExcel.AddIsMoveLeftRight(builder, IsMoveLeftRight);
    CharacterSkillListExcel.AddIsRootMotion(builder, IsRootMotion);
    return CharacterSkillListExcel.EndCharacterSkillListExcel(builder);
  }

  public static void StartCharacterSkillListExcel(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddCharacterSkillListGroupId(FlatBufferBuilder builder, long characterSkillListGroupId) { builder.AddLong(0, characterSkillListGroupId, 0); }
  public static void AddMinimumGradeCharacterWeapon(FlatBufferBuilder builder, int minimumGradeCharacterWeapon) { builder.AddInt(1, minimumGradeCharacterWeapon, 0); }
  public static void AddMinimumTierCharacterGear(FlatBufferBuilder builder, int minimumTierCharacterGear) { builder.AddInt(2, minimumTierCharacterGear, 0); }
  public static void AddFormIndex(FlatBufferBuilder builder, int formIndex) { builder.AddInt(3, formIndex, 0); }
  public static void AddIsRootMotion(FlatBufferBuilder builder, bool isRootMotion) { builder.AddBool(4, isRootMotion, false); }
  public static void AddIsMoveLeftRight(FlatBufferBuilder builder, bool isMoveLeftRight) { builder.AddBool(5, isMoveLeftRight, false); }
  public static void AddUseRandomAnimation(FlatBufferBuilder builder, bool useRandomAnimation) { builder.AddBool(6, useRandomAnimation, false); }
  public static void AddTSAInteractionId(FlatBufferBuilder builder, long tSAInteractionId) { builder.AddLong(7, tSAInteractionId, 0); }
  public static void AddNormalSkillGroupId(FlatBufferBuilder builder, VectorOffset normalSkillGroupIdOffset) { builder.AddOffset(8, normalSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreateNormalSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNormalSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNormalSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNormalSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNormalSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNormalSkillTimeLineIndex(FlatBufferBuilder builder, VectorOffset normalSkillTimeLineIndexOffset) { builder.AddOffset(9, normalSkillTimeLineIndexOffset.Value, 0); }
  public static VectorOffset CreateNormalSkillTimeLineIndexVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNormalSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNormalSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNormalSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNormalSkillTimeLineIndexVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExSkillGroupId(FlatBufferBuilder builder, VectorOffset exSkillGroupIdOffset) { builder.AddOffset(10, exSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreateExSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExSkillTimeLineIndex(FlatBufferBuilder builder, VectorOffset exSkillTimeLineIndexOffset) { builder.AddOffset(11, exSkillTimeLineIndexOffset.Value, 0); }
  public static VectorOffset CreateExSkillTimeLineIndexVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExSkillTimeLineIndexVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPublicSkillGroupId(FlatBufferBuilder builder, VectorOffset publicSkillGroupIdOffset) { builder.AddOffset(12, publicSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreatePublicSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePublicSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePublicSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePublicSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPublicSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPublicSkillTimeLineIndex(FlatBufferBuilder builder, VectorOffset publicSkillTimeLineIndexOffset) { builder.AddOffset(13, publicSkillTimeLineIndexOffset.Value, 0); }
  public static VectorOffset CreatePublicSkillTimeLineIndexVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePublicSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePublicSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePublicSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPublicSkillTimeLineIndexVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPassiveSkillGroupId(FlatBufferBuilder builder, VectorOffset passiveSkillGroupIdOffset) { builder.AddOffset(14, passiveSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreatePassiveSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPassiveSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLeaderSkillGroupId(FlatBufferBuilder builder, VectorOffset leaderSkillGroupIdOffset) { builder.AddOffset(15, leaderSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreateLeaderSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLeaderSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLeaderSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLeaderSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLeaderSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtraPassiveSkillGroupId(FlatBufferBuilder builder, VectorOffset extraPassiveSkillGroupIdOffset) { builder.AddOffset(16, extraPassiveSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreateExtraPassiveSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtraPassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraPassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraPassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraPassiveSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHiddenPassiveSkillGroupId(FlatBufferBuilder builder, VectorOffset hiddenPassiveSkillGroupIdOffset) { builder.AddOffset(17, hiddenPassiveSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreateHiddenPassiveSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateHiddenPassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHiddenPassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHiddenPassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHiddenPassiveSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SCHALE.Common.FlatData.CharacterSkillListExcel> EndCharacterSkillListExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.CharacterSkillListExcel>(o);
  }
  public CharacterSkillListExcelT UnPack() {
    var _o = new CharacterSkillListExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterSkillListExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("CharacterSkillList");
    _o.CharacterSkillListGroupId = TableEncryptionService.Convert(this.CharacterSkillListGroupId, key);
    _o.MinimumGradeCharacterWeapon = TableEncryptionService.Convert(this.MinimumGradeCharacterWeapon, key);
    _o.MinimumTierCharacterGear = TableEncryptionService.Convert(this.MinimumTierCharacterGear, key);
    _o.FormIndex = TableEncryptionService.Convert(this.FormIndex, key);
    _o.IsRootMotion = TableEncryptionService.Convert(this.IsRootMotion, key);
    _o.IsMoveLeftRight = TableEncryptionService.Convert(this.IsMoveLeftRight, key);
    _o.UseRandomAnimation = TableEncryptionService.Convert(this.UseRandomAnimation, key);
    _o.TSAInteractionId = TableEncryptionService.Convert(this.TSAInteractionId, key);
    _o.NormalSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.NormalSkillGroupIdLength; ++_j) {_o.NormalSkillGroupId.Add(TableEncryptionService.Convert(this.NormalSkillGroupId(_j), key));}
    _o.NormalSkillTimeLineIndex = new List<int>();
    for (var _j = 0; _j < this.NormalSkillTimeLineIndexLength; ++_j) {_o.NormalSkillTimeLineIndex.Add(TableEncryptionService.Convert(this.NormalSkillTimeLineIndex(_j), key));}
    _o.ExSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.ExSkillGroupIdLength; ++_j) {_o.ExSkillGroupId.Add(TableEncryptionService.Convert(this.ExSkillGroupId(_j), key));}
    _o.ExSkillTimeLineIndex = new List<int>();
    for (var _j = 0; _j < this.ExSkillTimeLineIndexLength; ++_j) {_o.ExSkillTimeLineIndex.Add(TableEncryptionService.Convert(this.ExSkillTimeLineIndex(_j), key));}
    _o.PublicSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.PublicSkillGroupIdLength; ++_j) {_o.PublicSkillGroupId.Add(TableEncryptionService.Convert(this.PublicSkillGroupId(_j), key));}
    _o.PublicSkillTimeLineIndex = new List<int>();
    for (var _j = 0; _j < this.PublicSkillTimeLineIndexLength; ++_j) {_o.PublicSkillTimeLineIndex.Add(TableEncryptionService.Convert(this.PublicSkillTimeLineIndex(_j), key));}
    _o.PassiveSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.PassiveSkillGroupIdLength; ++_j) {_o.PassiveSkillGroupId.Add(TableEncryptionService.Convert(this.PassiveSkillGroupId(_j), key));}
    _o.LeaderSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.LeaderSkillGroupIdLength; ++_j) {_o.LeaderSkillGroupId.Add(TableEncryptionService.Convert(this.LeaderSkillGroupId(_j), key));}
    _o.ExtraPassiveSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.ExtraPassiveSkillGroupIdLength; ++_j) {_o.ExtraPassiveSkillGroupId.Add(TableEncryptionService.Convert(this.ExtraPassiveSkillGroupId(_j), key));}
    _o.HiddenPassiveSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.HiddenPassiveSkillGroupIdLength; ++_j) {_o.HiddenPassiveSkillGroupId.Add(TableEncryptionService.Convert(this.HiddenPassiveSkillGroupId(_j), key));}
  }
  public static Offset<SCHALE.Common.FlatData.CharacterSkillListExcel> Pack(FlatBufferBuilder builder, CharacterSkillListExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.CharacterSkillListExcel>);
    var _NormalSkillGroupId = default(VectorOffset);
    if (_o.NormalSkillGroupId != null) {
      var __NormalSkillGroupId = new StringOffset[_o.NormalSkillGroupId.Count];
      for (var _j = 0; _j < __NormalSkillGroupId.Length; ++_j) { __NormalSkillGroupId[_j] = builder.CreateString(_o.NormalSkillGroupId[_j]); }
      _NormalSkillGroupId = CreateNormalSkillGroupIdVector(builder, __NormalSkillGroupId);
    }
    var _NormalSkillTimeLineIndex = default(VectorOffset);
    if (_o.NormalSkillTimeLineIndex != null) {
      var __NormalSkillTimeLineIndex = _o.NormalSkillTimeLineIndex.ToArray();
      _NormalSkillTimeLineIndex = CreateNormalSkillTimeLineIndexVector(builder, __NormalSkillTimeLineIndex);
    }
    var _ExSkillGroupId = default(VectorOffset);
    if (_o.ExSkillGroupId != null) {
      var __ExSkillGroupId = new StringOffset[_o.ExSkillGroupId.Count];
      for (var _j = 0; _j < __ExSkillGroupId.Length; ++_j) { __ExSkillGroupId[_j] = builder.CreateString(_o.ExSkillGroupId[_j]); }
      _ExSkillGroupId = CreateExSkillGroupIdVector(builder, __ExSkillGroupId);
    }
    var _ExSkillTimeLineIndex = default(VectorOffset);
    if (_o.ExSkillTimeLineIndex != null) {
      var __ExSkillTimeLineIndex = _o.ExSkillTimeLineIndex.ToArray();
      _ExSkillTimeLineIndex = CreateExSkillTimeLineIndexVector(builder, __ExSkillTimeLineIndex);
    }
    var _PublicSkillGroupId = default(VectorOffset);
    if (_o.PublicSkillGroupId != null) {
      var __PublicSkillGroupId = new StringOffset[_o.PublicSkillGroupId.Count];
      for (var _j = 0; _j < __PublicSkillGroupId.Length; ++_j) { __PublicSkillGroupId[_j] = builder.CreateString(_o.PublicSkillGroupId[_j]); }
      _PublicSkillGroupId = CreatePublicSkillGroupIdVector(builder, __PublicSkillGroupId);
    }
    var _PublicSkillTimeLineIndex = default(VectorOffset);
    if (_o.PublicSkillTimeLineIndex != null) {
      var __PublicSkillTimeLineIndex = _o.PublicSkillTimeLineIndex.ToArray();
      _PublicSkillTimeLineIndex = CreatePublicSkillTimeLineIndexVector(builder, __PublicSkillTimeLineIndex);
    }
    var _PassiveSkillGroupId = default(VectorOffset);
    if (_o.PassiveSkillGroupId != null) {
      var __PassiveSkillGroupId = new StringOffset[_o.PassiveSkillGroupId.Count];
      for (var _j = 0; _j < __PassiveSkillGroupId.Length; ++_j) { __PassiveSkillGroupId[_j] = builder.CreateString(_o.PassiveSkillGroupId[_j]); }
      _PassiveSkillGroupId = CreatePassiveSkillGroupIdVector(builder, __PassiveSkillGroupId);
    }
    var _LeaderSkillGroupId = default(VectorOffset);
    if (_o.LeaderSkillGroupId != null) {
      var __LeaderSkillGroupId = new StringOffset[_o.LeaderSkillGroupId.Count];
      for (var _j = 0; _j < __LeaderSkillGroupId.Length; ++_j) { __LeaderSkillGroupId[_j] = builder.CreateString(_o.LeaderSkillGroupId[_j]); }
      _LeaderSkillGroupId = CreateLeaderSkillGroupIdVector(builder, __LeaderSkillGroupId);
    }
    var _ExtraPassiveSkillGroupId = default(VectorOffset);
    if (_o.ExtraPassiveSkillGroupId != null) {
      var __ExtraPassiveSkillGroupId = new StringOffset[_o.ExtraPassiveSkillGroupId.Count];
      for (var _j = 0; _j < __ExtraPassiveSkillGroupId.Length; ++_j) { __ExtraPassiveSkillGroupId[_j] = builder.CreateString(_o.ExtraPassiveSkillGroupId[_j]); }
      _ExtraPassiveSkillGroupId = CreateExtraPassiveSkillGroupIdVector(builder, __ExtraPassiveSkillGroupId);
    }
    var _HiddenPassiveSkillGroupId = default(VectorOffset);
    if (_o.HiddenPassiveSkillGroupId != null) {
      var __HiddenPassiveSkillGroupId = new StringOffset[_o.HiddenPassiveSkillGroupId.Count];
      for (var _j = 0; _j < __HiddenPassiveSkillGroupId.Length; ++_j) { __HiddenPassiveSkillGroupId[_j] = builder.CreateString(_o.HiddenPassiveSkillGroupId[_j]); }
      _HiddenPassiveSkillGroupId = CreateHiddenPassiveSkillGroupIdVector(builder, __HiddenPassiveSkillGroupId);
    }
    return CreateCharacterSkillListExcel(
      builder,
      _o.CharacterSkillListGroupId,
      _o.MinimumGradeCharacterWeapon,
      _o.MinimumTierCharacterGear,
      _o.FormIndex,
      _o.IsRootMotion,
      _o.IsMoveLeftRight,
      _o.UseRandomAnimation,
      _o.TSAInteractionId,
      _NormalSkillGroupId,
      _NormalSkillTimeLineIndex,
      _ExSkillGroupId,
      _ExSkillTimeLineIndex,
      _PublicSkillGroupId,
      _PublicSkillTimeLineIndex,
      _PassiveSkillGroupId,
      _LeaderSkillGroupId,
      _ExtraPassiveSkillGroupId,
      _HiddenPassiveSkillGroupId);
  }
}

public class CharacterSkillListExcelT
{
  public long CharacterSkillListGroupId { get; set; }
  public int MinimumGradeCharacterWeapon { get; set; }
  public int MinimumTierCharacterGear { get; set; }
  public int FormIndex { get; set; }
  public bool IsRootMotion { get; set; }
  public bool IsMoveLeftRight { get; set; }
  public bool UseRandomAnimation { get; set; }
  public long TSAInteractionId { get; set; }
  public List<string> NormalSkillGroupId { get; set; }
  public List<int> NormalSkillTimeLineIndex { get; set; }
  public List<string> ExSkillGroupId { get; set; }
  public List<int> ExSkillTimeLineIndex { get; set; }
  public List<string> PublicSkillGroupId { get; set; }
  public List<int> PublicSkillTimeLineIndex { get; set; }
  public List<string> PassiveSkillGroupId { get; set; }
  public List<string> LeaderSkillGroupId { get; set; }
  public List<string> ExtraPassiveSkillGroupId { get; set; }
  public List<string> HiddenPassiveSkillGroupId { get; set; }

  public CharacterSkillListExcelT() {
    this.CharacterSkillListGroupId = 0;
    this.MinimumGradeCharacterWeapon = 0;
    this.MinimumTierCharacterGear = 0;
    this.FormIndex = 0;
    this.IsRootMotion = false;
    this.IsMoveLeftRight = false;
    this.UseRandomAnimation = false;
    this.TSAInteractionId = 0;
    this.NormalSkillGroupId = null;
    this.NormalSkillTimeLineIndex = null;
    this.ExSkillGroupId = null;
    this.ExSkillTimeLineIndex = null;
    this.PublicSkillGroupId = null;
    this.PublicSkillTimeLineIndex = null;
    this.PassiveSkillGroupId = null;
    this.LeaderSkillGroupId = null;
    this.ExtraPassiveSkillGroupId = null;
    this.HiddenPassiveSkillGroupId = null;
  }
}


static public class CharacterSkillListExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CharacterSkillListGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*MinimumGradeCharacterWeapon*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MinimumTierCharacterGear*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*FormIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*IsRootMotion*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*IsMoveLeftRight*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*UseRandomAnimation*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*TSAInteractionId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 20 /*NormalSkillGroupId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*NormalSkillTimeLineIndex*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*ExSkillGroupId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*ExSkillTimeLineIndex*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 28 /*PublicSkillGroupId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 30 /*PublicSkillTimeLineIndex*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*PassiveSkillGroupId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*LeaderSkillGroupId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*ExtraPassiveSkillGroupId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 38 /*HiddenPassiveSkillGroupId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
