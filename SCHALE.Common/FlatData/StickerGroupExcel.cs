// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct StickerGroupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static StickerGroupExcel GetRootAsStickerGroupExcel(ByteBuffer _bb) { return GetRootAsStickerGroupExcel(_bb, new StickerGroupExcel()); }
  public static StickerGroupExcel GetRootAsStickerGroupExcel(ByteBuffer _bb, StickerGroupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StickerGroupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Layout { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLayoutBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetLayoutBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetLayoutArray() { return __p.__vector_as_array<byte>(6); }
  public string UniqueLayoutPath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUniqueLayoutPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetUniqueLayoutPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetUniqueLayoutPathArray() { return __p.__vector_as_array<byte>(8); }
  public string StickerGroupIconpath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStickerGroupIconpathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetStickerGroupIconpathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetStickerGroupIconpathArray() { return __p.__vector_as_array<byte>(10); }
  public long PageCompleteSlot { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.ParcelType PageCompleteRewardParcelType { get { int o = __p.__offset(14); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.ParcelType.None; } }
  public long PageCompleteRewardParcelId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int PageCompleteRewardAmount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public uint LocalizeTitle { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint LocalizeDescription { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string StickerGroupCoverpath { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStickerGroupCoverpathBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetStickerGroupCoverpathBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetStickerGroupCoverpathArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<SCHALE.Common.FlatData.StickerGroupExcel> CreateStickerGroupExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset LayoutOffset = default(StringOffset),
      StringOffset UniqueLayoutPathOffset = default(StringOffset),
      StringOffset StickerGroupIconpathOffset = default(StringOffset),
      long PageCompleteSlot = 0,
      SCHALE.Common.FlatData.ParcelType PageCompleteRewardParcelType = SCHALE.Common.FlatData.ParcelType.None,
      long PageCompleteRewardParcelId = 0,
      int PageCompleteRewardAmount = 0,
      uint LocalizeTitle = 0,
      uint LocalizeDescription = 0,
      StringOffset StickerGroupCoverpathOffset = default(StringOffset)) {
    builder.StartTable(11);
    StickerGroupExcel.AddPageCompleteRewardParcelId(builder, PageCompleteRewardParcelId);
    StickerGroupExcel.AddPageCompleteSlot(builder, PageCompleteSlot);
    StickerGroupExcel.AddId(builder, Id);
    StickerGroupExcel.AddStickerGroupCoverpath(builder, StickerGroupCoverpathOffset);
    StickerGroupExcel.AddLocalizeDescription(builder, LocalizeDescription);
    StickerGroupExcel.AddLocalizeTitle(builder, LocalizeTitle);
    StickerGroupExcel.AddPageCompleteRewardAmount(builder, PageCompleteRewardAmount);
    StickerGroupExcel.AddPageCompleteRewardParcelType(builder, PageCompleteRewardParcelType);
    StickerGroupExcel.AddStickerGroupIconpath(builder, StickerGroupIconpathOffset);
    StickerGroupExcel.AddUniqueLayoutPath(builder, UniqueLayoutPathOffset);
    StickerGroupExcel.AddLayout(builder, LayoutOffset);
    return StickerGroupExcel.EndStickerGroupExcel(builder);
  }

  public static void StartStickerGroupExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddLayout(FlatBufferBuilder builder, StringOffset layoutOffset) { builder.AddOffset(1, layoutOffset.Value, 0); }
  public static void AddUniqueLayoutPath(FlatBufferBuilder builder, StringOffset uniqueLayoutPathOffset) { builder.AddOffset(2, uniqueLayoutPathOffset.Value, 0); }
  public static void AddStickerGroupIconpath(FlatBufferBuilder builder, StringOffset stickerGroupIconpathOffset) { builder.AddOffset(3, stickerGroupIconpathOffset.Value, 0); }
  public static void AddPageCompleteSlot(FlatBufferBuilder builder, long pageCompleteSlot) { builder.AddLong(4, pageCompleteSlot, 0); }
  public static void AddPageCompleteRewardParcelType(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType pageCompleteRewardParcelType) { builder.AddInt(5, (int)pageCompleteRewardParcelType, 0); }
  public static void AddPageCompleteRewardParcelId(FlatBufferBuilder builder, long pageCompleteRewardParcelId) { builder.AddLong(6, pageCompleteRewardParcelId, 0); }
  public static void AddPageCompleteRewardAmount(FlatBufferBuilder builder, int pageCompleteRewardAmount) { builder.AddInt(7, pageCompleteRewardAmount, 0); }
  public static void AddLocalizeTitle(FlatBufferBuilder builder, uint localizeTitle) { builder.AddUint(8, localizeTitle, 0); }
  public static void AddLocalizeDescription(FlatBufferBuilder builder, uint localizeDescription) { builder.AddUint(9, localizeDescription, 0); }
  public static void AddStickerGroupCoverpath(FlatBufferBuilder builder, StringOffset stickerGroupCoverpathOffset) { builder.AddOffset(10, stickerGroupCoverpathOffset.Value, 0); }
  public static Offset<SCHALE.Common.FlatData.StickerGroupExcel> EndStickerGroupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.StickerGroupExcel>(o);
  }
  public StickerGroupExcelT UnPack() {
    var _o = new StickerGroupExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StickerGroupExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("StickerGroup");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.Layout = TableEncryptionService.Convert(this.Layout, key);
    _o.UniqueLayoutPath = TableEncryptionService.Convert(this.UniqueLayoutPath, key);
    _o.StickerGroupIconpath = TableEncryptionService.Convert(this.StickerGroupIconpath, key);
    _o.PageCompleteSlot = TableEncryptionService.Convert(this.PageCompleteSlot, key);
    _o.PageCompleteRewardParcelType = TableEncryptionService.Convert(this.PageCompleteRewardParcelType, key);
    _o.PageCompleteRewardParcelId = TableEncryptionService.Convert(this.PageCompleteRewardParcelId, key);
    _o.PageCompleteRewardAmount = TableEncryptionService.Convert(this.PageCompleteRewardAmount, key);
    _o.LocalizeTitle = TableEncryptionService.Convert(this.LocalizeTitle, key);
    _o.LocalizeDescription = TableEncryptionService.Convert(this.LocalizeDescription, key);
    _o.StickerGroupCoverpath = TableEncryptionService.Convert(this.StickerGroupCoverpath, key);
  }
  public static Offset<SCHALE.Common.FlatData.StickerGroupExcel> Pack(FlatBufferBuilder builder, StickerGroupExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.StickerGroupExcel>);
    var _Layout = _o.Layout == null ? default(StringOffset) : builder.CreateString(_o.Layout);
    var _UniqueLayoutPath = _o.UniqueLayoutPath == null ? default(StringOffset) : builder.CreateString(_o.UniqueLayoutPath);
    var _StickerGroupIconpath = _o.StickerGroupIconpath == null ? default(StringOffset) : builder.CreateString(_o.StickerGroupIconpath);
    var _StickerGroupCoverpath = _o.StickerGroupCoverpath == null ? default(StringOffset) : builder.CreateString(_o.StickerGroupCoverpath);
    return CreateStickerGroupExcel(
      builder,
      _o.Id,
      _Layout,
      _UniqueLayoutPath,
      _StickerGroupIconpath,
      _o.PageCompleteSlot,
      _o.PageCompleteRewardParcelType,
      _o.PageCompleteRewardParcelId,
      _o.PageCompleteRewardAmount,
      _o.LocalizeTitle,
      _o.LocalizeDescription,
      _StickerGroupCoverpath);
  }
}

public class StickerGroupExcelT
{
  public long Id { get; set; }
  public string Layout { get; set; }
  public string UniqueLayoutPath { get; set; }
  public string StickerGroupIconpath { get; set; }
  public long PageCompleteSlot { get; set; }
  public SCHALE.Common.FlatData.ParcelType PageCompleteRewardParcelType { get; set; }
  public long PageCompleteRewardParcelId { get; set; }
  public int PageCompleteRewardAmount { get; set; }
  public uint LocalizeTitle { get; set; }
  public uint LocalizeDescription { get; set; }
  public string StickerGroupCoverpath { get; set; }

  public StickerGroupExcelT() {
    this.Id = 0;
    this.Layout = null;
    this.UniqueLayoutPath = null;
    this.StickerGroupIconpath = null;
    this.PageCompleteSlot = 0;
    this.PageCompleteRewardParcelType = SCHALE.Common.FlatData.ParcelType.None;
    this.PageCompleteRewardParcelId = 0;
    this.PageCompleteRewardAmount = 0;
    this.LocalizeTitle = 0;
    this.LocalizeDescription = 0;
    this.StickerGroupCoverpath = null;
  }
}


static public class StickerGroupExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*Layout*/, false)
      && verifier.VerifyString(tablePos, 8 /*UniqueLayoutPath*/, false)
      && verifier.VerifyString(tablePos, 10 /*StickerGroupIconpath*/, false)
      && verifier.VerifyField(tablePos, 12 /*PageCompleteSlot*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*PageCompleteRewardParcelType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*PageCompleteRewardParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*PageCompleteRewardAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*LocalizeTitle*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*LocalizeDescription*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 24 /*StickerGroupCoverpath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
