// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct ConstConquestExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ConstConquestExcel GetRootAsConstConquestExcel(ByteBuffer _bb) { return GetRootAsConstConquestExcel(_bb, new ConstConquestExcel()); }
  public static ConstConquestExcel GetRootAsConstConquestExcel(ByteBuffer _bb, ConstConquestExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstConquestExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ManageUnitChange { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AssistCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PlayTimeLimitInSeconds { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AnimationUnitAmountMin { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AnimationUnitAmountMax { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float AnimationUnitDelay { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<SCHALE.Common.FlatData.ConstConquestExcel> CreateConstConquestExcel(FlatBufferBuilder builder,
      int ManageUnitChange = 0,
      int AssistCount = 0,
      int PlayTimeLimitInSeconds = 0,
      int AnimationUnitAmountMin = 0,
      int AnimationUnitAmountMax = 0,
      float AnimationUnitDelay = 0.0f) {
    builder.StartTable(6);
    ConstConquestExcel.AddAnimationUnitDelay(builder, AnimationUnitDelay);
    ConstConquestExcel.AddAnimationUnitAmountMax(builder, AnimationUnitAmountMax);
    ConstConquestExcel.AddAnimationUnitAmountMin(builder, AnimationUnitAmountMin);
    ConstConquestExcel.AddPlayTimeLimitInSeconds(builder, PlayTimeLimitInSeconds);
    ConstConquestExcel.AddAssistCount(builder, AssistCount);
    ConstConquestExcel.AddManageUnitChange(builder, ManageUnitChange);
    return ConstConquestExcel.EndConstConquestExcel(builder);
  }

  public static void StartConstConquestExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddManageUnitChange(FlatBufferBuilder builder, int manageUnitChange) { builder.AddInt(0, manageUnitChange, 0); }
  public static void AddAssistCount(FlatBufferBuilder builder, int assistCount) { builder.AddInt(1, assistCount, 0); }
  public static void AddPlayTimeLimitInSeconds(FlatBufferBuilder builder, int playTimeLimitInSeconds) { builder.AddInt(2, playTimeLimitInSeconds, 0); }
  public static void AddAnimationUnitAmountMin(FlatBufferBuilder builder, int animationUnitAmountMin) { builder.AddInt(3, animationUnitAmountMin, 0); }
  public static void AddAnimationUnitAmountMax(FlatBufferBuilder builder, int animationUnitAmountMax) { builder.AddInt(4, animationUnitAmountMax, 0); }
  public static void AddAnimationUnitDelay(FlatBufferBuilder builder, float animationUnitDelay) { builder.AddFloat(5, animationUnitDelay, 0.0f); }
  public static Offset<SCHALE.Common.FlatData.ConstConquestExcel> EndConstConquestExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.ConstConquestExcel>(o);
  }
  public ConstConquestExcelT UnPack() {
    var _o = new ConstConquestExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConstConquestExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ConstConquest");
    _o.ManageUnitChange = TableEncryptionService.Convert(this.ManageUnitChange, key);
    _o.AssistCount = TableEncryptionService.Convert(this.AssistCount, key);
    _o.PlayTimeLimitInSeconds = TableEncryptionService.Convert(this.PlayTimeLimitInSeconds, key);
    _o.AnimationUnitAmountMin = TableEncryptionService.Convert(this.AnimationUnitAmountMin, key);
    _o.AnimationUnitAmountMax = TableEncryptionService.Convert(this.AnimationUnitAmountMax, key);
    _o.AnimationUnitDelay = TableEncryptionService.Convert(this.AnimationUnitDelay, key);
  }
  public static Offset<SCHALE.Common.FlatData.ConstConquestExcel> Pack(FlatBufferBuilder builder, ConstConquestExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.ConstConquestExcel>);
    return CreateConstConquestExcel(
      builder,
      _o.ManageUnitChange,
      _o.AssistCount,
      _o.PlayTimeLimitInSeconds,
      _o.AnimationUnitAmountMin,
      _o.AnimationUnitAmountMax,
      _o.AnimationUnitDelay);
  }
}

public class ConstConquestExcelT
{
  public int ManageUnitChange { get; set; }
  public int AssistCount { get; set; }
  public int PlayTimeLimitInSeconds { get; set; }
  public int AnimationUnitAmountMin { get; set; }
  public int AnimationUnitAmountMax { get; set; }
  public float AnimationUnitDelay { get; set; }

  public ConstConquestExcelT() {
    this.ManageUnitChange = 0;
    this.AssistCount = 0;
    this.PlayTimeLimitInSeconds = 0;
    this.AnimationUnitAmountMin = 0;
    this.AnimationUnitAmountMax = 0;
    this.AnimationUnitDelay = 0.0f;
  }
}


static public class ConstConquestExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ManageUnitChange*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*AssistCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*PlayTimeLimitInSeconds*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*AnimationUnitAmountMin*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*AnimationUnitAmountMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*AnimationUnitDelay*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
