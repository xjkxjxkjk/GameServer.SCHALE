// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct TimeAttackDungeonExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static TimeAttackDungeonExcel GetRootAsTimeAttackDungeonExcel(ByteBuffer _bb) { return GetRootAsTimeAttackDungeonExcel(_bb, new TimeAttackDungeonExcel()); }
  public static TimeAttackDungeonExcel GetRootAsTimeAttackDungeonExcel(ByteBuffer _bb, TimeAttackDungeonExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TimeAttackDungeonExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.TimeAttackDungeonType TimeAttackDungeonType { get { int o = __p.__offset(6); return o != 0 ? (SCHALE.Common.FlatData.TimeAttackDungeonType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.TimeAttackDungeonType.None; } }
  public uint LocalizeEtcKey { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string IconPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(10); }
  public long InformationGroupID { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SCHALE.Common.FlatData.TimeAttackDungeonExcel> CreateTimeAttackDungeonExcel(FlatBufferBuilder builder,
      long Id = 0,
      SCHALE.Common.FlatData.TimeAttackDungeonType TimeAttackDungeonType = SCHALE.Common.FlatData.TimeAttackDungeonType.None,
      uint LocalizeEtcKey = 0,
      StringOffset IconPathOffset = default(StringOffset),
      long InformationGroupID = 0) {
    builder.StartTable(5);
    TimeAttackDungeonExcel.AddInformationGroupID(builder, InformationGroupID);
    TimeAttackDungeonExcel.AddId(builder, Id);
    TimeAttackDungeonExcel.AddIconPath(builder, IconPathOffset);
    TimeAttackDungeonExcel.AddLocalizeEtcKey(builder, LocalizeEtcKey);
    TimeAttackDungeonExcel.AddTimeAttackDungeonType(builder, TimeAttackDungeonType);
    return TimeAttackDungeonExcel.EndTimeAttackDungeonExcel(builder);
  }

  public static void StartTimeAttackDungeonExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddTimeAttackDungeonType(FlatBufferBuilder builder, SCHALE.Common.FlatData.TimeAttackDungeonType timeAttackDungeonType) { builder.AddInt(1, (int)timeAttackDungeonType, 0); }
  public static void AddLocalizeEtcKey(FlatBufferBuilder builder, uint localizeEtcKey) { builder.AddUint(2, localizeEtcKey, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset iconPathOffset) { builder.AddOffset(3, iconPathOffset.Value, 0); }
  public static void AddInformationGroupID(FlatBufferBuilder builder, long informationGroupID) { builder.AddLong(4, informationGroupID, 0); }
  public static Offset<SCHALE.Common.FlatData.TimeAttackDungeonExcel> EndTimeAttackDungeonExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.TimeAttackDungeonExcel>(o);
  }
  public TimeAttackDungeonExcelT UnPack() {
    var _o = new TimeAttackDungeonExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TimeAttackDungeonExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("TimeAttackDungeon");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.TimeAttackDungeonType = TableEncryptionService.Convert(this.TimeAttackDungeonType, key);
    _o.LocalizeEtcKey = TableEncryptionService.Convert(this.LocalizeEtcKey, key);
    _o.IconPath = TableEncryptionService.Convert(this.IconPath, key);
    _o.InformationGroupID = TableEncryptionService.Convert(this.InformationGroupID, key);
  }
  public static Offset<SCHALE.Common.FlatData.TimeAttackDungeonExcel> Pack(FlatBufferBuilder builder, TimeAttackDungeonExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.TimeAttackDungeonExcel>);
    var _IconPath = _o.IconPath == null ? default(StringOffset) : builder.CreateString(_o.IconPath);
    return CreateTimeAttackDungeonExcel(
      builder,
      _o.Id,
      _o.TimeAttackDungeonType,
      _o.LocalizeEtcKey,
      _IconPath,
      _o.InformationGroupID);
  }
}

public class TimeAttackDungeonExcelT
{
  public long Id { get; set; }
  public SCHALE.Common.FlatData.TimeAttackDungeonType TimeAttackDungeonType { get; set; }
  public uint LocalizeEtcKey { get; set; }
  public string IconPath { get; set; }
  public long InformationGroupID { get; set; }

  public TimeAttackDungeonExcelT() {
    this.Id = 0;
    this.TimeAttackDungeonType = SCHALE.Common.FlatData.TimeAttackDungeonType.None;
    this.LocalizeEtcKey = 0;
    this.IconPath = null;
    this.InformationGroupID = 0;
  }
}


static public class TimeAttackDungeonExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*TimeAttackDungeonType*/, 4 /*SCHALE.Common.FlatData.TimeAttackDungeonType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*LocalizeEtcKey*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*IconPath*/, false)
      && verifier.VerifyField(tablePos, 12 /*InformationGroupID*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
