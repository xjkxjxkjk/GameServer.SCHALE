// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct GuideMissionSeasonExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GuideMissionSeasonExcel GetRootAsGuideMissionSeasonExcel(ByteBuffer _bb) { return GetRootAsGuideMissionSeasonExcel(_bb, new GuideMissionSeasonExcel()); }
  public static GuideMissionSeasonExcel GetRootAsGuideMissionSeasonExcel(ByteBuffer _bb, GuideMissionSeasonExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GuideMissionSeasonExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string TitleLocalizeCode { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleLocalizeCodeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTitleLocalizeCodeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTitleLocalizeCodeArray() { return __p.__vector_as_array<byte>(6); }
  public string PermanentInfomationLocalizeCode { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPermanentInfomationLocalizeCodeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPermanentInfomationLocalizeCodeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPermanentInfomationLocalizeCodeArray() { return __p.__vector_as_array<byte>(8); }
  public string InfomationLocalizeCode { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInfomationLocalizeCodeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetInfomationLocalizeCodeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetInfomationLocalizeCodeArray() { return __p.__vector_as_array<byte>(10); }
  public SCHALE.Common.FlatData.AccountState AccountType { get { int o = __p.__offset(12); return o != 0 ? (SCHALE.Common.FlatData.AccountState)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.AccountState.WaitingSignIn; } }
  public bool Enabled { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string BannerOpenDate { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBannerOpenDateBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetBannerOpenDateBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetBannerOpenDateArray() { return __p.__vector_as_array<byte>(16); }
  public string StartDate { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartDateBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetStartDateBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetStartDateArray() { return __p.__vector_as_array<byte>(18); }
  public string StartableEndDate { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartableEndDateBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetStartableEndDateBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetStartableEndDateArray() { return __p.__vector_as_array<byte>(20); }
  public string EndDate { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndDateBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetEndDateBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetEndDateArray() { return __p.__vector_as_array<byte>(22); }
  public bool CloseBannerAfterCompletion { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long MaximumLoginCount { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ExpiryDate { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SpineCharacterId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string RequirementParcelImage { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRequirementParcelImageBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetRequirementParcelImageBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetRequirementParcelImageArray() { return __p.__vector_as_array<byte>(32); }
  public string RewardImage { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRewardImageBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetRewardImageBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetRewardImageArray() { return __p.__vector_as_array<byte>(34); }
  public string LobbyBannerImage { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLobbyBannerImageBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetLobbyBannerImageBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetLobbyBannerImageArray() { return __p.__vector_as_array<byte>(36); }
  public string BackgroundImage { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBackgroundImageBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetBackgroundImageBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetBackgroundImageArray() { return __p.__vector_as_array<byte>(38); }
  public string TitleImage { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleImageBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetTitleImageBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetTitleImageArray() { return __p.__vector_as_array<byte>(40); }
  public SCHALE.Common.FlatData.ParcelType RequirementParcelType { get { int o = __p.__offset(42); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.ParcelType.None; } }
  public long RequirementParcelId { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int RequirementParcelAmount { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public SCHALE.Common.FlatData.GuideMissionTabType TabType { get { int o = __p.__offset(48); return o != 0 ? (SCHALE.Common.FlatData.GuideMissionTabType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.GuideMissionTabType.None; } }
  public bool IsPermanent { get { int o = __p.__offset(50); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long PreSeasonId { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SCHALE.Common.FlatData.GuideMissionSeasonExcel> CreateGuideMissionSeasonExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset TitleLocalizeCodeOffset = default(StringOffset),
      StringOffset PermanentInfomationLocalizeCodeOffset = default(StringOffset),
      StringOffset InfomationLocalizeCodeOffset = default(StringOffset),
      SCHALE.Common.FlatData.AccountState AccountType = SCHALE.Common.FlatData.AccountState.WaitingSignIn,
      bool Enabled = false,
      StringOffset BannerOpenDateOffset = default(StringOffset),
      StringOffset StartDateOffset = default(StringOffset),
      StringOffset StartableEndDateOffset = default(StringOffset),
      StringOffset EndDateOffset = default(StringOffset),
      bool CloseBannerAfterCompletion = false,
      long MaximumLoginCount = 0,
      long ExpiryDate = 0,
      long SpineCharacterId = 0,
      StringOffset RequirementParcelImageOffset = default(StringOffset),
      StringOffset RewardImageOffset = default(StringOffset),
      StringOffset LobbyBannerImageOffset = default(StringOffset),
      StringOffset BackgroundImageOffset = default(StringOffset),
      StringOffset TitleImageOffset = default(StringOffset),
      SCHALE.Common.FlatData.ParcelType RequirementParcelType = SCHALE.Common.FlatData.ParcelType.None,
      long RequirementParcelId = 0,
      int RequirementParcelAmount = 0,
      SCHALE.Common.FlatData.GuideMissionTabType TabType = SCHALE.Common.FlatData.GuideMissionTabType.None,
      bool IsPermanent = false,
      long PreSeasonId = 0) {
    builder.StartTable(25);
    GuideMissionSeasonExcel.AddPreSeasonId(builder, PreSeasonId);
    GuideMissionSeasonExcel.AddRequirementParcelId(builder, RequirementParcelId);
    GuideMissionSeasonExcel.AddSpineCharacterId(builder, SpineCharacterId);
    GuideMissionSeasonExcel.AddExpiryDate(builder, ExpiryDate);
    GuideMissionSeasonExcel.AddMaximumLoginCount(builder, MaximumLoginCount);
    GuideMissionSeasonExcel.AddId(builder, Id);
    GuideMissionSeasonExcel.AddTabType(builder, TabType);
    GuideMissionSeasonExcel.AddRequirementParcelAmount(builder, RequirementParcelAmount);
    GuideMissionSeasonExcel.AddRequirementParcelType(builder, RequirementParcelType);
    GuideMissionSeasonExcel.AddTitleImage(builder, TitleImageOffset);
    GuideMissionSeasonExcel.AddBackgroundImage(builder, BackgroundImageOffset);
    GuideMissionSeasonExcel.AddLobbyBannerImage(builder, LobbyBannerImageOffset);
    GuideMissionSeasonExcel.AddRewardImage(builder, RewardImageOffset);
    GuideMissionSeasonExcel.AddRequirementParcelImage(builder, RequirementParcelImageOffset);
    GuideMissionSeasonExcel.AddEndDate(builder, EndDateOffset);
    GuideMissionSeasonExcel.AddStartableEndDate(builder, StartableEndDateOffset);
    GuideMissionSeasonExcel.AddStartDate(builder, StartDateOffset);
    GuideMissionSeasonExcel.AddBannerOpenDate(builder, BannerOpenDateOffset);
    GuideMissionSeasonExcel.AddAccountType(builder, AccountType);
    GuideMissionSeasonExcel.AddInfomationLocalizeCode(builder, InfomationLocalizeCodeOffset);
    GuideMissionSeasonExcel.AddPermanentInfomationLocalizeCode(builder, PermanentInfomationLocalizeCodeOffset);
    GuideMissionSeasonExcel.AddTitleLocalizeCode(builder, TitleLocalizeCodeOffset);
    GuideMissionSeasonExcel.AddIsPermanent(builder, IsPermanent);
    GuideMissionSeasonExcel.AddCloseBannerAfterCompletion(builder, CloseBannerAfterCompletion);
    GuideMissionSeasonExcel.AddEnabled(builder, Enabled);
    return GuideMissionSeasonExcel.EndGuideMissionSeasonExcel(builder);
  }

  public static void StartGuideMissionSeasonExcel(FlatBufferBuilder builder) { builder.StartTable(25); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddTitleLocalizeCode(FlatBufferBuilder builder, StringOffset titleLocalizeCodeOffset) { builder.AddOffset(1, titleLocalizeCodeOffset.Value, 0); }
  public static void AddPermanentInfomationLocalizeCode(FlatBufferBuilder builder, StringOffset permanentInfomationLocalizeCodeOffset) { builder.AddOffset(2, permanentInfomationLocalizeCodeOffset.Value, 0); }
  public static void AddInfomationLocalizeCode(FlatBufferBuilder builder, StringOffset infomationLocalizeCodeOffset) { builder.AddOffset(3, infomationLocalizeCodeOffset.Value, 0); }
  public static void AddAccountType(FlatBufferBuilder builder, SCHALE.Common.FlatData.AccountState accountType) { builder.AddInt(4, (int)accountType, 0); }
  public static void AddEnabled(FlatBufferBuilder builder, bool enabled) { builder.AddBool(5, enabled, false); }
  public static void AddBannerOpenDate(FlatBufferBuilder builder, StringOffset bannerOpenDateOffset) { builder.AddOffset(6, bannerOpenDateOffset.Value, 0); }
  public static void AddStartDate(FlatBufferBuilder builder, StringOffset startDateOffset) { builder.AddOffset(7, startDateOffset.Value, 0); }
  public static void AddStartableEndDate(FlatBufferBuilder builder, StringOffset startableEndDateOffset) { builder.AddOffset(8, startableEndDateOffset.Value, 0); }
  public static void AddEndDate(FlatBufferBuilder builder, StringOffset endDateOffset) { builder.AddOffset(9, endDateOffset.Value, 0); }
  public static void AddCloseBannerAfterCompletion(FlatBufferBuilder builder, bool closeBannerAfterCompletion) { builder.AddBool(10, closeBannerAfterCompletion, false); }
  public static void AddMaximumLoginCount(FlatBufferBuilder builder, long maximumLoginCount) { builder.AddLong(11, maximumLoginCount, 0); }
  public static void AddExpiryDate(FlatBufferBuilder builder, long expiryDate) { builder.AddLong(12, expiryDate, 0); }
  public static void AddSpineCharacterId(FlatBufferBuilder builder, long spineCharacterId) { builder.AddLong(13, spineCharacterId, 0); }
  public static void AddRequirementParcelImage(FlatBufferBuilder builder, StringOffset requirementParcelImageOffset) { builder.AddOffset(14, requirementParcelImageOffset.Value, 0); }
  public static void AddRewardImage(FlatBufferBuilder builder, StringOffset rewardImageOffset) { builder.AddOffset(15, rewardImageOffset.Value, 0); }
  public static void AddLobbyBannerImage(FlatBufferBuilder builder, StringOffset lobbyBannerImageOffset) { builder.AddOffset(16, lobbyBannerImageOffset.Value, 0); }
  public static void AddBackgroundImage(FlatBufferBuilder builder, StringOffset backgroundImageOffset) { builder.AddOffset(17, backgroundImageOffset.Value, 0); }
  public static void AddTitleImage(FlatBufferBuilder builder, StringOffset titleImageOffset) { builder.AddOffset(18, titleImageOffset.Value, 0); }
  public static void AddRequirementParcelType(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType requirementParcelType) { builder.AddInt(19, (int)requirementParcelType, 0); }
  public static void AddRequirementParcelId(FlatBufferBuilder builder, long requirementParcelId) { builder.AddLong(20, requirementParcelId, 0); }
  public static void AddRequirementParcelAmount(FlatBufferBuilder builder, int requirementParcelAmount) { builder.AddInt(21, requirementParcelAmount, 0); }
  public static void AddTabType(FlatBufferBuilder builder, SCHALE.Common.FlatData.GuideMissionTabType tabType) { builder.AddInt(22, (int)tabType, 0); }
  public static void AddIsPermanent(FlatBufferBuilder builder, bool isPermanent) { builder.AddBool(23, isPermanent, false); }
  public static void AddPreSeasonId(FlatBufferBuilder builder, long preSeasonId) { builder.AddLong(24, preSeasonId, 0); }
  public static Offset<SCHALE.Common.FlatData.GuideMissionSeasonExcel> EndGuideMissionSeasonExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.GuideMissionSeasonExcel>(o);
  }
  public GuideMissionSeasonExcelT UnPack() {
    var _o = new GuideMissionSeasonExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GuideMissionSeasonExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("GuideMissionSeason");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.TitleLocalizeCode = TableEncryptionService.Convert(this.TitleLocalizeCode, key);
    _o.PermanentInfomationLocalizeCode = TableEncryptionService.Convert(this.PermanentInfomationLocalizeCode, key);
    _o.InfomationLocalizeCode = TableEncryptionService.Convert(this.InfomationLocalizeCode, key);
    _o.AccountType = TableEncryptionService.Convert(this.AccountType, key);
    _o.Enabled = TableEncryptionService.Convert(this.Enabled, key);
    _o.BannerOpenDate = TableEncryptionService.Convert(this.BannerOpenDate, key);
    _o.StartDate = TableEncryptionService.Convert(this.StartDate, key);
    _o.StartableEndDate = TableEncryptionService.Convert(this.StartableEndDate, key);
    _o.EndDate = TableEncryptionService.Convert(this.EndDate, key);
    _o.CloseBannerAfterCompletion = TableEncryptionService.Convert(this.CloseBannerAfterCompletion, key);
    _o.MaximumLoginCount = TableEncryptionService.Convert(this.MaximumLoginCount, key);
    _o.ExpiryDate = TableEncryptionService.Convert(this.ExpiryDate, key);
    _o.SpineCharacterId = TableEncryptionService.Convert(this.SpineCharacterId, key);
    _o.RequirementParcelImage = TableEncryptionService.Convert(this.RequirementParcelImage, key);
    _o.RewardImage = TableEncryptionService.Convert(this.RewardImage, key);
    _o.LobbyBannerImage = TableEncryptionService.Convert(this.LobbyBannerImage, key);
    _o.BackgroundImage = TableEncryptionService.Convert(this.BackgroundImage, key);
    _o.TitleImage = TableEncryptionService.Convert(this.TitleImage, key);
    _o.RequirementParcelType = TableEncryptionService.Convert(this.RequirementParcelType, key);
    _o.RequirementParcelId = TableEncryptionService.Convert(this.RequirementParcelId, key);
    _o.RequirementParcelAmount = TableEncryptionService.Convert(this.RequirementParcelAmount, key);
    _o.TabType = TableEncryptionService.Convert(this.TabType, key);
    _o.IsPermanent = TableEncryptionService.Convert(this.IsPermanent, key);
    _o.PreSeasonId = TableEncryptionService.Convert(this.PreSeasonId, key);
  }
  public static Offset<SCHALE.Common.FlatData.GuideMissionSeasonExcel> Pack(FlatBufferBuilder builder, GuideMissionSeasonExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.GuideMissionSeasonExcel>);
    var _TitleLocalizeCode = _o.TitleLocalizeCode == null ? default(StringOffset) : builder.CreateString(_o.TitleLocalizeCode);
    var _PermanentInfomationLocalizeCode = _o.PermanentInfomationLocalizeCode == null ? default(StringOffset) : builder.CreateString(_o.PermanentInfomationLocalizeCode);
    var _InfomationLocalizeCode = _o.InfomationLocalizeCode == null ? default(StringOffset) : builder.CreateString(_o.InfomationLocalizeCode);
    var _BannerOpenDate = _o.BannerOpenDate == null ? default(StringOffset) : builder.CreateString(_o.BannerOpenDate);
    var _StartDate = _o.StartDate == null ? default(StringOffset) : builder.CreateString(_o.StartDate);
    var _StartableEndDate = _o.StartableEndDate == null ? default(StringOffset) : builder.CreateString(_o.StartableEndDate);
    var _EndDate = _o.EndDate == null ? default(StringOffset) : builder.CreateString(_o.EndDate);
    var _RequirementParcelImage = _o.RequirementParcelImage == null ? default(StringOffset) : builder.CreateString(_o.RequirementParcelImage);
    var _RewardImage = _o.RewardImage == null ? default(StringOffset) : builder.CreateString(_o.RewardImage);
    var _LobbyBannerImage = _o.LobbyBannerImage == null ? default(StringOffset) : builder.CreateString(_o.LobbyBannerImage);
    var _BackgroundImage = _o.BackgroundImage == null ? default(StringOffset) : builder.CreateString(_o.BackgroundImage);
    var _TitleImage = _o.TitleImage == null ? default(StringOffset) : builder.CreateString(_o.TitleImage);
    return CreateGuideMissionSeasonExcel(
      builder,
      _o.Id,
      _TitleLocalizeCode,
      _PermanentInfomationLocalizeCode,
      _InfomationLocalizeCode,
      _o.AccountType,
      _o.Enabled,
      _BannerOpenDate,
      _StartDate,
      _StartableEndDate,
      _EndDate,
      _o.CloseBannerAfterCompletion,
      _o.MaximumLoginCount,
      _o.ExpiryDate,
      _o.SpineCharacterId,
      _RequirementParcelImage,
      _RewardImage,
      _LobbyBannerImage,
      _BackgroundImage,
      _TitleImage,
      _o.RequirementParcelType,
      _o.RequirementParcelId,
      _o.RequirementParcelAmount,
      _o.TabType,
      _o.IsPermanent,
      _o.PreSeasonId);
  }
}

public class GuideMissionSeasonExcelT
{
  public long Id { get; set; }
  public string TitleLocalizeCode { get; set; }
  public string PermanentInfomationLocalizeCode { get; set; }
  public string InfomationLocalizeCode { get; set; }
  public SCHALE.Common.FlatData.AccountState AccountType { get; set; }
  public bool Enabled { get; set; }
  public string BannerOpenDate { get; set; }
  public string StartDate { get; set; }
  public string StartableEndDate { get; set; }
  public string EndDate { get; set; }
  public bool CloseBannerAfterCompletion { get; set; }
  public long MaximumLoginCount { get; set; }
  public long ExpiryDate { get; set; }
  public long SpineCharacterId { get; set; }
  public string RequirementParcelImage { get; set; }
  public string RewardImage { get; set; }
  public string LobbyBannerImage { get; set; }
  public string BackgroundImage { get; set; }
  public string TitleImage { get; set; }
  public SCHALE.Common.FlatData.ParcelType RequirementParcelType { get; set; }
  public long RequirementParcelId { get; set; }
  public int RequirementParcelAmount { get; set; }
  public SCHALE.Common.FlatData.GuideMissionTabType TabType { get; set; }
  public bool IsPermanent { get; set; }
  public long PreSeasonId { get; set; }

  public GuideMissionSeasonExcelT() {
    this.Id = 0;
    this.TitleLocalizeCode = null;
    this.PermanentInfomationLocalizeCode = null;
    this.InfomationLocalizeCode = null;
    this.AccountType = SCHALE.Common.FlatData.AccountState.WaitingSignIn;
    this.Enabled = false;
    this.BannerOpenDate = null;
    this.StartDate = null;
    this.StartableEndDate = null;
    this.EndDate = null;
    this.CloseBannerAfterCompletion = false;
    this.MaximumLoginCount = 0;
    this.ExpiryDate = 0;
    this.SpineCharacterId = 0;
    this.RequirementParcelImage = null;
    this.RewardImage = null;
    this.LobbyBannerImage = null;
    this.BackgroundImage = null;
    this.TitleImage = null;
    this.RequirementParcelType = SCHALE.Common.FlatData.ParcelType.None;
    this.RequirementParcelId = 0;
    this.RequirementParcelAmount = 0;
    this.TabType = SCHALE.Common.FlatData.GuideMissionTabType.None;
    this.IsPermanent = false;
    this.PreSeasonId = 0;
  }
}


static public class GuideMissionSeasonExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*TitleLocalizeCode*/, false)
      && verifier.VerifyString(tablePos, 8 /*PermanentInfomationLocalizeCode*/, false)
      && verifier.VerifyString(tablePos, 10 /*InfomationLocalizeCode*/, false)
      && verifier.VerifyField(tablePos, 12 /*AccountType*/, 4 /*SCHALE.Common.FlatData.AccountState*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Enabled*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 16 /*BannerOpenDate*/, false)
      && verifier.VerifyString(tablePos, 18 /*StartDate*/, false)
      && verifier.VerifyString(tablePos, 20 /*StartableEndDate*/, false)
      && verifier.VerifyString(tablePos, 22 /*EndDate*/, false)
      && verifier.VerifyField(tablePos, 24 /*CloseBannerAfterCompletion*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 26 /*MaximumLoginCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*ExpiryDate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*SpineCharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 32 /*RequirementParcelImage*/, false)
      && verifier.VerifyString(tablePos, 34 /*RewardImage*/, false)
      && verifier.VerifyString(tablePos, 36 /*LobbyBannerImage*/, false)
      && verifier.VerifyString(tablePos, 38 /*BackgroundImage*/, false)
      && verifier.VerifyString(tablePos, 40 /*TitleImage*/, false)
      && verifier.VerifyField(tablePos, 42 /*RequirementParcelType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*RequirementParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*RequirementParcelAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*TabType*/, 4 /*SCHALE.Common.FlatData.GuideMissionTabType*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*IsPermanent*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 52 /*PreSeasonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
