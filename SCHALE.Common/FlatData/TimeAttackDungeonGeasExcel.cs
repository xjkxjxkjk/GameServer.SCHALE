// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct TimeAttackDungeonGeasExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static TimeAttackDungeonGeasExcel GetRootAsTimeAttackDungeonGeasExcel(ByteBuffer _bb) { return GetRootAsTimeAttackDungeonGeasExcel(_bb, new TimeAttackDungeonGeasExcel()); }
  public static TimeAttackDungeonGeasExcel GetRootAsTimeAttackDungeonGeasExcel(ByteBuffer _bb, TimeAttackDungeonGeasExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TimeAttackDungeonGeasExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.TimeAttackDungeonType TimeAttackDungeonType { get { int o = __p.__offset(6); return o != 0 ? (SCHALE.Common.FlatData.TimeAttackDungeonType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.TimeAttackDungeonType.None; } }
  public uint LocalizeEtcKey { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public long BattleDuration { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClearDefaultPoint { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClearTimeWeightPoint { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TimeWeightConst { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Difficulty { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RecommandLevel { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long GroundId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string AllyPassiveSkillId(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AllyPassiveSkillIdLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int AllyPassiveSkillLevel(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AllyPassiveSkillLevelLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAllyPassiveSkillLevelBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetAllyPassiveSkillLevelBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetAllyPassiveSkillLevelArray() { return __p.__vector_as_array<int>(26); }
  public string EnemyPassiveSkillId(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EnemyPassiveSkillIdLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int EnemyPassiveSkillLevel(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EnemyPassiveSkillLevelLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEnemyPassiveSkillLevelBytes() { return __p.__vector_as_span<int>(30, 4); }
#else
  public ArraySegment<byte>? GetEnemyPassiveSkillLevelBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public int[] GetEnemyPassiveSkillLevelArray() { return __p.__vector_as_array<int>(30); }
  public string GeasIconPath(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int GeasIconPathLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public uint GeasLocalizeEtcKey(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int GeasLocalizeEtcKeyLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetGeasLocalizeEtcKeyBytes() { return __p.__vector_as_span<uint>(34, 4); }
#else
  public ArraySegment<byte>? GetGeasLocalizeEtcKeyBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public uint[] GetGeasLocalizeEtcKeyArray() { return __p.__vector_as_array<uint>(34); }

  public static Offset<SCHALE.Common.FlatData.TimeAttackDungeonGeasExcel> CreateTimeAttackDungeonGeasExcel(FlatBufferBuilder builder,
      long Id = 0,
      SCHALE.Common.FlatData.TimeAttackDungeonType TimeAttackDungeonType = SCHALE.Common.FlatData.TimeAttackDungeonType.None,
      uint LocalizeEtcKey = 0,
      long BattleDuration = 0,
      long ClearDefaultPoint = 0,
      long ClearTimeWeightPoint = 0,
      long TimeWeightConst = 0,
      int Difficulty = 0,
      int RecommandLevel = 0,
      long GroundId = 0,
      VectorOffset AllyPassiveSkillIdOffset = default(VectorOffset),
      VectorOffset AllyPassiveSkillLevelOffset = default(VectorOffset),
      VectorOffset EnemyPassiveSkillIdOffset = default(VectorOffset),
      VectorOffset EnemyPassiveSkillLevelOffset = default(VectorOffset),
      VectorOffset GeasIconPathOffset = default(VectorOffset),
      VectorOffset GeasLocalizeEtcKeyOffset = default(VectorOffset)) {
    builder.StartTable(16);
    TimeAttackDungeonGeasExcel.AddGroundId(builder, GroundId);
    TimeAttackDungeonGeasExcel.AddTimeWeightConst(builder, TimeWeightConst);
    TimeAttackDungeonGeasExcel.AddClearTimeWeightPoint(builder, ClearTimeWeightPoint);
    TimeAttackDungeonGeasExcel.AddClearDefaultPoint(builder, ClearDefaultPoint);
    TimeAttackDungeonGeasExcel.AddBattleDuration(builder, BattleDuration);
    TimeAttackDungeonGeasExcel.AddId(builder, Id);
    TimeAttackDungeonGeasExcel.AddGeasLocalizeEtcKey(builder, GeasLocalizeEtcKeyOffset);
    TimeAttackDungeonGeasExcel.AddGeasIconPath(builder, GeasIconPathOffset);
    TimeAttackDungeonGeasExcel.AddEnemyPassiveSkillLevel(builder, EnemyPassiveSkillLevelOffset);
    TimeAttackDungeonGeasExcel.AddEnemyPassiveSkillId(builder, EnemyPassiveSkillIdOffset);
    TimeAttackDungeonGeasExcel.AddAllyPassiveSkillLevel(builder, AllyPassiveSkillLevelOffset);
    TimeAttackDungeonGeasExcel.AddAllyPassiveSkillId(builder, AllyPassiveSkillIdOffset);
    TimeAttackDungeonGeasExcel.AddRecommandLevel(builder, RecommandLevel);
    TimeAttackDungeonGeasExcel.AddDifficulty(builder, Difficulty);
    TimeAttackDungeonGeasExcel.AddLocalizeEtcKey(builder, LocalizeEtcKey);
    TimeAttackDungeonGeasExcel.AddTimeAttackDungeonType(builder, TimeAttackDungeonType);
    return TimeAttackDungeonGeasExcel.EndTimeAttackDungeonGeasExcel(builder);
  }

  public static void StartTimeAttackDungeonGeasExcel(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddTimeAttackDungeonType(FlatBufferBuilder builder, SCHALE.Common.FlatData.TimeAttackDungeonType timeAttackDungeonType) { builder.AddInt(1, (int)timeAttackDungeonType, 0); }
  public static void AddLocalizeEtcKey(FlatBufferBuilder builder, uint localizeEtcKey) { builder.AddUint(2, localizeEtcKey, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long battleDuration) { builder.AddLong(3, battleDuration, 0); }
  public static void AddClearDefaultPoint(FlatBufferBuilder builder, long clearDefaultPoint) { builder.AddLong(4, clearDefaultPoint, 0); }
  public static void AddClearTimeWeightPoint(FlatBufferBuilder builder, long clearTimeWeightPoint) { builder.AddLong(5, clearTimeWeightPoint, 0); }
  public static void AddTimeWeightConst(FlatBufferBuilder builder, long timeWeightConst) { builder.AddLong(6, timeWeightConst, 0); }
  public static void AddDifficulty(FlatBufferBuilder builder, int difficulty) { builder.AddInt(7, difficulty, 0); }
  public static void AddRecommandLevel(FlatBufferBuilder builder, int recommandLevel) { builder.AddInt(8, recommandLevel, 0); }
  public static void AddGroundId(FlatBufferBuilder builder, long groundId) { builder.AddLong(9, groundId, 0); }
  public static void AddAllyPassiveSkillId(FlatBufferBuilder builder, VectorOffset allyPassiveSkillIdOffset) { builder.AddOffset(10, allyPassiveSkillIdOffset.Value, 0); }
  public static VectorOffset CreateAllyPassiveSkillIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllyPassiveSkillIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAllyPassiveSkillLevel(FlatBufferBuilder builder, VectorOffset allyPassiveSkillLevelOffset) { builder.AddOffset(11, allyPassiveSkillLevelOffset.Value, 0); }
  public static VectorOffset CreateAllyPassiveSkillLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllyPassiveSkillLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnemyPassiveSkillId(FlatBufferBuilder builder, VectorOffset enemyPassiveSkillIdOffset) { builder.AddOffset(12, enemyPassiveSkillIdOffset.Value, 0); }
  public static VectorOffset CreateEnemyPassiveSkillIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnemyPassiveSkillIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnemyPassiveSkillLevel(FlatBufferBuilder builder, VectorOffset enemyPassiveSkillLevelOffset) { builder.AddOffset(13, enemyPassiveSkillLevelOffset.Value, 0); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnemyPassiveSkillLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGeasIconPath(FlatBufferBuilder builder, VectorOffset geasIconPathOffset) { builder.AddOffset(14, geasIconPathOffset.Value, 0); }
  public static VectorOffset CreateGeasIconPathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGeasIconPathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGeasIconPathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGeasIconPathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGeasIconPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGeasLocalizeEtcKey(FlatBufferBuilder builder, VectorOffset geasLocalizeEtcKeyOffset) { builder.AddOffset(15, geasLocalizeEtcKeyOffset.Value, 0); }
  public static VectorOffset CreateGeasLocalizeEtcKeyVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGeasLocalizeEtcKeyVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGeasLocalizeEtcKeyVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGeasLocalizeEtcKeyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGeasLocalizeEtcKeyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SCHALE.Common.FlatData.TimeAttackDungeonGeasExcel> EndTimeAttackDungeonGeasExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.TimeAttackDungeonGeasExcel>(o);
  }
  public TimeAttackDungeonGeasExcelT UnPack() {
    var _o = new TimeAttackDungeonGeasExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TimeAttackDungeonGeasExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("TimeAttackDungeonGeas");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.TimeAttackDungeonType = TableEncryptionService.Convert(this.TimeAttackDungeonType, key);
    _o.LocalizeEtcKey = TableEncryptionService.Convert(this.LocalizeEtcKey, key);
    _o.BattleDuration = TableEncryptionService.Convert(this.BattleDuration, key);
    _o.ClearDefaultPoint = TableEncryptionService.Convert(this.ClearDefaultPoint, key);
    _o.ClearTimeWeightPoint = TableEncryptionService.Convert(this.ClearTimeWeightPoint, key);
    _o.TimeWeightConst = TableEncryptionService.Convert(this.TimeWeightConst, key);
    _o.Difficulty = TableEncryptionService.Convert(this.Difficulty, key);
    _o.RecommandLevel = TableEncryptionService.Convert(this.RecommandLevel, key);
    _o.GroundId = TableEncryptionService.Convert(this.GroundId, key);
    _o.AllyPassiveSkillId = new List<string>();
    for (var _j = 0; _j < this.AllyPassiveSkillIdLength; ++_j) {_o.AllyPassiveSkillId.Add(TableEncryptionService.Convert(this.AllyPassiveSkillId(_j), key));}
    _o.AllyPassiveSkillLevel = new List<int>();
    for (var _j = 0; _j < this.AllyPassiveSkillLevelLength; ++_j) {_o.AllyPassiveSkillLevel.Add(TableEncryptionService.Convert(this.AllyPassiveSkillLevel(_j), key));}
    _o.EnemyPassiveSkillId = new List<string>();
    for (var _j = 0; _j < this.EnemyPassiveSkillIdLength; ++_j) {_o.EnemyPassiveSkillId.Add(TableEncryptionService.Convert(this.EnemyPassiveSkillId(_j), key));}
    _o.EnemyPassiveSkillLevel = new List<int>();
    for (var _j = 0; _j < this.EnemyPassiveSkillLevelLength; ++_j) {_o.EnemyPassiveSkillLevel.Add(TableEncryptionService.Convert(this.EnemyPassiveSkillLevel(_j), key));}
    _o.GeasIconPath = new List<string>();
    for (var _j = 0; _j < this.GeasIconPathLength; ++_j) {_o.GeasIconPath.Add(TableEncryptionService.Convert(this.GeasIconPath(_j), key));}
    _o.GeasLocalizeEtcKey = new List<uint>();
    for (var _j = 0; _j < this.GeasLocalizeEtcKeyLength; ++_j) {_o.GeasLocalizeEtcKey.Add(TableEncryptionService.Convert(this.GeasLocalizeEtcKey(_j), key));}
  }
  public static Offset<SCHALE.Common.FlatData.TimeAttackDungeonGeasExcel> Pack(FlatBufferBuilder builder, TimeAttackDungeonGeasExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.TimeAttackDungeonGeasExcel>);
    var _AllyPassiveSkillId = default(VectorOffset);
    if (_o.AllyPassiveSkillId != null) {
      var __AllyPassiveSkillId = new StringOffset[_o.AllyPassiveSkillId.Count];
      for (var _j = 0; _j < __AllyPassiveSkillId.Length; ++_j) { __AllyPassiveSkillId[_j] = builder.CreateString(_o.AllyPassiveSkillId[_j]); }
      _AllyPassiveSkillId = CreateAllyPassiveSkillIdVector(builder, __AllyPassiveSkillId);
    }
    var _AllyPassiveSkillLevel = default(VectorOffset);
    if (_o.AllyPassiveSkillLevel != null) {
      var __AllyPassiveSkillLevel = _o.AllyPassiveSkillLevel.ToArray();
      _AllyPassiveSkillLevel = CreateAllyPassiveSkillLevelVector(builder, __AllyPassiveSkillLevel);
    }
    var _EnemyPassiveSkillId = default(VectorOffset);
    if (_o.EnemyPassiveSkillId != null) {
      var __EnemyPassiveSkillId = new StringOffset[_o.EnemyPassiveSkillId.Count];
      for (var _j = 0; _j < __EnemyPassiveSkillId.Length; ++_j) { __EnemyPassiveSkillId[_j] = builder.CreateString(_o.EnemyPassiveSkillId[_j]); }
      _EnemyPassiveSkillId = CreateEnemyPassiveSkillIdVector(builder, __EnemyPassiveSkillId);
    }
    var _EnemyPassiveSkillLevel = default(VectorOffset);
    if (_o.EnemyPassiveSkillLevel != null) {
      var __EnemyPassiveSkillLevel = _o.EnemyPassiveSkillLevel.ToArray();
      _EnemyPassiveSkillLevel = CreateEnemyPassiveSkillLevelVector(builder, __EnemyPassiveSkillLevel);
    }
    var _GeasIconPath = default(VectorOffset);
    if (_o.GeasIconPath != null) {
      var __GeasIconPath = new StringOffset[_o.GeasIconPath.Count];
      for (var _j = 0; _j < __GeasIconPath.Length; ++_j) { __GeasIconPath[_j] = builder.CreateString(_o.GeasIconPath[_j]); }
      _GeasIconPath = CreateGeasIconPathVector(builder, __GeasIconPath);
    }
    var _GeasLocalizeEtcKey = default(VectorOffset);
    if (_o.GeasLocalizeEtcKey != null) {
      var __GeasLocalizeEtcKey = _o.GeasLocalizeEtcKey.ToArray();
      _GeasLocalizeEtcKey = CreateGeasLocalizeEtcKeyVector(builder, __GeasLocalizeEtcKey);
    }
    return CreateTimeAttackDungeonGeasExcel(
      builder,
      _o.Id,
      _o.TimeAttackDungeonType,
      _o.LocalizeEtcKey,
      _o.BattleDuration,
      _o.ClearDefaultPoint,
      _o.ClearTimeWeightPoint,
      _o.TimeWeightConst,
      _o.Difficulty,
      _o.RecommandLevel,
      _o.GroundId,
      _AllyPassiveSkillId,
      _AllyPassiveSkillLevel,
      _EnemyPassiveSkillId,
      _EnemyPassiveSkillLevel,
      _GeasIconPath,
      _GeasLocalizeEtcKey);
  }
}

public class TimeAttackDungeonGeasExcelT
{
  public long Id { get; set; }
  public SCHALE.Common.FlatData.TimeAttackDungeonType TimeAttackDungeonType { get; set; }
  public uint LocalizeEtcKey { get; set; }
  public long BattleDuration { get; set; }
  public long ClearDefaultPoint { get; set; }
  public long ClearTimeWeightPoint { get; set; }
  public long TimeWeightConst { get; set; }
  public int Difficulty { get; set; }
  public int RecommandLevel { get; set; }
  public long GroundId { get; set; }
  public List<string> AllyPassiveSkillId { get; set; }
  public List<int> AllyPassiveSkillLevel { get; set; }
  public List<string> EnemyPassiveSkillId { get; set; }
  public List<int> EnemyPassiveSkillLevel { get; set; }
  public List<string> GeasIconPath { get; set; }
  public List<uint> GeasLocalizeEtcKey { get; set; }

  public TimeAttackDungeonGeasExcelT() {
    this.Id = 0;
    this.TimeAttackDungeonType = SCHALE.Common.FlatData.TimeAttackDungeonType.None;
    this.LocalizeEtcKey = 0;
    this.BattleDuration = 0;
    this.ClearDefaultPoint = 0;
    this.ClearTimeWeightPoint = 0;
    this.TimeWeightConst = 0;
    this.Difficulty = 0;
    this.RecommandLevel = 0;
    this.GroundId = 0;
    this.AllyPassiveSkillId = null;
    this.AllyPassiveSkillLevel = null;
    this.EnemyPassiveSkillId = null;
    this.EnemyPassiveSkillLevel = null;
    this.GeasIconPath = null;
    this.GeasLocalizeEtcKey = null;
  }
}


static public class TimeAttackDungeonGeasExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*TimeAttackDungeonType*/, 4 /*SCHALE.Common.FlatData.TimeAttackDungeonType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*LocalizeEtcKey*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*BattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*ClearDefaultPoint*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*ClearTimeWeightPoint*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*TimeWeightConst*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*Difficulty*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*RecommandLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*GroundId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*AllyPassiveSkillId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*AllyPassiveSkillLevel*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 28 /*EnemyPassiveSkillId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 30 /*EnemyPassiveSkillLevel*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*GeasIconPath*/, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*GeasLocalizeEtcKey*/, 4 /*uint*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
