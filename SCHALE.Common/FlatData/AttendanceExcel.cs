// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct AttendanceExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AttendanceExcel GetRootAsAttendanceExcel(ByteBuffer _bb) { return GetRootAsAttendanceExcel(_bb, new AttendanceExcel()); }
  public static AttendanceExcel GetRootAsAttendanceExcel(ByteBuffer _bb, AttendanceExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AttendanceExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.AttendanceType Type { get { int o = __p.__offset(6); return o != 0 ? (SCHALE.Common.FlatData.AttendanceType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.AttendanceType.Basic; } }
  public string CountdownPrefab { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountdownPrefabBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCountdownPrefabBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCountdownPrefabArray() { return __p.__vector_as_array<byte>(8); }
  public long DisplayOrder { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.AccountState AccountType { get { int o = __p.__offset(12); return o != 0 ? (SCHALE.Common.FlatData.AccountState)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.AccountState.WaitingSignIn; } }
  public long AccountLevelLimit { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Title { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(16); }
  public string InfomationLocalizeCode { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInfomationLocalizeCodeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetInfomationLocalizeCodeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetInfomationLocalizeCodeArray() { return __p.__vector_as_array<byte>(18); }
  public SCHALE.Common.FlatData.AttendanceCountRule CountRule { get { int o = __p.__offset(20); return o != 0 ? (SCHALE.Common.FlatData.AttendanceCountRule)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.AttendanceCountRule.Accumulation; } }
  public SCHALE.Common.FlatData.AttendanceResetType CountReset { get { int o = __p.__offset(22); return o != 0 ? (SCHALE.Common.FlatData.AttendanceResetType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.AttendanceResetType.User; } }
  public long BookSize { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string StartDate { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartDateBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetStartDateBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetStartDateArray() { return __p.__vector_as_array<byte>(26); }
  public string StartableEndDate { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartableEndDateBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetStartableEndDateBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetStartableEndDateArray() { return __p.__vector_as_array<byte>(28); }
  public string EndDate { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndDateBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetEndDateBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetEndDateArray() { return __p.__vector_as_array<byte>(30); }
  public long ExpiryDate { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.MailType MailType { get { int o = __p.__offset(34); return o != 0 ? (SCHALE.Common.FlatData.MailType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.MailType.System; } }
  public SCHALE.Common.FlatData.DialogCategory DialogCategory { get { int o = __p.__offset(36); return o != 0 ? (SCHALE.Common.FlatData.DialogCategory)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.DialogCategory.Cafe; } }
  public string TitleImagePath { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleImagePathBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetTitleImagePathBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetTitleImagePathArray() { return __p.__vector_as_array<byte>(38); }
  public string DecorationImagePath { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDecorationImagePathBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetDecorationImagePathBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetDecorationImagePathArray() { return __p.__vector_as_array<byte>(40); }

  public static Offset<SCHALE.Common.FlatData.AttendanceExcel> CreateAttendanceExcel(FlatBufferBuilder builder,
      long Id = 0,
      SCHALE.Common.FlatData.AttendanceType Type = SCHALE.Common.FlatData.AttendanceType.Basic,
      StringOffset CountdownPrefabOffset = default(StringOffset),
      long DisplayOrder = 0,
      SCHALE.Common.FlatData.AccountState AccountType = SCHALE.Common.FlatData.AccountState.WaitingSignIn,
      long AccountLevelLimit = 0,
      StringOffset TitleOffset = default(StringOffset),
      StringOffset InfomationLocalizeCodeOffset = default(StringOffset),
      SCHALE.Common.FlatData.AttendanceCountRule CountRule = SCHALE.Common.FlatData.AttendanceCountRule.Accumulation,
      SCHALE.Common.FlatData.AttendanceResetType CountReset = SCHALE.Common.FlatData.AttendanceResetType.User,
      long BookSize = 0,
      StringOffset StartDateOffset = default(StringOffset),
      StringOffset StartableEndDateOffset = default(StringOffset),
      StringOffset EndDateOffset = default(StringOffset),
      long ExpiryDate = 0,
      SCHALE.Common.FlatData.MailType MailType = SCHALE.Common.FlatData.MailType.System,
      SCHALE.Common.FlatData.DialogCategory DialogCategory = SCHALE.Common.FlatData.DialogCategory.Cafe,
      StringOffset TitleImagePathOffset = default(StringOffset),
      StringOffset DecorationImagePathOffset = default(StringOffset)) {
    builder.StartTable(19);
    AttendanceExcel.AddExpiryDate(builder, ExpiryDate);
    AttendanceExcel.AddBookSize(builder, BookSize);
    AttendanceExcel.AddAccountLevelLimit(builder, AccountLevelLimit);
    AttendanceExcel.AddDisplayOrder(builder, DisplayOrder);
    AttendanceExcel.AddId(builder, Id);
    AttendanceExcel.AddDecorationImagePath(builder, DecorationImagePathOffset);
    AttendanceExcel.AddTitleImagePath(builder, TitleImagePathOffset);
    AttendanceExcel.AddDialogCategory(builder, DialogCategory);
    AttendanceExcel.AddMailType(builder, MailType);
    AttendanceExcel.AddEndDate(builder, EndDateOffset);
    AttendanceExcel.AddStartableEndDate(builder, StartableEndDateOffset);
    AttendanceExcel.AddStartDate(builder, StartDateOffset);
    AttendanceExcel.AddCountReset(builder, CountReset);
    AttendanceExcel.AddCountRule(builder, CountRule);
    AttendanceExcel.AddInfomationLocalizeCode(builder, InfomationLocalizeCodeOffset);
    AttendanceExcel.AddTitle(builder, TitleOffset);
    AttendanceExcel.AddAccountType(builder, AccountType);
    AttendanceExcel.AddCountdownPrefab(builder, CountdownPrefabOffset);
    AttendanceExcel.AddType(builder, Type);
    return AttendanceExcel.EndAttendanceExcel(builder);
  }

  public static void StartAttendanceExcel(FlatBufferBuilder builder) { builder.StartTable(19); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, SCHALE.Common.FlatData.AttendanceType type) { builder.AddInt(1, (int)type, 0); }
  public static void AddCountdownPrefab(FlatBufferBuilder builder, StringOffset countdownPrefabOffset) { builder.AddOffset(2, countdownPrefabOffset.Value, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long displayOrder) { builder.AddLong(3, displayOrder, 0); }
  public static void AddAccountType(FlatBufferBuilder builder, SCHALE.Common.FlatData.AccountState accountType) { builder.AddInt(4, (int)accountType, 0); }
  public static void AddAccountLevelLimit(FlatBufferBuilder builder, long accountLevelLimit) { builder.AddLong(5, accountLevelLimit, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(6, titleOffset.Value, 0); }
  public static void AddInfomationLocalizeCode(FlatBufferBuilder builder, StringOffset infomationLocalizeCodeOffset) { builder.AddOffset(7, infomationLocalizeCodeOffset.Value, 0); }
  public static void AddCountRule(FlatBufferBuilder builder, SCHALE.Common.FlatData.AttendanceCountRule countRule) { builder.AddInt(8, (int)countRule, 0); }
  public static void AddCountReset(FlatBufferBuilder builder, SCHALE.Common.FlatData.AttendanceResetType countReset) { builder.AddInt(9, (int)countReset, 0); }
  public static void AddBookSize(FlatBufferBuilder builder, long bookSize) { builder.AddLong(10, bookSize, 0); }
  public static void AddStartDate(FlatBufferBuilder builder, StringOffset startDateOffset) { builder.AddOffset(11, startDateOffset.Value, 0); }
  public static void AddStartableEndDate(FlatBufferBuilder builder, StringOffset startableEndDateOffset) { builder.AddOffset(12, startableEndDateOffset.Value, 0); }
  public static void AddEndDate(FlatBufferBuilder builder, StringOffset endDateOffset) { builder.AddOffset(13, endDateOffset.Value, 0); }
  public static void AddExpiryDate(FlatBufferBuilder builder, long expiryDate) { builder.AddLong(14, expiryDate, 0); }
  public static void AddMailType(FlatBufferBuilder builder, SCHALE.Common.FlatData.MailType mailType) { builder.AddInt(15, (int)mailType, 0); }
  public static void AddDialogCategory(FlatBufferBuilder builder, SCHALE.Common.FlatData.DialogCategory dialogCategory) { builder.AddInt(16, (int)dialogCategory, 0); }
  public static void AddTitleImagePath(FlatBufferBuilder builder, StringOffset titleImagePathOffset) { builder.AddOffset(17, titleImagePathOffset.Value, 0); }
  public static void AddDecorationImagePath(FlatBufferBuilder builder, StringOffset decorationImagePathOffset) { builder.AddOffset(18, decorationImagePathOffset.Value, 0); }
  public static Offset<SCHALE.Common.FlatData.AttendanceExcel> EndAttendanceExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.AttendanceExcel>(o);
  }
  public AttendanceExcelT UnPack() {
    var _o = new AttendanceExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AttendanceExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Attendance");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.Type = TableEncryptionService.Convert(this.Type, key);
    _o.CountdownPrefab = TableEncryptionService.Convert(this.CountdownPrefab, key);
    _o.DisplayOrder = TableEncryptionService.Convert(this.DisplayOrder, key);
    _o.AccountType = TableEncryptionService.Convert(this.AccountType, key);
    _o.AccountLevelLimit = TableEncryptionService.Convert(this.AccountLevelLimit, key);
    _o.Title = TableEncryptionService.Convert(this.Title, key);
    _o.InfomationLocalizeCode = TableEncryptionService.Convert(this.InfomationLocalizeCode, key);
    _o.CountRule = TableEncryptionService.Convert(this.CountRule, key);
    _o.CountReset = TableEncryptionService.Convert(this.CountReset, key);
    _o.BookSize = TableEncryptionService.Convert(this.BookSize, key);
    _o.StartDate = TableEncryptionService.Convert(this.StartDate, key);
    _o.StartableEndDate = TableEncryptionService.Convert(this.StartableEndDate, key);
    _o.EndDate = TableEncryptionService.Convert(this.EndDate, key);
    _o.ExpiryDate = TableEncryptionService.Convert(this.ExpiryDate, key);
    _o.MailType = TableEncryptionService.Convert(this.MailType, key);
    _o.DialogCategory = TableEncryptionService.Convert(this.DialogCategory, key);
    _o.TitleImagePath = TableEncryptionService.Convert(this.TitleImagePath, key);
    _o.DecorationImagePath = TableEncryptionService.Convert(this.DecorationImagePath, key);
  }
  public static Offset<SCHALE.Common.FlatData.AttendanceExcel> Pack(FlatBufferBuilder builder, AttendanceExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.AttendanceExcel>);
    var _CountdownPrefab = _o.CountdownPrefab == null ? default(StringOffset) : builder.CreateString(_o.CountdownPrefab);
    var _Title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _InfomationLocalizeCode = _o.InfomationLocalizeCode == null ? default(StringOffset) : builder.CreateString(_o.InfomationLocalizeCode);
    var _StartDate = _o.StartDate == null ? default(StringOffset) : builder.CreateString(_o.StartDate);
    var _StartableEndDate = _o.StartableEndDate == null ? default(StringOffset) : builder.CreateString(_o.StartableEndDate);
    var _EndDate = _o.EndDate == null ? default(StringOffset) : builder.CreateString(_o.EndDate);
    var _TitleImagePath = _o.TitleImagePath == null ? default(StringOffset) : builder.CreateString(_o.TitleImagePath);
    var _DecorationImagePath = _o.DecorationImagePath == null ? default(StringOffset) : builder.CreateString(_o.DecorationImagePath);
    return CreateAttendanceExcel(
      builder,
      _o.Id,
      _o.Type,
      _CountdownPrefab,
      _o.DisplayOrder,
      _o.AccountType,
      _o.AccountLevelLimit,
      _Title,
      _InfomationLocalizeCode,
      _o.CountRule,
      _o.CountReset,
      _o.BookSize,
      _StartDate,
      _StartableEndDate,
      _EndDate,
      _o.ExpiryDate,
      _o.MailType,
      _o.DialogCategory,
      _TitleImagePath,
      _DecorationImagePath);
  }
}

public class AttendanceExcelT
{
  public long Id { get; set; }
  public SCHALE.Common.FlatData.AttendanceType Type { get; set; }
  public string CountdownPrefab { get; set; }
  public long DisplayOrder { get; set; }
  public SCHALE.Common.FlatData.AccountState AccountType { get; set; }
  public long AccountLevelLimit { get; set; }
  public string Title { get; set; }
  public string InfomationLocalizeCode { get; set; }
  public SCHALE.Common.FlatData.AttendanceCountRule CountRule { get; set; }
  public SCHALE.Common.FlatData.AttendanceResetType CountReset { get; set; }
  public long BookSize { get; set; }
  public string StartDate { get; set; }
  public string StartableEndDate { get; set; }
  public string EndDate { get; set; }
  public long ExpiryDate { get; set; }
  public SCHALE.Common.FlatData.MailType MailType { get; set; }
  public SCHALE.Common.FlatData.DialogCategory DialogCategory { get; set; }
  public string TitleImagePath { get; set; }
  public string DecorationImagePath { get; set; }

  public AttendanceExcelT() {
    this.Id = 0;
    this.Type = SCHALE.Common.FlatData.AttendanceType.Basic;
    this.CountdownPrefab = null;
    this.DisplayOrder = 0;
    this.AccountType = SCHALE.Common.FlatData.AccountState.WaitingSignIn;
    this.AccountLevelLimit = 0;
    this.Title = null;
    this.InfomationLocalizeCode = null;
    this.CountRule = SCHALE.Common.FlatData.AttendanceCountRule.Accumulation;
    this.CountReset = SCHALE.Common.FlatData.AttendanceResetType.User;
    this.BookSize = 0;
    this.StartDate = null;
    this.StartableEndDate = null;
    this.EndDate = null;
    this.ExpiryDate = 0;
    this.MailType = SCHALE.Common.FlatData.MailType.System;
    this.DialogCategory = SCHALE.Common.FlatData.DialogCategory.Cafe;
    this.TitleImagePath = null;
    this.DecorationImagePath = null;
  }
}


static public class AttendanceExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 4 /*SCHALE.Common.FlatData.AttendanceType*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*CountdownPrefab*/, false)
      && verifier.VerifyField(tablePos, 10 /*DisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*AccountType*/, 4 /*SCHALE.Common.FlatData.AccountState*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*AccountLevelLimit*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 16 /*Title*/, false)
      && verifier.VerifyString(tablePos, 18 /*InfomationLocalizeCode*/, false)
      && verifier.VerifyField(tablePos, 20 /*CountRule*/, 4 /*SCHALE.Common.FlatData.AttendanceCountRule*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*CountReset*/, 4 /*SCHALE.Common.FlatData.AttendanceResetType*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*BookSize*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 26 /*StartDate*/, false)
      && verifier.VerifyString(tablePos, 28 /*StartableEndDate*/, false)
      && verifier.VerifyString(tablePos, 30 /*EndDate*/, false)
      && verifier.VerifyField(tablePos, 32 /*ExpiryDate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*MailType*/, 4 /*SCHALE.Common.FlatData.MailType*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*DialogCategory*/, 4 /*SCHALE.Common.FlatData.DialogCategory*/, 4, false)
      && verifier.VerifyString(tablePos, 38 /*TitleImagePath*/, false)
      && verifier.VerifyString(tablePos, 40 /*DecorationImagePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
