// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct ConstArenaExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ConstArenaExcel GetRootAsConstArenaExcel(ByteBuffer _bb) { return GetRootAsConstArenaExcel(_bb, new ConstArenaExcel()); }
  public static ConstArenaExcel GetRootAsConstArenaExcel(ByteBuffer _bb, ConstArenaExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstArenaExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long AttackCoolTime { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BattleDuration { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefenseCoolTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TSSStartCoolTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EndAlarm { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TimeRewardMaxAmount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.ParcelType EnterCostType { get { int o = __p.__offset(16); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.ParcelType.None; } }
  public long EnterCostId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TicketCost { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string DailyRewardResetTime { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDailyRewardResetTimeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDailyRewardResetTimeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDailyRewardResetTimeArray() { return __p.__vector_as_array<byte>(22); }
  public string OpenScenarioId { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpenScenarioIdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetOpenScenarioIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetOpenScenarioIdArray() { return __p.__vector_as_array<byte>(24); }
  public long CharacterSlotHideRank(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int CharacterSlotHideRankLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetCharacterSlotHideRankBytes() { return __p.__vector_as_span<long>(26, 8); }
#else
  public ArraySegment<byte>? GetCharacterSlotHideRankBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public long[] GetCharacterSlotHideRankArray() { return __p.__vector_as_array<long>(26); }
  public long MapSlotHideRank { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RelativeOpponentRankStart(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RelativeOpponentRankStartLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRelativeOpponentRankStartBytes() { return __p.__vector_as_span<long>(30, 8); }
#else
  public ArraySegment<byte>? GetRelativeOpponentRankStartBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public long[] GetRelativeOpponentRankStartArray() { return __p.__vector_as_array<long>(30); }
  public long RelativeOpponentRankEnd(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RelativeOpponentRankEndLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRelativeOpponentRankEndBytes() { return __p.__vector_as_span<long>(32, 8); }
#else
  public ArraySegment<byte>? GetRelativeOpponentRankEndBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public long[] GetRelativeOpponentRankEndArray() { return __p.__vector_as_array<long>(32); }
  public SCHALE.Common.FlatData.StatType ModifiedStatType(int j) { int o = __p.__offset(34); return o != 0 ? (SCHALE.Common.FlatData.StatType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (SCHALE.Common.FlatData.StatType)0; }
  public int ModifiedStatTypeLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<SCHALE.Common.FlatData.StatType> GetModifiedStatTypeBytes() { return __p.__vector_as_span<SCHALE.Common.FlatData.StatType>(34, 4); }
#else
  public ArraySegment<byte>? GetModifiedStatTypeBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public SCHALE.Common.FlatData.StatType[] GetModifiedStatTypeArray() { int o = __p.__offset(34); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); SCHALE.Common.FlatData.StatType[] a = new SCHALE.Common.FlatData.StatType[l]; for (int i = 0; i < l; i++) { a[i] = (SCHALE.Common.FlatData.StatType)__p.bb.GetInt(p + i * 4); } return a; }
  public long StatMulFactor(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int StatMulFactorLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetStatMulFactorBytes() { return __p.__vector_as_span<long>(36, 8); }
#else
  public ArraySegment<byte>? GetStatMulFactorBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public long[] GetStatMulFactorArray() { return __p.__vector_as_array<long>(36); }
  public long StatSumFactor(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int StatSumFactorLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetStatSumFactorBytes() { return __p.__vector_as_span<long>(38, 8); }
#else
  public ArraySegment<byte>? GetStatSumFactorBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public long[] GetStatSumFactorArray() { return __p.__vector_as_array<long>(38); }
  public string NPCName(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NPCNameLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  public long NPCMainCharacterCount { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long NPCSupportCharacterCount { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long NPCCharacterSkillLevel { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TimeSpanInDaysForBattleHistory { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string HiddenCharacterImagePath { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHiddenCharacterImagePathBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetHiddenCharacterImagePathBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetHiddenCharacterImagePathArray() { return __p.__vector_as_array<byte>(50); }
  public long DefenseVictoryRewardMaxCount { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TopRankerCountLimit { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AutoRefreshIntervalMilliSeconds { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EchelonSettingIntervalMilliSeconds { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SkipAllowedTimeMilliSeconds { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ShowSeasonChangeInfoStartTime { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShowSeasonChangeInfoStartTimeBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetShowSeasonChangeInfoStartTimeBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetShowSeasonChangeInfoStartTimeArray() { return __p.__vector_as_array<byte>(62); }
  public string ShowSeasonChangeInfoEndTime { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShowSeasonChangeInfoEndTimeBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetShowSeasonChangeInfoEndTimeBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetShowSeasonChangeInfoEndTimeArray() { return __p.__vector_as_array<byte>(64); }
  public long ShowSeasonId { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SCHALE.Common.FlatData.ConstArenaExcel> CreateConstArenaExcel(FlatBufferBuilder builder,
      long AttackCoolTime = 0,
      long BattleDuration = 0,
      long DefenseCoolTime = 0,
      long TSSStartCoolTime = 0,
      long EndAlarm = 0,
      long TimeRewardMaxAmount = 0,
      SCHALE.Common.FlatData.ParcelType EnterCostType = SCHALE.Common.FlatData.ParcelType.None,
      long EnterCostId = 0,
      long TicketCost = 0,
      StringOffset DailyRewardResetTimeOffset = default(StringOffset),
      StringOffset OpenScenarioIdOffset = default(StringOffset),
      VectorOffset CharacterSlotHideRankOffset = default(VectorOffset),
      long MapSlotHideRank = 0,
      VectorOffset RelativeOpponentRankStartOffset = default(VectorOffset),
      VectorOffset RelativeOpponentRankEndOffset = default(VectorOffset),
      VectorOffset ModifiedStatTypeOffset = default(VectorOffset),
      VectorOffset StatMulFactorOffset = default(VectorOffset),
      VectorOffset StatSumFactorOffset = default(VectorOffset),
      VectorOffset NPCNameOffset = default(VectorOffset),
      long NPCMainCharacterCount = 0,
      long NPCSupportCharacterCount = 0,
      long NPCCharacterSkillLevel = 0,
      long TimeSpanInDaysForBattleHistory = 0,
      StringOffset HiddenCharacterImagePathOffset = default(StringOffset),
      long DefenseVictoryRewardMaxCount = 0,
      long TopRankerCountLimit = 0,
      long AutoRefreshIntervalMilliSeconds = 0,
      long EchelonSettingIntervalMilliSeconds = 0,
      long SkipAllowedTimeMilliSeconds = 0,
      StringOffset ShowSeasonChangeInfoStartTimeOffset = default(StringOffset),
      StringOffset ShowSeasonChangeInfoEndTimeOffset = default(StringOffset),
      long ShowSeasonId = 0) {
    builder.StartTable(32);
    ConstArenaExcel.AddShowSeasonId(builder, ShowSeasonId);
    ConstArenaExcel.AddSkipAllowedTimeMilliSeconds(builder, SkipAllowedTimeMilliSeconds);
    ConstArenaExcel.AddEchelonSettingIntervalMilliSeconds(builder, EchelonSettingIntervalMilliSeconds);
    ConstArenaExcel.AddAutoRefreshIntervalMilliSeconds(builder, AutoRefreshIntervalMilliSeconds);
    ConstArenaExcel.AddTopRankerCountLimit(builder, TopRankerCountLimit);
    ConstArenaExcel.AddDefenseVictoryRewardMaxCount(builder, DefenseVictoryRewardMaxCount);
    ConstArenaExcel.AddTimeSpanInDaysForBattleHistory(builder, TimeSpanInDaysForBattleHistory);
    ConstArenaExcel.AddNPCCharacterSkillLevel(builder, NPCCharacterSkillLevel);
    ConstArenaExcel.AddNPCSupportCharacterCount(builder, NPCSupportCharacterCount);
    ConstArenaExcel.AddNPCMainCharacterCount(builder, NPCMainCharacterCount);
    ConstArenaExcel.AddMapSlotHideRank(builder, MapSlotHideRank);
    ConstArenaExcel.AddTicketCost(builder, TicketCost);
    ConstArenaExcel.AddEnterCostId(builder, EnterCostId);
    ConstArenaExcel.AddTimeRewardMaxAmount(builder, TimeRewardMaxAmount);
    ConstArenaExcel.AddEndAlarm(builder, EndAlarm);
    ConstArenaExcel.AddTSSStartCoolTime(builder, TSSStartCoolTime);
    ConstArenaExcel.AddDefenseCoolTime(builder, DefenseCoolTime);
    ConstArenaExcel.AddBattleDuration(builder, BattleDuration);
    ConstArenaExcel.AddAttackCoolTime(builder, AttackCoolTime);
    ConstArenaExcel.AddShowSeasonChangeInfoEndTime(builder, ShowSeasonChangeInfoEndTimeOffset);
    ConstArenaExcel.AddShowSeasonChangeInfoStartTime(builder, ShowSeasonChangeInfoStartTimeOffset);
    ConstArenaExcel.AddHiddenCharacterImagePath(builder, HiddenCharacterImagePathOffset);
    ConstArenaExcel.AddNPCName(builder, NPCNameOffset);
    ConstArenaExcel.AddStatSumFactor(builder, StatSumFactorOffset);
    ConstArenaExcel.AddStatMulFactor(builder, StatMulFactorOffset);
    ConstArenaExcel.AddModifiedStatType(builder, ModifiedStatTypeOffset);
    ConstArenaExcel.AddRelativeOpponentRankEnd(builder, RelativeOpponentRankEndOffset);
    ConstArenaExcel.AddRelativeOpponentRankStart(builder, RelativeOpponentRankStartOffset);
    ConstArenaExcel.AddCharacterSlotHideRank(builder, CharacterSlotHideRankOffset);
    ConstArenaExcel.AddOpenScenarioId(builder, OpenScenarioIdOffset);
    ConstArenaExcel.AddDailyRewardResetTime(builder, DailyRewardResetTimeOffset);
    ConstArenaExcel.AddEnterCostType(builder, EnterCostType);
    return ConstArenaExcel.EndConstArenaExcel(builder);
  }

  public static void StartConstArenaExcel(FlatBufferBuilder builder) { builder.StartTable(32); }
  public static void AddAttackCoolTime(FlatBufferBuilder builder, long attackCoolTime) { builder.AddLong(0, attackCoolTime, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long battleDuration) { builder.AddLong(1, battleDuration, 0); }
  public static void AddDefenseCoolTime(FlatBufferBuilder builder, long defenseCoolTime) { builder.AddLong(2, defenseCoolTime, 0); }
  public static void AddTSSStartCoolTime(FlatBufferBuilder builder, long tSSStartCoolTime) { builder.AddLong(3, tSSStartCoolTime, 0); }
  public static void AddEndAlarm(FlatBufferBuilder builder, long endAlarm) { builder.AddLong(4, endAlarm, 0); }
  public static void AddTimeRewardMaxAmount(FlatBufferBuilder builder, long timeRewardMaxAmount) { builder.AddLong(5, timeRewardMaxAmount, 0); }
  public static void AddEnterCostType(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType enterCostType) { builder.AddInt(6, (int)enterCostType, 0); }
  public static void AddEnterCostId(FlatBufferBuilder builder, long enterCostId) { builder.AddLong(7, enterCostId, 0); }
  public static void AddTicketCost(FlatBufferBuilder builder, long ticketCost) { builder.AddLong(8, ticketCost, 0); }
  public static void AddDailyRewardResetTime(FlatBufferBuilder builder, StringOffset dailyRewardResetTimeOffset) { builder.AddOffset(9, dailyRewardResetTimeOffset.Value, 0); }
  public static void AddOpenScenarioId(FlatBufferBuilder builder, StringOffset openScenarioIdOffset) { builder.AddOffset(10, openScenarioIdOffset.Value, 0); }
  public static void AddCharacterSlotHideRank(FlatBufferBuilder builder, VectorOffset characterSlotHideRankOffset) { builder.AddOffset(11, characterSlotHideRankOffset.Value, 0); }
  public static VectorOffset CreateCharacterSlotHideRankVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCharacterSlotHideRankVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCharacterSlotHideRankVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCharacterSlotHideRankVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCharacterSlotHideRankVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddMapSlotHideRank(FlatBufferBuilder builder, long mapSlotHideRank) { builder.AddLong(12, mapSlotHideRank, 0); }
  public static void AddRelativeOpponentRankStart(FlatBufferBuilder builder, VectorOffset relativeOpponentRankStartOffset) { builder.AddOffset(13, relativeOpponentRankStartOffset.Value, 0); }
  public static VectorOffset CreateRelativeOpponentRankStartVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRelativeOpponentRankStartVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelativeOpponentRankStartVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelativeOpponentRankStartVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRelativeOpponentRankStartVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRelativeOpponentRankEnd(FlatBufferBuilder builder, VectorOffset relativeOpponentRankEndOffset) { builder.AddOffset(14, relativeOpponentRankEndOffset.Value, 0); }
  public static VectorOffset CreateRelativeOpponentRankEndVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRelativeOpponentRankEndVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelativeOpponentRankEndVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelativeOpponentRankEndVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRelativeOpponentRankEndVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddModifiedStatType(FlatBufferBuilder builder, VectorOffset modifiedStatTypeOffset) { builder.AddOffset(15, modifiedStatTypeOffset.Value, 0); }
  public static VectorOffset CreateModifiedStatTypeVector(FlatBufferBuilder builder, SCHALE.Common.FlatData.StatType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateModifiedStatTypeVectorBlock(FlatBufferBuilder builder, SCHALE.Common.FlatData.StatType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModifiedStatTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<SCHALE.Common.FlatData.StatType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModifiedStatTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<SCHALE.Common.FlatData.StatType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartModifiedStatTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStatMulFactor(FlatBufferBuilder builder, VectorOffset statMulFactorOffset) { builder.AddOffset(16, statMulFactorOffset.Value, 0); }
  public static VectorOffset CreateStatMulFactorVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStatMulFactorVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatMulFactorVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatMulFactorVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStatMulFactorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddStatSumFactor(FlatBufferBuilder builder, VectorOffset statSumFactorOffset) { builder.AddOffset(17, statSumFactorOffset.Value, 0); }
  public static VectorOffset CreateStatSumFactorVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStatSumFactorVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatSumFactorVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatSumFactorVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStatSumFactorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddNPCName(FlatBufferBuilder builder, VectorOffset nPCNameOffset) { builder.AddOffset(18, nPCNameOffset.Value, 0); }
  public static VectorOffset CreateNPCNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNPCNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNPCNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNPCNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNPCNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNPCMainCharacterCount(FlatBufferBuilder builder, long nPCMainCharacterCount) { builder.AddLong(19, nPCMainCharacterCount, 0); }
  public static void AddNPCSupportCharacterCount(FlatBufferBuilder builder, long nPCSupportCharacterCount) { builder.AddLong(20, nPCSupportCharacterCount, 0); }
  public static void AddNPCCharacterSkillLevel(FlatBufferBuilder builder, long nPCCharacterSkillLevel) { builder.AddLong(21, nPCCharacterSkillLevel, 0); }
  public static void AddTimeSpanInDaysForBattleHistory(FlatBufferBuilder builder, long timeSpanInDaysForBattleHistory) { builder.AddLong(22, timeSpanInDaysForBattleHistory, 0); }
  public static void AddHiddenCharacterImagePath(FlatBufferBuilder builder, StringOffset hiddenCharacterImagePathOffset) { builder.AddOffset(23, hiddenCharacterImagePathOffset.Value, 0); }
  public static void AddDefenseVictoryRewardMaxCount(FlatBufferBuilder builder, long defenseVictoryRewardMaxCount) { builder.AddLong(24, defenseVictoryRewardMaxCount, 0); }
  public static void AddTopRankerCountLimit(FlatBufferBuilder builder, long topRankerCountLimit) { builder.AddLong(25, topRankerCountLimit, 0); }
  public static void AddAutoRefreshIntervalMilliSeconds(FlatBufferBuilder builder, long autoRefreshIntervalMilliSeconds) { builder.AddLong(26, autoRefreshIntervalMilliSeconds, 0); }
  public static void AddEchelonSettingIntervalMilliSeconds(FlatBufferBuilder builder, long echelonSettingIntervalMilliSeconds) { builder.AddLong(27, echelonSettingIntervalMilliSeconds, 0); }
  public static void AddSkipAllowedTimeMilliSeconds(FlatBufferBuilder builder, long skipAllowedTimeMilliSeconds) { builder.AddLong(28, skipAllowedTimeMilliSeconds, 0); }
  public static void AddShowSeasonChangeInfoStartTime(FlatBufferBuilder builder, StringOffset showSeasonChangeInfoStartTimeOffset) { builder.AddOffset(29, showSeasonChangeInfoStartTimeOffset.Value, 0); }
  public static void AddShowSeasonChangeInfoEndTime(FlatBufferBuilder builder, StringOffset showSeasonChangeInfoEndTimeOffset) { builder.AddOffset(30, showSeasonChangeInfoEndTimeOffset.Value, 0); }
  public static void AddShowSeasonId(FlatBufferBuilder builder, long showSeasonId) { builder.AddLong(31, showSeasonId, 0); }
  public static Offset<SCHALE.Common.FlatData.ConstArenaExcel> EndConstArenaExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.ConstArenaExcel>(o);
  }
  public ConstArenaExcelT UnPack() {
    var _o = new ConstArenaExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConstArenaExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ConstArena");
    _o.AttackCoolTime = TableEncryptionService.Convert(this.AttackCoolTime, key);
    _o.BattleDuration = TableEncryptionService.Convert(this.BattleDuration, key);
    _o.DefenseCoolTime = TableEncryptionService.Convert(this.DefenseCoolTime, key);
    _o.TSSStartCoolTime = TableEncryptionService.Convert(this.TSSStartCoolTime, key);
    _o.EndAlarm = TableEncryptionService.Convert(this.EndAlarm, key);
    _o.TimeRewardMaxAmount = TableEncryptionService.Convert(this.TimeRewardMaxAmount, key);
    _o.EnterCostType = TableEncryptionService.Convert(this.EnterCostType, key);
    _o.EnterCostId = TableEncryptionService.Convert(this.EnterCostId, key);
    _o.TicketCost = TableEncryptionService.Convert(this.TicketCost, key);
    _o.DailyRewardResetTime = TableEncryptionService.Convert(this.DailyRewardResetTime, key);
    _o.OpenScenarioId = TableEncryptionService.Convert(this.OpenScenarioId, key);
    _o.CharacterSlotHideRank = new List<long>();
    for (var _j = 0; _j < this.CharacterSlotHideRankLength; ++_j) {_o.CharacterSlotHideRank.Add(TableEncryptionService.Convert(this.CharacterSlotHideRank(_j), key));}
    _o.MapSlotHideRank = TableEncryptionService.Convert(this.MapSlotHideRank, key);
    _o.RelativeOpponentRankStart = new List<long>();
    for (var _j = 0; _j < this.RelativeOpponentRankStartLength; ++_j) {_o.RelativeOpponentRankStart.Add(TableEncryptionService.Convert(this.RelativeOpponentRankStart(_j), key));}
    _o.RelativeOpponentRankEnd = new List<long>();
    for (var _j = 0; _j < this.RelativeOpponentRankEndLength; ++_j) {_o.RelativeOpponentRankEnd.Add(TableEncryptionService.Convert(this.RelativeOpponentRankEnd(_j), key));}
    _o.ModifiedStatType = new List<SCHALE.Common.FlatData.StatType>();
    for (var _j = 0; _j < this.ModifiedStatTypeLength; ++_j) {_o.ModifiedStatType.Add(TableEncryptionService.Convert(this.ModifiedStatType(_j), key));}
    _o.StatMulFactor = new List<long>();
    for (var _j = 0; _j < this.StatMulFactorLength; ++_j) {_o.StatMulFactor.Add(TableEncryptionService.Convert(this.StatMulFactor(_j), key));}
    _o.StatSumFactor = new List<long>();
    for (var _j = 0; _j < this.StatSumFactorLength; ++_j) {_o.StatSumFactor.Add(TableEncryptionService.Convert(this.StatSumFactor(_j), key));}
    _o.NPCName = new List<string>();
    for (var _j = 0; _j < this.NPCNameLength; ++_j) {_o.NPCName.Add(TableEncryptionService.Convert(this.NPCName(_j), key));}
    _o.NPCMainCharacterCount = TableEncryptionService.Convert(this.NPCMainCharacterCount, key);
    _o.NPCSupportCharacterCount = TableEncryptionService.Convert(this.NPCSupportCharacterCount, key);
    _o.NPCCharacterSkillLevel = TableEncryptionService.Convert(this.NPCCharacterSkillLevel, key);
    _o.TimeSpanInDaysForBattleHistory = TableEncryptionService.Convert(this.TimeSpanInDaysForBattleHistory, key);
    _o.HiddenCharacterImagePath = TableEncryptionService.Convert(this.HiddenCharacterImagePath, key);
    _o.DefenseVictoryRewardMaxCount = TableEncryptionService.Convert(this.DefenseVictoryRewardMaxCount, key);
    _o.TopRankerCountLimit = TableEncryptionService.Convert(this.TopRankerCountLimit, key);
    _o.AutoRefreshIntervalMilliSeconds = TableEncryptionService.Convert(this.AutoRefreshIntervalMilliSeconds, key);
    _o.EchelonSettingIntervalMilliSeconds = TableEncryptionService.Convert(this.EchelonSettingIntervalMilliSeconds, key);
    _o.SkipAllowedTimeMilliSeconds = TableEncryptionService.Convert(this.SkipAllowedTimeMilliSeconds, key);
    _o.ShowSeasonChangeInfoStartTime = TableEncryptionService.Convert(this.ShowSeasonChangeInfoStartTime, key);
    _o.ShowSeasonChangeInfoEndTime = TableEncryptionService.Convert(this.ShowSeasonChangeInfoEndTime, key);
    _o.ShowSeasonId = TableEncryptionService.Convert(this.ShowSeasonId, key);
  }
  public static Offset<SCHALE.Common.FlatData.ConstArenaExcel> Pack(FlatBufferBuilder builder, ConstArenaExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.ConstArenaExcel>);
    var _DailyRewardResetTime = _o.DailyRewardResetTime == null ? default(StringOffset) : builder.CreateString(_o.DailyRewardResetTime);
    var _OpenScenarioId = _o.OpenScenarioId == null ? default(StringOffset) : builder.CreateString(_o.OpenScenarioId);
    var _CharacterSlotHideRank = default(VectorOffset);
    if (_o.CharacterSlotHideRank != null) {
      var __CharacterSlotHideRank = _o.CharacterSlotHideRank.ToArray();
      _CharacterSlotHideRank = CreateCharacterSlotHideRankVector(builder, __CharacterSlotHideRank);
    }
    var _RelativeOpponentRankStart = default(VectorOffset);
    if (_o.RelativeOpponentRankStart != null) {
      var __RelativeOpponentRankStart = _o.RelativeOpponentRankStart.ToArray();
      _RelativeOpponentRankStart = CreateRelativeOpponentRankStartVector(builder, __RelativeOpponentRankStart);
    }
    var _RelativeOpponentRankEnd = default(VectorOffset);
    if (_o.RelativeOpponentRankEnd != null) {
      var __RelativeOpponentRankEnd = _o.RelativeOpponentRankEnd.ToArray();
      _RelativeOpponentRankEnd = CreateRelativeOpponentRankEndVector(builder, __RelativeOpponentRankEnd);
    }
    var _ModifiedStatType = default(VectorOffset);
    if (_o.ModifiedStatType != null) {
      var __ModifiedStatType = _o.ModifiedStatType.ToArray();
      _ModifiedStatType = CreateModifiedStatTypeVector(builder, __ModifiedStatType);
    }
    var _StatMulFactor = default(VectorOffset);
    if (_o.StatMulFactor != null) {
      var __StatMulFactor = _o.StatMulFactor.ToArray();
      _StatMulFactor = CreateStatMulFactorVector(builder, __StatMulFactor);
    }
    var _StatSumFactor = default(VectorOffset);
    if (_o.StatSumFactor != null) {
      var __StatSumFactor = _o.StatSumFactor.ToArray();
      _StatSumFactor = CreateStatSumFactorVector(builder, __StatSumFactor);
    }
    var _NPCName = default(VectorOffset);
    if (_o.NPCName != null) {
      var __NPCName = new StringOffset[_o.NPCName.Count];
      for (var _j = 0; _j < __NPCName.Length; ++_j) { __NPCName[_j] = builder.CreateString(_o.NPCName[_j]); }
      _NPCName = CreateNPCNameVector(builder, __NPCName);
    }
    var _HiddenCharacterImagePath = _o.HiddenCharacterImagePath == null ? default(StringOffset) : builder.CreateString(_o.HiddenCharacterImagePath);
    var _ShowSeasonChangeInfoStartTime = _o.ShowSeasonChangeInfoStartTime == null ? default(StringOffset) : builder.CreateString(_o.ShowSeasonChangeInfoStartTime);
    var _ShowSeasonChangeInfoEndTime = _o.ShowSeasonChangeInfoEndTime == null ? default(StringOffset) : builder.CreateString(_o.ShowSeasonChangeInfoEndTime);
    return CreateConstArenaExcel(
      builder,
      _o.AttackCoolTime,
      _o.BattleDuration,
      _o.DefenseCoolTime,
      _o.TSSStartCoolTime,
      _o.EndAlarm,
      _o.TimeRewardMaxAmount,
      _o.EnterCostType,
      _o.EnterCostId,
      _o.TicketCost,
      _DailyRewardResetTime,
      _OpenScenarioId,
      _CharacterSlotHideRank,
      _o.MapSlotHideRank,
      _RelativeOpponentRankStart,
      _RelativeOpponentRankEnd,
      _ModifiedStatType,
      _StatMulFactor,
      _StatSumFactor,
      _NPCName,
      _o.NPCMainCharacterCount,
      _o.NPCSupportCharacterCount,
      _o.NPCCharacterSkillLevel,
      _o.TimeSpanInDaysForBattleHistory,
      _HiddenCharacterImagePath,
      _o.DefenseVictoryRewardMaxCount,
      _o.TopRankerCountLimit,
      _o.AutoRefreshIntervalMilliSeconds,
      _o.EchelonSettingIntervalMilliSeconds,
      _o.SkipAllowedTimeMilliSeconds,
      _ShowSeasonChangeInfoStartTime,
      _ShowSeasonChangeInfoEndTime,
      _o.ShowSeasonId);
  }
}

public class ConstArenaExcelT
{
  public long AttackCoolTime { get; set; }
  public long BattleDuration { get; set; }
  public long DefenseCoolTime { get; set; }
  public long TSSStartCoolTime { get; set; }
  public long EndAlarm { get; set; }
  public long TimeRewardMaxAmount { get; set; }
  public SCHALE.Common.FlatData.ParcelType EnterCostType { get; set; }
  public long EnterCostId { get; set; }
  public long TicketCost { get; set; }
  public string DailyRewardResetTime { get; set; }
  public string OpenScenarioId { get; set; }
  public List<long> CharacterSlotHideRank { get; set; }
  public long MapSlotHideRank { get; set; }
  public List<long> RelativeOpponentRankStart { get; set; }
  public List<long> RelativeOpponentRankEnd { get; set; }
  public List<SCHALE.Common.FlatData.StatType> ModifiedStatType { get; set; }
  public List<long> StatMulFactor { get; set; }
  public List<long> StatSumFactor { get; set; }
  public List<string> NPCName { get; set; }
  public long NPCMainCharacterCount { get; set; }
  public long NPCSupportCharacterCount { get; set; }
  public long NPCCharacterSkillLevel { get; set; }
  public long TimeSpanInDaysForBattleHistory { get; set; }
  public string HiddenCharacterImagePath { get; set; }
  public long DefenseVictoryRewardMaxCount { get; set; }
  public long TopRankerCountLimit { get; set; }
  public long AutoRefreshIntervalMilliSeconds { get; set; }
  public long EchelonSettingIntervalMilliSeconds { get; set; }
  public long SkipAllowedTimeMilliSeconds { get; set; }
  public string ShowSeasonChangeInfoStartTime { get; set; }
  public string ShowSeasonChangeInfoEndTime { get; set; }
  public long ShowSeasonId { get; set; }

  public ConstArenaExcelT() {
    this.AttackCoolTime = 0;
    this.BattleDuration = 0;
    this.DefenseCoolTime = 0;
    this.TSSStartCoolTime = 0;
    this.EndAlarm = 0;
    this.TimeRewardMaxAmount = 0;
    this.EnterCostType = SCHALE.Common.FlatData.ParcelType.None;
    this.EnterCostId = 0;
    this.TicketCost = 0;
    this.DailyRewardResetTime = null;
    this.OpenScenarioId = null;
    this.CharacterSlotHideRank = null;
    this.MapSlotHideRank = 0;
    this.RelativeOpponentRankStart = null;
    this.RelativeOpponentRankEnd = null;
    this.ModifiedStatType = null;
    this.StatMulFactor = null;
    this.StatSumFactor = null;
    this.NPCName = null;
    this.NPCMainCharacterCount = 0;
    this.NPCSupportCharacterCount = 0;
    this.NPCCharacterSkillLevel = 0;
    this.TimeSpanInDaysForBattleHistory = 0;
    this.HiddenCharacterImagePath = null;
    this.DefenseVictoryRewardMaxCount = 0;
    this.TopRankerCountLimit = 0;
    this.AutoRefreshIntervalMilliSeconds = 0;
    this.EchelonSettingIntervalMilliSeconds = 0;
    this.SkipAllowedTimeMilliSeconds = 0;
    this.ShowSeasonChangeInfoStartTime = null;
    this.ShowSeasonChangeInfoEndTime = null;
    this.ShowSeasonId = 0;
  }
}


static public class ConstArenaExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*AttackCoolTime*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*BattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*DefenseCoolTime*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*TSSStartCoolTime*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*EndAlarm*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*TimeRewardMaxAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*EnterCostType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*EnterCostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*TicketCost*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 22 /*DailyRewardResetTime*/, false)
      && verifier.VerifyString(tablePos, 24 /*OpenScenarioId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*CharacterSlotHideRank*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 28 /*MapSlotHideRank*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 30 /*RelativeOpponentRankStart*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 32 /*RelativeOpponentRankEnd*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*ModifiedStatType*/, 4 /*SCHALE.Common.FlatData.StatType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 36 /*StatMulFactor*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 38 /*StatSumFactor*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 40 /*NPCName*/, false)
      && verifier.VerifyField(tablePos, 42 /*NPCMainCharacterCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*NPCSupportCharacterCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*NPCCharacterSkillLevel*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*TimeSpanInDaysForBattleHistory*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 50 /*HiddenCharacterImagePath*/, false)
      && verifier.VerifyField(tablePos, 52 /*DefenseVictoryRewardMaxCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*TopRankerCountLimit*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*AutoRefreshIntervalMilliSeconds*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*EchelonSettingIntervalMilliSeconds*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*SkipAllowedTimeMilliSeconds*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 62 /*ShowSeasonChangeInfoStartTime*/, false)
      && verifier.VerifyString(tablePos, 64 /*ShowSeasonChangeInfoEndTime*/, false)
      && verifier.VerifyField(tablePos, 66 /*ShowSeasonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
