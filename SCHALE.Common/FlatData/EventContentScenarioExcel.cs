// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct EventContentScenarioExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EventContentScenarioExcel GetRootAsEventContentScenarioExcel(ByteBuffer _bb) { return GetRootAsEventContentScenarioExcel(_bb, new EventContentScenarioExcel()); }
  public static EventContentScenarioExcel GetRootAsEventContentScenarioExcel(ByteBuffer _bb, EventContentScenarioExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentScenarioExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int ReplayDisplayGroup { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long Order { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RecollectionNumber { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsRecollection { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsMeetup { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsOmnibus { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long ScenarioGroupId(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ScenarioGroupIdLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetScenarioGroupIdBytes() { return __p.__vector_as_span<long>(20, 8); }
#else
  public ArraySegment<byte>? GetScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public long[] GetScenarioGroupIdArray() { return __p.__vector_as_array<long>(20); }
  public SCHALE.Common.FlatData.EventContentScenarioConditionType ScenarioConditionType { get { int o = __p.__offset(22); return o != 0 ? (SCHALE.Common.FlatData.EventContentScenarioConditionType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.EventContentScenarioConditionType.None; } }
  public long ConditionAmount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ConditionEventContentId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClearedScenarioGroupId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint RecollectionSummaryLocalizeScenarioId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string RecollectionResource { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecollectionResourceBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetRecollectionResourceBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetRecollectionResourceArray() { return __p.__vector_as_array<byte>(32); }
  public bool IsRecollectionHorizon { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public SCHALE.Common.FlatData.ParcelType CostParcelType { get { int o = __p.__offset(36); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.ParcelType.None; } }
  public long CostId { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CostAmount { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public SCHALE.Common.FlatData.ParcelType RewardParcelType(int j) { int o = __p.__offset(42); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (SCHALE.Common.FlatData.ParcelType)0; }
  public int RewardParcelTypeLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<SCHALE.Common.FlatData.ParcelType> GetRewardParcelTypeBytes() { return __p.__vector_as_span<SCHALE.Common.FlatData.ParcelType>(42, 4); }
#else
  public ArraySegment<byte>? GetRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public SCHALE.Common.FlatData.ParcelType[] GetRewardParcelTypeArray() { int o = __p.__offset(42); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); SCHALE.Common.FlatData.ParcelType[] a = new SCHALE.Common.FlatData.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long RewardId(int j) { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardIdLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardIdBytes() { return __p.__vector_as_span<long>(44, 8); }
#else
  public ArraySegment<byte>? GetRewardIdBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public long[] GetRewardIdArray() { return __p.__vector_as_array<long>(44); }
  public int RewardAmount(int j) { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardAmountLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardAmountBytes() { return __p.__vector_as_span<int>(46, 4); }
#else
  public ArraySegment<byte>? GetRewardAmountBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public int[] GetRewardAmountArray() { return __p.__vector_as_array<int>(46); }

  public static Offset<SCHALE.Common.FlatData.EventContentScenarioExcel> CreateEventContentScenarioExcel(FlatBufferBuilder builder,
      long Id = 0,
      long EventContentId = 0,
      int ReplayDisplayGroup = 0,
      long Order = 0,
      long RecollectionNumber = 0,
      bool IsRecollection = false,
      bool IsMeetup = false,
      bool IsOmnibus = false,
      VectorOffset ScenarioGroupIdOffset = default(VectorOffset),
      SCHALE.Common.FlatData.EventContentScenarioConditionType ScenarioConditionType = SCHALE.Common.FlatData.EventContentScenarioConditionType.None,
      long ConditionAmount = 0,
      long ConditionEventContentId = 0,
      long ClearedScenarioGroupId = 0,
      uint RecollectionSummaryLocalizeScenarioId = 0,
      StringOffset RecollectionResourceOffset = default(StringOffset),
      bool IsRecollectionHorizon = false,
      SCHALE.Common.FlatData.ParcelType CostParcelType = SCHALE.Common.FlatData.ParcelType.None,
      long CostId = 0,
      int CostAmount = 0,
      VectorOffset RewardParcelTypeOffset = default(VectorOffset),
      VectorOffset RewardIdOffset = default(VectorOffset),
      VectorOffset RewardAmountOffset = default(VectorOffset)) {
    builder.StartTable(22);
    EventContentScenarioExcel.AddCostId(builder, CostId);
    EventContentScenarioExcel.AddClearedScenarioGroupId(builder, ClearedScenarioGroupId);
    EventContentScenarioExcel.AddConditionEventContentId(builder, ConditionEventContentId);
    EventContentScenarioExcel.AddConditionAmount(builder, ConditionAmount);
    EventContentScenarioExcel.AddRecollectionNumber(builder, RecollectionNumber);
    EventContentScenarioExcel.AddOrder(builder, Order);
    EventContentScenarioExcel.AddEventContentId(builder, EventContentId);
    EventContentScenarioExcel.AddId(builder, Id);
    EventContentScenarioExcel.AddRewardAmount(builder, RewardAmountOffset);
    EventContentScenarioExcel.AddRewardId(builder, RewardIdOffset);
    EventContentScenarioExcel.AddRewardParcelType(builder, RewardParcelTypeOffset);
    EventContentScenarioExcel.AddCostAmount(builder, CostAmount);
    EventContentScenarioExcel.AddCostParcelType(builder, CostParcelType);
    EventContentScenarioExcel.AddRecollectionResource(builder, RecollectionResourceOffset);
    EventContentScenarioExcel.AddRecollectionSummaryLocalizeScenarioId(builder, RecollectionSummaryLocalizeScenarioId);
    EventContentScenarioExcel.AddScenarioConditionType(builder, ScenarioConditionType);
    EventContentScenarioExcel.AddScenarioGroupId(builder, ScenarioGroupIdOffset);
    EventContentScenarioExcel.AddReplayDisplayGroup(builder, ReplayDisplayGroup);
    EventContentScenarioExcel.AddIsRecollectionHorizon(builder, IsRecollectionHorizon);
    EventContentScenarioExcel.AddIsOmnibus(builder, IsOmnibus);
    EventContentScenarioExcel.AddIsMeetup(builder, IsMeetup);
    EventContentScenarioExcel.AddIsRecollection(builder, IsRecollection);
    return EventContentScenarioExcel.EndEventContentScenarioExcel(builder);
  }

  public static void StartEventContentScenarioExcel(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(1, eventContentId, 0); }
  public static void AddReplayDisplayGroup(FlatBufferBuilder builder, int replayDisplayGroup) { builder.AddInt(2, replayDisplayGroup, 0); }
  public static void AddOrder(FlatBufferBuilder builder, long order) { builder.AddLong(3, order, 0); }
  public static void AddRecollectionNumber(FlatBufferBuilder builder, long recollectionNumber) { builder.AddLong(4, recollectionNumber, 0); }
  public static void AddIsRecollection(FlatBufferBuilder builder, bool isRecollection) { builder.AddBool(5, isRecollection, false); }
  public static void AddIsMeetup(FlatBufferBuilder builder, bool isMeetup) { builder.AddBool(6, isMeetup, false); }
  public static void AddIsOmnibus(FlatBufferBuilder builder, bool isOmnibus) { builder.AddBool(7, isOmnibus, false); }
  public static void AddScenarioGroupId(FlatBufferBuilder builder, VectorOffset scenarioGroupIdOffset) { builder.AddOffset(8, scenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddScenarioConditionType(FlatBufferBuilder builder, SCHALE.Common.FlatData.EventContentScenarioConditionType scenarioConditionType) { builder.AddInt(9, (int)scenarioConditionType, 0); }
  public static void AddConditionAmount(FlatBufferBuilder builder, long conditionAmount) { builder.AddLong(10, conditionAmount, 0); }
  public static void AddConditionEventContentId(FlatBufferBuilder builder, long conditionEventContentId) { builder.AddLong(11, conditionEventContentId, 0); }
  public static void AddClearedScenarioGroupId(FlatBufferBuilder builder, long clearedScenarioGroupId) { builder.AddLong(12, clearedScenarioGroupId, 0); }
  public static void AddRecollectionSummaryLocalizeScenarioId(FlatBufferBuilder builder, uint recollectionSummaryLocalizeScenarioId) { builder.AddUint(13, recollectionSummaryLocalizeScenarioId, 0); }
  public static void AddRecollectionResource(FlatBufferBuilder builder, StringOffset recollectionResourceOffset) { builder.AddOffset(14, recollectionResourceOffset.Value, 0); }
  public static void AddIsRecollectionHorizon(FlatBufferBuilder builder, bool isRecollectionHorizon) { builder.AddBool(15, isRecollectionHorizon, false); }
  public static void AddCostParcelType(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType costParcelType) { builder.AddInt(16, (int)costParcelType, 0); }
  public static void AddCostId(FlatBufferBuilder builder, long costId) { builder.AddLong(17, costId, 0); }
  public static void AddCostAmount(FlatBufferBuilder builder, int costAmount) { builder.AddInt(18, costAmount, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, VectorOffset rewardParcelTypeOffset) { builder.AddOffset(19, rewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelTypeVector(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<SCHALE.Common.FlatData.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<SCHALE.Common.FlatData.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardId(FlatBufferBuilder builder, VectorOffset rewardIdOffset) { builder.AddOffset(20, rewardIdOffset.Value, 0); }
  public static VectorOffset CreateRewardIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardAmount(FlatBufferBuilder builder, VectorOffset rewardAmountOffset) { builder.AddOffset(21, rewardAmountOffset.Value, 0); }
  public static VectorOffset CreateRewardAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SCHALE.Common.FlatData.EventContentScenarioExcel> EndEventContentScenarioExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.EventContentScenarioExcel>(o);
  }
  public EventContentScenarioExcelT UnPack() {
    var _o = new EventContentScenarioExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentScenarioExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentScenario");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.EventContentId = TableEncryptionService.Convert(this.EventContentId, key);
    _o.ReplayDisplayGroup = TableEncryptionService.Convert(this.ReplayDisplayGroup, key);
    _o.Order = TableEncryptionService.Convert(this.Order, key);
    _o.RecollectionNumber = TableEncryptionService.Convert(this.RecollectionNumber, key);
    _o.IsRecollection = TableEncryptionService.Convert(this.IsRecollection, key);
    _o.IsMeetup = TableEncryptionService.Convert(this.IsMeetup, key);
    _o.IsOmnibus = TableEncryptionService.Convert(this.IsOmnibus, key);
    _o.ScenarioGroupId = new List<long>();
    for (var _j = 0; _j < this.ScenarioGroupIdLength; ++_j) {_o.ScenarioGroupId.Add(TableEncryptionService.Convert(this.ScenarioGroupId(_j), key));}
    _o.ScenarioConditionType = TableEncryptionService.Convert(this.ScenarioConditionType, key);
    _o.ConditionAmount = TableEncryptionService.Convert(this.ConditionAmount, key);
    _o.ConditionEventContentId = TableEncryptionService.Convert(this.ConditionEventContentId, key);
    _o.ClearedScenarioGroupId = TableEncryptionService.Convert(this.ClearedScenarioGroupId, key);
    _o.RecollectionSummaryLocalizeScenarioId = TableEncryptionService.Convert(this.RecollectionSummaryLocalizeScenarioId, key);
    _o.RecollectionResource = TableEncryptionService.Convert(this.RecollectionResource, key);
    _o.IsRecollectionHorizon = TableEncryptionService.Convert(this.IsRecollectionHorizon, key);
    _o.CostParcelType = TableEncryptionService.Convert(this.CostParcelType, key);
    _o.CostId = TableEncryptionService.Convert(this.CostId, key);
    _o.CostAmount = TableEncryptionService.Convert(this.CostAmount, key);
    _o.RewardParcelType = new List<SCHALE.Common.FlatData.ParcelType>();
    for (var _j = 0; _j < this.RewardParcelTypeLength; ++_j) {_o.RewardParcelType.Add(TableEncryptionService.Convert(this.RewardParcelType(_j), key));}
    _o.RewardId = new List<long>();
    for (var _j = 0; _j < this.RewardIdLength; ++_j) {_o.RewardId.Add(TableEncryptionService.Convert(this.RewardId(_j), key));}
    _o.RewardAmount = new List<int>();
    for (var _j = 0; _j < this.RewardAmountLength; ++_j) {_o.RewardAmount.Add(TableEncryptionService.Convert(this.RewardAmount(_j), key));}
  }
  public static Offset<SCHALE.Common.FlatData.EventContentScenarioExcel> Pack(FlatBufferBuilder builder, EventContentScenarioExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.EventContentScenarioExcel>);
    var _ScenarioGroupId = default(VectorOffset);
    if (_o.ScenarioGroupId != null) {
      var __ScenarioGroupId = _o.ScenarioGroupId.ToArray();
      _ScenarioGroupId = CreateScenarioGroupIdVector(builder, __ScenarioGroupId);
    }
    var _RecollectionResource = _o.RecollectionResource == null ? default(StringOffset) : builder.CreateString(_o.RecollectionResource);
    var _RewardParcelType = default(VectorOffset);
    if (_o.RewardParcelType != null) {
      var __RewardParcelType = _o.RewardParcelType.ToArray();
      _RewardParcelType = CreateRewardParcelTypeVector(builder, __RewardParcelType);
    }
    var _RewardId = default(VectorOffset);
    if (_o.RewardId != null) {
      var __RewardId = _o.RewardId.ToArray();
      _RewardId = CreateRewardIdVector(builder, __RewardId);
    }
    var _RewardAmount = default(VectorOffset);
    if (_o.RewardAmount != null) {
      var __RewardAmount = _o.RewardAmount.ToArray();
      _RewardAmount = CreateRewardAmountVector(builder, __RewardAmount);
    }
    return CreateEventContentScenarioExcel(
      builder,
      _o.Id,
      _o.EventContentId,
      _o.ReplayDisplayGroup,
      _o.Order,
      _o.RecollectionNumber,
      _o.IsRecollection,
      _o.IsMeetup,
      _o.IsOmnibus,
      _ScenarioGroupId,
      _o.ScenarioConditionType,
      _o.ConditionAmount,
      _o.ConditionEventContentId,
      _o.ClearedScenarioGroupId,
      _o.RecollectionSummaryLocalizeScenarioId,
      _RecollectionResource,
      _o.IsRecollectionHorizon,
      _o.CostParcelType,
      _o.CostId,
      _o.CostAmount,
      _RewardParcelType,
      _RewardId,
      _RewardAmount);
  }
}

public class EventContentScenarioExcelT
{
  public long Id { get; set; }
  public long EventContentId { get; set; }
  public int ReplayDisplayGroup { get; set; }
  public long Order { get; set; }
  public long RecollectionNumber { get; set; }
  public bool IsRecollection { get; set; }
  public bool IsMeetup { get; set; }
  public bool IsOmnibus { get; set; }
  public List<long> ScenarioGroupId { get; set; }
  public SCHALE.Common.FlatData.EventContentScenarioConditionType ScenarioConditionType { get; set; }
  public long ConditionAmount { get; set; }
  public long ConditionEventContentId { get; set; }
  public long ClearedScenarioGroupId { get; set; }
  public uint RecollectionSummaryLocalizeScenarioId { get; set; }
  public string RecollectionResource { get; set; }
  public bool IsRecollectionHorizon { get; set; }
  public SCHALE.Common.FlatData.ParcelType CostParcelType { get; set; }
  public long CostId { get; set; }
  public int CostAmount { get; set; }
  public List<SCHALE.Common.FlatData.ParcelType> RewardParcelType { get; set; }
  public List<long> RewardId { get; set; }
  public List<int> RewardAmount { get; set; }

  public EventContentScenarioExcelT() {
    this.Id = 0;
    this.EventContentId = 0;
    this.ReplayDisplayGroup = 0;
    this.Order = 0;
    this.RecollectionNumber = 0;
    this.IsRecollection = false;
    this.IsMeetup = false;
    this.IsOmnibus = false;
    this.ScenarioGroupId = null;
    this.ScenarioConditionType = SCHALE.Common.FlatData.EventContentScenarioConditionType.None;
    this.ConditionAmount = 0;
    this.ConditionEventContentId = 0;
    this.ClearedScenarioGroupId = 0;
    this.RecollectionSummaryLocalizeScenarioId = 0;
    this.RecollectionResource = null;
    this.IsRecollectionHorizon = false;
    this.CostParcelType = SCHALE.Common.FlatData.ParcelType.None;
    this.CostId = 0;
    this.CostAmount = 0;
    this.RewardParcelType = null;
    this.RewardId = null;
    this.RewardAmount = null;
  }
}


static public class EventContentScenarioExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*ReplayDisplayGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Order*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*RecollectionNumber*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*IsRecollection*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*IsMeetup*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*IsOmnibus*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*ScenarioGroupId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 22 /*ScenarioConditionType*/, 4 /*SCHALE.Common.FlatData.EventContentScenarioConditionType*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*ConditionAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*ConditionEventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*ClearedScenarioGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*RecollectionSummaryLocalizeScenarioId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 32 /*RecollectionResource*/, false)
      && verifier.VerifyField(tablePos, 34 /*IsRecollectionHorizon*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 36 /*CostParcelType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*CostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*CostAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 42 /*RewardParcelType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 44 /*RewardId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 46 /*RewardAmount*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
