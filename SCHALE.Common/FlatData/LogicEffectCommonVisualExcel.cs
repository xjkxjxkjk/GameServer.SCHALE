// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::SCHALE.Common.Crypto;
using global::Google.FlatBuffers;

public struct LogicEffectCommonVisualExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static LogicEffectCommonVisualExcel GetRootAsLogicEffectCommonVisualExcel(ByteBuffer _bb) { return GetRootAsLogicEffectCommonVisualExcel(_bb, new LogicEffectCommonVisualExcel()); }
  public static LogicEffectCommonVisualExcel GetRootAsLogicEffectCommonVisualExcel(ByteBuffer _bb, LogicEffectCommonVisualExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LogicEffectCommonVisualExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint StringID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string IconSpriteName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconSpriteNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIconSpriteNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIconSpriteNameArray() { return __p.__vector_as_array<byte>(6); }
  public float IconDispelColor(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int IconDispelColorLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetIconDispelColorBytes() { return __p.__vector_as_span<float>(8, 4); }
#else
  public ArraySegment<byte>? GetIconDispelColorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetIconDispelColorArray() { return __p.__vector_as_array<float>(8); }
  public string ParticleEnterPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParticleEnterPathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetParticleEnterPathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetParticleEnterPathArray() { return __p.__vector_as_array<byte>(10); }
  public SCHALE.Common.FlatData.EffectBone ParticleEnterSocket { get { int o = __p.__offset(12); return o != 0 ? (SCHALE.Common.FlatData.EffectBone)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.EffectBone.None; } }
  public string ParticleLoopPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParticleLoopPathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetParticleLoopPathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetParticleLoopPathArray() { return __p.__vector_as_array<byte>(14); }
  public SCHALE.Common.FlatData.EffectBone ParticleLoopSocket { get { int o = __p.__offset(16); return o != 0 ? (SCHALE.Common.FlatData.EffectBone)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.EffectBone.None; } }
  public string ParticleEndPath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParticleEndPathBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetParticleEndPathBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetParticleEndPathArray() { return __p.__vector_as_array<byte>(18); }
  public SCHALE.Common.FlatData.EffectBone ParticleEndSocket { get { int o = __p.__offset(20); return o != 0 ? (SCHALE.Common.FlatData.EffectBone)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.EffectBone.None; } }
  public string ParticleApplyPath { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParticleApplyPathBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetParticleApplyPathBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetParticleApplyPathArray() { return __p.__vector_as_array<byte>(22); }
  public SCHALE.Common.FlatData.EffectBone ParticleApplySocket { get { int o = __p.__offset(24); return o != 0 ? (SCHALE.Common.FlatData.EffectBone)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.EffectBone.None; } }
  public string ParticleRemovedPath { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParticleRemovedPathBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetParticleRemovedPathBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetParticleRemovedPathArray() { return __p.__vector_as_array<byte>(26); }
  public SCHALE.Common.FlatData.EffectBone ParticleRemovedSocket { get { int o = __p.__offset(28); return o != 0 ? (SCHALE.Common.FlatData.EffectBone)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.EffectBone.None; } }

  public static Offset<SCHALE.Common.FlatData.LogicEffectCommonVisualExcel> CreateLogicEffectCommonVisualExcel(FlatBufferBuilder builder,
      uint StringID = 0,
      StringOffset IconSpriteNameOffset = default(StringOffset),
      VectorOffset IconDispelColorOffset = default(VectorOffset),
      StringOffset ParticleEnterPathOffset = default(StringOffset),
      SCHALE.Common.FlatData.EffectBone ParticleEnterSocket = SCHALE.Common.FlatData.EffectBone.None,
      StringOffset ParticleLoopPathOffset = default(StringOffset),
      SCHALE.Common.FlatData.EffectBone ParticleLoopSocket = SCHALE.Common.FlatData.EffectBone.None,
      StringOffset ParticleEndPathOffset = default(StringOffset),
      SCHALE.Common.FlatData.EffectBone ParticleEndSocket = SCHALE.Common.FlatData.EffectBone.None,
      StringOffset ParticleApplyPathOffset = default(StringOffset),
      SCHALE.Common.FlatData.EffectBone ParticleApplySocket = SCHALE.Common.FlatData.EffectBone.None,
      StringOffset ParticleRemovedPathOffset = default(StringOffset),
      SCHALE.Common.FlatData.EffectBone ParticleRemovedSocket = SCHALE.Common.FlatData.EffectBone.None) {
    builder.StartTable(13);
    LogicEffectCommonVisualExcel.AddParticleRemovedSocket(builder, ParticleRemovedSocket);
    LogicEffectCommonVisualExcel.AddParticleRemovedPath(builder, ParticleRemovedPathOffset);
    LogicEffectCommonVisualExcel.AddParticleApplySocket(builder, ParticleApplySocket);
    LogicEffectCommonVisualExcel.AddParticleApplyPath(builder, ParticleApplyPathOffset);
    LogicEffectCommonVisualExcel.AddParticleEndSocket(builder, ParticleEndSocket);
    LogicEffectCommonVisualExcel.AddParticleEndPath(builder, ParticleEndPathOffset);
    LogicEffectCommonVisualExcel.AddParticleLoopSocket(builder, ParticleLoopSocket);
    LogicEffectCommonVisualExcel.AddParticleLoopPath(builder, ParticleLoopPathOffset);
    LogicEffectCommonVisualExcel.AddParticleEnterSocket(builder, ParticleEnterSocket);
    LogicEffectCommonVisualExcel.AddParticleEnterPath(builder, ParticleEnterPathOffset);
    LogicEffectCommonVisualExcel.AddIconDispelColor(builder, IconDispelColorOffset);
    LogicEffectCommonVisualExcel.AddIconSpriteName(builder, IconSpriteNameOffset);
    LogicEffectCommonVisualExcel.AddStringID(builder, StringID);
    return LogicEffectCommonVisualExcel.EndLogicEffectCommonVisualExcel(builder);
  }

  public static void StartLogicEffectCommonVisualExcel(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddStringID(FlatBufferBuilder builder, uint stringID) { builder.AddUint(0, stringID, 0); }
  public static void AddIconSpriteName(FlatBufferBuilder builder, StringOffset iconSpriteNameOffset) { builder.AddOffset(1, iconSpriteNameOffset.Value, 0); }
  public static void AddIconDispelColor(FlatBufferBuilder builder, VectorOffset iconDispelColorOffset) { builder.AddOffset(2, iconDispelColorOffset.Value, 0); }
  public static VectorOffset CreateIconDispelColorVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIconDispelColorVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIconDispelColorVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIconDispelColorVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIconDispelColorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddParticleEnterPath(FlatBufferBuilder builder, StringOffset particleEnterPathOffset) { builder.AddOffset(3, particleEnterPathOffset.Value, 0); }
  public static void AddParticleEnterSocket(FlatBufferBuilder builder, SCHALE.Common.FlatData.EffectBone particleEnterSocket) { builder.AddInt(4, (int)particleEnterSocket, 0); }
  public static void AddParticleLoopPath(FlatBufferBuilder builder, StringOffset particleLoopPathOffset) { builder.AddOffset(5, particleLoopPathOffset.Value, 0); }
  public static void AddParticleLoopSocket(FlatBufferBuilder builder, SCHALE.Common.FlatData.EffectBone particleLoopSocket) { builder.AddInt(6, (int)particleLoopSocket, 0); }
  public static void AddParticleEndPath(FlatBufferBuilder builder, StringOffset particleEndPathOffset) { builder.AddOffset(7, particleEndPathOffset.Value, 0); }
  public static void AddParticleEndSocket(FlatBufferBuilder builder, SCHALE.Common.FlatData.EffectBone particleEndSocket) { builder.AddInt(8, (int)particleEndSocket, 0); }
  public static void AddParticleApplyPath(FlatBufferBuilder builder, StringOffset particleApplyPathOffset) { builder.AddOffset(9, particleApplyPathOffset.Value, 0); }
  public static void AddParticleApplySocket(FlatBufferBuilder builder, SCHALE.Common.FlatData.EffectBone particleApplySocket) { builder.AddInt(10, (int)particleApplySocket, 0); }
  public static void AddParticleRemovedPath(FlatBufferBuilder builder, StringOffset particleRemovedPathOffset) { builder.AddOffset(11, particleRemovedPathOffset.Value, 0); }
  public static void AddParticleRemovedSocket(FlatBufferBuilder builder, SCHALE.Common.FlatData.EffectBone particleRemovedSocket) { builder.AddInt(12, (int)particleRemovedSocket, 0); }
  public static Offset<SCHALE.Common.FlatData.LogicEffectCommonVisualExcel> EndLogicEffectCommonVisualExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.LogicEffectCommonVisualExcel>(o);
  }
  public LogicEffectCommonVisualExcelT UnPack() {
    var _o = new LogicEffectCommonVisualExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LogicEffectCommonVisualExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("LogicEffectCommonVisual");
    _o.StringID = TableEncryptionService.Convert(this.StringID, key);
    _o.IconSpriteName = TableEncryptionService.Convert(this.IconSpriteName, key);
    _o.IconDispelColor = new List<float>();
    for (var _j = 0; _j < this.IconDispelColorLength; ++_j) {_o.IconDispelColor.Add(TableEncryptionService.Convert(this.IconDispelColor(_j), key));}
    _o.ParticleEnterPath = TableEncryptionService.Convert(this.ParticleEnterPath, key);
    _o.ParticleEnterSocket = TableEncryptionService.Convert(this.ParticleEnterSocket, key);
    _o.ParticleLoopPath = TableEncryptionService.Convert(this.ParticleLoopPath, key);
    _o.ParticleLoopSocket = TableEncryptionService.Convert(this.ParticleLoopSocket, key);
    _o.ParticleEndPath = TableEncryptionService.Convert(this.ParticleEndPath, key);
    _o.ParticleEndSocket = TableEncryptionService.Convert(this.ParticleEndSocket, key);
    _o.ParticleApplyPath = TableEncryptionService.Convert(this.ParticleApplyPath, key);
    _o.ParticleApplySocket = TableEncryptionService.Convert(this.ParticleApplySocket, key);
    _o.ParticleRemovedPath = TableEncryptionService.Convert(this.ParticleRemovedPath, key);
    _o.ParticleRemovedSocket = TableEncryptionService.Convert(this.ParticleRemovedSocket, key);
  }
  public static Offset<SCHALE.Common.FlatData.LogicEffectCommonVisualExcel> Pack(FlatBufferBuilder builder, LogicEffectCommonVisualExcelT _o) {
    if (_o == null) return default(Offset<SCHALE.Common.FlatData.LogicEffectCommonVisualExcel>);
    var _IconSpriteName = _o.IconSpriteName == null ? default(StringOffset) : builder.CreateString(_o.IconSpriteName);
    var _IconDispelColor = default(VectorOffset);
    if (_o.IconDispelColor != null) {
      var __IconDispelColor = _o.IconDispelColor.ToArray();
      _IconDispelColor = CreateIconDispelColorVector(builder, __IconDispelColor);
    }
    var _ParticleEnterPath = _o.ParticleEnterPath == null ? default(StringOffset) : builder.CreateString(_o.ParticleEnterPath);
    var _ParticleLoopPath = _o.ParticleLoopPath == null ? default(StringOffset) : builder.CreateString(_o.ParticleLoopPath);
    var _ParticleEndPath = _o.ParticleEndPath == null ? default(StringOffset) : builder.CreateString(_o.ParticleEndPath);
    var _ParticleApplyPath = _o.ParticleApplyPath == null ? default(StringOffset) : builder.CreateString(_o.ParticleApplyPath);
    var _ParticleRemovedPath = _o.ParticleRemovedPath == null ? default(StringOffset) : builder.CreateString(_o.ParticleRemovedPath);
    return CreateLogicEffectCommonVisualExcel(
      builder,
      _o.StringID,
      _IconSpriteName,
      _IconDispelColor,
      _ParticleEnterPath,
      _o.ParticleEnterSocket,
      _ParticleLoopPath,
      _o.ParticleLoopSocket,
      _ParticleEndPath,
      _o.ParticleEndSocket,
      _ParticleApplyPath,
      _o.ParticleApplySocket,
      _ParticleRemovedPath,
      _o.ParticleRemovedSocket);
  }
}

public class LogicEffectCommonVisualExcelT
{
  public uint StringID { get; set; }
  public string IconSpriteName { get; set; }
  public List<float> IconDispelColor { get; set; }
  public string ParticleEnterPath { get; set; }
  public SCHALE.Common.FlatData.EffectBone ParticleEnterSocket { get; set; }
  public string ParticleLoopPath { get; set; }
  public SCHALE.Common.FlatData.EffectBone ParticleLoopSocket { get; set; }
  public string ParticleEndPath { get; set; }
  public SCHALE.Common.FlatData.EffectBone ParticleEndSocket { get; set; }
  public string ParticleApplyPath { get; set; }
  public SCHALE.Common.FlatData.EffectBone ParticleApplySocket { get; set; }
  public string ParticleRemovedPath { get; set; }
  public SCHALE.Common.FlatData.EffectBone ParticleRemovedSocket { get; set; }

  public LogicEffectCommonVisualExcelT() {
    this.StringID = 0;
    this.IconSpriteName = null;
    this.IconDispelColor = null;
    this.ParticleEnterPath = null;
    this.ParticleEnterSocket = SCHALE.Common.FlatData.EffectBone.None;
    this.ParticleLoopPath = null;
    this.ParticleLoopSocket = SCHALE.Common.FlatData.EffectBone.None;
    this.ParticleEndPath = null;
    this.ParticleEndSocket = SCHALE.Common.FlatData.EffectBone.None;
    this.ParticleApplyPath = null;
    this.ParticleApplySocket = SCHALE.Common.FlatData.EffectBone.None;
    this.ParticleRemovedPath = null;
    this.ParticleRemovedSocket = SCHALE.Common.FlatData.EffectBone.None;
  }
}


static public class LogicEffectCommonVisualExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*StringID*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*IconSpriteName*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*IconDispelColor*/, 4 /*float*/, false)
      && verifier.VerifyString(tablePos, 10 /*ParticleEnterPath*/, false)
      && verifier.VerifyField(tablePos, 12 /*ParticleEnterSocket*/, 4 /*SCHALE.Common.FlatData.EffectBone*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*ParticleLoopPath*/, false)
      && verifier.VerifyField(tablePos, 16 /*ParticleLoopSocket*/, 4 /*SCHALE.Common.FlatData.EffectBone*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*ParticleEndPath*/, false)
      && verifier.VerifyField(tablePos, 20 /*ParticleEndSocket*/, 4 /*SCHALE.Common.FlatData.EffectBone*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*ParticleApplyPath*/, false)
      && verifier.VerifyField(tablePos, 24 /*ParticleApplySocket*/, 4 /*SCHALE.Common.FlatData.EffectBone*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*ParticleRemovedPath*/, false)
      && verifier.VerifyField(tablePos, 28 /*ParticleRemovedSocket*/, 4 /*SCHALE.Common.FlatData.EffectBone*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
