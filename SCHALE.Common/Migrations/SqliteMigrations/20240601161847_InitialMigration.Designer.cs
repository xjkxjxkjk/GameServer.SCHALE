// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SCHALE.Common.Database;

#nullable disable

namespace SCHALE.Common.Migrations.SqliteMigrations
{
    [DbContext(typeof(SCHALESqliteContext))]
    [Migration("20240601161847_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("SCHALE.Common.Database.AccountDB", b =>
                {
                    b.Property<long>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("CallName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CallNameUpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DevId")
                        .HasColumnType("TEXT");

                    b.Property<long>("Exp")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastConnectTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LinkRewardDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LobbyMode")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemoryLobbyUniqueId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nickname")
                        .HasColumnType("TEXT");

                    b.Property<long>("PublisherAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RaidInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RepresentCharacterServerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RetentionDays")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnReadMailCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VIPLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServerId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SCHALE.Common.Database.CharacterDB", b =>
                {
                    b.Property<long>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountServerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EquipmentServerIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EquipmentSlotAndDBIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExSkillLevel")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Exp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExtraPassiveSkillLevel")
                        .HasColumnType("INTEGER");

                    b.Property<long>("FavorExp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FavorRank")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaderSkillLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassiveSkillLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PotentialStats")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PublicSkillLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StarGrade")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UniqueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServerId");

                    b.HasIndex("AccountServerId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("SCHALE.Common.Database.EchelonDB", b =>
                {
                    b.Property<long>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountServerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CombatStyleIndex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("EchelonNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EchelonType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExtensionType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LeaderServerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MainSlotServerIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SkillCardMulliganCharacterIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SupportSlotServerIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TSSInteractionServerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsingFlag")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServerId");

                    b.HasIndex("AccountServerId");

                    b.ToTable("Echelons");
                });

            modelBuilder.Entity("SCHALE.Common.Database.EquipmentDB", b =>
                {
                    b.Property<long>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountServerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("BoundCharacterServerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Exp")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StackCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tier")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UniqueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServerId");

                    b.HasIndex("AccountServerId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("SCHALE.Common.Database.GearDB", b =>
                {
                    b.Property<long>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountServerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("BoundCharacterServerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Exp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SlotIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tier")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UniqueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServerId");

                    b.HasIndex("AccountServerId");

                    b.ToTable("Gears");
                });

            modelBuilder.Entity("SCHALE.Common.Database.ItemDB", b =>
                {
                    b.Property<long>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountServerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StackCount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UniqueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServerId");

                    b.HasIndex("AccountServerId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("SCHALE.Common.Database.MemoryLobbyDB", b =>
                {
                    b.Property<long>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountServerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemoryLobbyUniqueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServerId");

                    b.HasIndex("AccountServerId");

                    b.ToTable("MemoryLobbies");
                });

            modelBuilder.Entity("SCHALE.Common.Database.MissionProgressDB", b =>
                {
                    b.Property<long>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountServerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Complete")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MissionUniqueId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProgressParameters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ServerId");

                    b.HasIndex("AccountServerId");

                    b.ToTable("MissionProgresses");
                });

            modelBuilder.Entity("SCHALE.Common.Database.Models.AccountTutorial", b =>
                {
                    b.Property<long>("AccountServerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TutorialIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AccountServerId");

                    b.ToTable("AccountTutorials");
                });

            modelBuilder.Entity("SCHALE.Common.Database.Models.GuestAccount", b =>
                {
                    b.Property<long>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Uid");

                    b.ToTable("GuestAccounts");
                });

            modelBuilder.Entity("SCHALE.Common.Database.ScenarioHistoryDB", b =>
                {
                    b.Property<long>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountServerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ClearDateTime")
                        .HasColumnType("TEXT");

                    b.Property<long>("ScenarioUniqueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServerId");

                    b.HasIndex("AccountServerId");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("SCHALE.Common.Database.WeaponDB", b =>
                {
                    b.Property<long>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountServerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("BoundCharacterServerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Exp")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StarGrade")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UniqueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServerId");

                    b.HasIndex("AccountServerId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("SCHALE.Common.Database.CharacterDB", b =>
                {
                    b.HasOne("SCHALE.Common.Database.AccountDB", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SCHALE.Common.Database.EchelonDB", b =>
                {
                    b.HasOne("SCHALE.Common.Database.AccountDB", "Account")
                        .WithMany("Echelons")
                        .HasForeignKey("AccountServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SCHALE.Common.Database.EquipmentDB", b =>
                {
                    b.HasOne("SCHALE.Common.Database.AccountDB", "Account")
                        .WithMany("Equipment")
                        .HasForeignKey("AccountServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SCHALE.Common.Database.GearDB", b =>
                {
                    b.HasOne("SCHALE.Common.Database.AccountDB", "Account")
                        .WithMany("Gears")
                        .HasForeignKey("AccountServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SCHALE.Common.Database.ItemDB", b =>
                {
                    b.HasOne("SCHALE.Common.Database.AccountDB", "Account")
                        .WithMany("Items")
                        .HasForeignKey("AccountServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SCHALE.Common.Database.MemoryLobbyDB", b =>
                {
                    b.HasOne("SCHALE.Common.Database.AccountDB", "Account")
                        .WithMany("MemoryLobbies")
                        .HasForeignKey("AccountServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SCHALE.Common.Database.MissionProgressDB", b =>
                {
                    b.HasOne("SCHALE.Common.Database.AccountDB", "Account")
                        .WithMany("MissionProgresses")
                        .HasForeignKey("AccountServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SCHALE.Common.Database.ScenarioHistoryDB", b =>
                {
                    b.HasOne("SCHALE.Common.Database.AccountDB", "Account")
                        .WithMany("Scenarios")
                        .HasForeignKey("AccountServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SCHALE.Common.Database.WeaponDB", b =>
                {
                    b.HasOne("SCHALE.Common.Database.AccountDB", "Account")
                        .WithMany("Weapons")
                        .HasForeignKey("AccountServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SCHALE.Common.Database.AccountDB", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Echelons");

                    b.Navigation("Equipment");

                    b.Navigation("Gears");

                    b.Navigation("Items");

                    b.Navigation("MemoryLobbies");

                    b.Navigation("MissionProgresses");

                    b.Navigation("Scenarios");

                    b.Navigation("Weapons");
                });
#pragma warning restore 612, 618
        }
    }
}
